Question,Paraphrased Question,Generated Code,Expected Answer Type,Generated Answer,Expected Answer
Is the person with the highest net worth self-made?,Does the person with the highest rank have the self-made attribute set to True?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_rank_person = dataset.loc[dataset[""rank""] == dataset[""rank""].max()]
    is_self_made = max_rank_person[""selfMade""].bool()

    return is_self_made",bool,-,True
Does the youngest billionaire identify as male?,Does the youngest person in the dataset identify as male?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    youngest_person = dataset.loc[dataset[""age""] == dataset[""age""].min()]
    gender = youngest_person[""gender""].values[0]
    
    return gender == 'Male'",bool,False,True
Is the city with the most billionaires in the United States?,Is the city with the highest number of billionaires in the United States?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter data for the United States
    us_data = dataset[dataset['country'] == 'United States']
    
    # Get the city with the highest number of billionaires
    max_city = us_data['city'].mode().values[0]
    
    # Check if the city is in the United States
    is_us_city = max_city in ['New York City', 'Los Angeles', 'San Francisco', 'Chicago', 'Houston', 'Miami']
    
    return is_us_city",bool,False,True
Is there a non-self-made billionaire in the top 5 ranks?,Are there any billionaires in the top 5 ranks who are not self-made?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the top 5 ranks
    top_5_ranks = dataset.head(5)
    
    # Check if there are any billionaires in the top 5 ranks who are not self-made
    billionaires_not_self_made = top_5_ranks[(top_5_ranks['finalWorth'] >= 1000000000) & (top_5_ranks['selfMade'] == False)]
    
    # Return the result as a boolean
    return not billionaires_not_self_made.empty",bool,False,True
Does the oldest billionaire have a philanthropy score of 5?,Does the oldest person in the dataset have a philanthropy score of 5?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    oldest_person = dataset.loc[dataset[""age""] == dataset[""age""].max()]
    philanthropy_score = oldest_person[""philanthropyScore""].values[0]

    return philanthropy_score == 5.0",bool,False,False
What is the age of the youngest billionaire?,What is the minimum age of all billionaires?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	min_age = dataset['age'].min()
	return min_age",float64,19.0,19.0
How many billionaires are there from the 'Technology' category?,What is the count of billionaires in the 'Technology' category?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    tech_billionaires = dataset[(dataset[""category""] == 'Technology') & (dataset[""finalWorth""] >= 1000000000)]
    count = tech_billionaires[""rank""].nunique()

    return count",uint16,0,343
What's the total worth of billionaires in the 'Automotive' category?,What is the sum of the final worth of all billionaires in the 'Automotive' category?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	automotive_billionaires = db[db['category'] == 'Automotive']
	final_worth_sum = automotive_billionaires['finalWorth'].sum()

	return final_worth_sum",uint32,583600,583600
How many billionaires have a philanthropy score above 3?,What is the count of billionaires with a philanthropy score greater than 3?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter rows where philanthropyScore is greater than 3
    filtered_data = db[db['philanthropyScore'] > 3]
    
    # Count the number of rows
    count = filtered_data.shape[0]
    
    return count",uint16,25,25
What's the rank of the wealthiest non-self-made billionaire?,What is the rank of the billionaire with the highest final worth who is not self-made?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only non-self-made billionaires
    non_self_made = db[db['selfMade'] == False]
    
    # Find the individual with the highest final worth among non-self-made billionaires
    max_worth_individual = non_self_made.loc[non_self_made['finalWorth'] == non_self_made['finalWorth'].max()]
    
    # Extract the rank of the individual
    rank = max_worth_individual['rank'].values[0]
    
    return rank",uint16,3,3
Which category does the richest billionaire belong to?,What is the category of the billionaire with the highest final worth?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	max_worth_individual = dataset.loc[dataset[""finalWorth""] == dataset[""finalWorth""].max()]
	category = max_worth_individual[""category""].values[0]

	return category",category,Automotive,Automotive
What's the country of origin of the oldest billionaire?,What is the country of the oldest person in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    oldest_person = dataset.loc[dataset[""age""] == dataset[""age""].max()]
    country = oldest_person[""country""].values[0]
    
    return country",category,United States,United States
What's the gender of the billionaire with the highest philanthropy score?,What is the gender of the person with the highest philanthropy score?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	max_philanthropy_person = dataset.loc[dataset[""philanthropyScore""] == dataset[""philanthropyScore""].max()]
	gender = max_philanthropy_person[""gender""].values[0]

	return gender",category,M,M
What's the source of wealth for the youngest billionaire?,What is the source of wealth for the person with the lowest age?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	min_age_person = dataset.loc[dataset[""age""] == dataset[""age""].min()]
	source_wealth = min_age_person[""source""].values[0]

	return source_wealth",category,drugstores,drugstores
What is the title of the billionaire with the lowest rank?,What is the title of the person with the lowest rank?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	min_rank_person = dataset.loc[dataset[""rank""] == dataset[""rank""].min()]
	title = min_rank_person[""title""].values[0]

	return title",string,CEO,
List the top 3 countries with the most billionaires.,Which are the top 3 countries with the highest number of billionaires?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	# Group by country and count the number of billionaires
	country_counts = db.groupby('country').size().reset_index(name='count')

	# Sort the countries by count in descending order and get the top 3
	top_3_countries = country_counts.sort_values('count', ascending=False).head(3)['country'].tolist()

	return top_3_countries",list,"['United States', 'China', 'India']","['United States', 'China', 'India']"
List the top 2 most common sources of wealth for billionaires.,What are the two most frequent sources of wealth for billionaires?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	source_counts = dataset['source'].value_counts()
	top_2_sources = source_counts.index[:2].tolist()

	return top_2_sources",category,"['real estate', 'investments']","['real estate', 'investments']"
List the 4 cities where the four youngest billionaires live.,What are the names of the cities where the four youngest billionaires reside?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the youngest billionaires
    youngest_billionaires = dataset[dataset['finalWorth'] >= 1000000000].nsmallest(4, 'age')
    
    # Extract the city names
    city_names = youngest_billionaires['city'].tolist()
    
    # Return the city names as a list of strings
    return city_names",string,[],"['', 'Los Angeles', 'Jiaozuo', 'Oslo']"
List the 4 categories with the fewest billionaires.,What are the four categories with the least number of billionaires?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the category column
    category_data = db['category']
    
    # Get the category counts and sort in ascending order
    category_counts = category_data.value_counts()
    sorted_categories = category_counts.sort_values(ascending=True)
    
    # Get the first four categories with the least number of billionaires
    least_categories = list(sorted_categories.index[:4])
    
    return least_categories",category,"['Gambling & Casinos', 'Sports', 'Logistics', 'Telecom']","['Telecom', 'Logistics', 'Sports', 'Gambling & Casinos']"
List the 2 countries with the least number of billionaires. If there are more than two with the same number take the first two alphabetically.,"What are the two countries with the least number of billionaires, sorted alphabetically?","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    country_counts = dataset['country'].value_counts()
    least_countries = country_counts.index[-2:].tolist()
    least_countries.sort()

    return least_countries",category,"['Andorra', 'Colombia']","['Algeria', 'Andorra']"
List the top 5 ranks of billionaires who are not self-made.,What are the top 5 ranks of billionaires who are not self-made?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter out self-made billionaires
    non_self_made = dataset[dataset['selfMade'] == False]
    
    # Sort by rank and get the top 5
    top_5_ranks = non_self_made.sort_values(by='rank').head(5)['rank'].tolist()
    
    return top_5_ranks",list of integers,"[3, 10, 14, 16, 18]","[3, 10, 14, 16, 18]"
List the youngest 3 ages of billionaires who have a philanthropy score of 5.,What are the three youngest ages of billionaires with a philanthropy score of 5?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only billionaires with a philanthropy score of 5
    filtered_dataset = dataset[dataset['philanthropyScore'] == 5]
    
    # Sort the filtered dataset by age in ascending order
    sorted_dataset = filtered_dataset.sort_values(by='age')
    
    # Get the three youngest ages
    youngest_ages = sorted_dataset['age'].head(3).tolist()
    
    return youngest_ages",list of float64,"[48.0, 83.0, 83.0]","[48.0, 83.0, 83.0]"
List the highest 6 final worth values of billionaires in the 'Technology' category.,What are the top 6 final worth values of billionaires in the 'Technology' category?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for the 'Technology' category
    tech_billionaires = db[db['category'] == 'Technology']
    
    # Sort the values by final worth in descending order and get the top 6 values
    top_6_final_worth = tech_billionaires.sort_values(by='finalWorth', ascending=False)['finalWorth'].head(6).tolist()
    
    return top_6_final_worth",list,"[171000, 129000, 111000, 107000, 106000, 91400]","[171000, 129000, 111000, 107000, 106000, 91400]"
List the top 4 ranks of female billionaires.,What are the names of the top 4 female billionaires in terms of rank?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter female billionaires
    female_billionaires = dataset[dataset['gender'] == 'Female']
    
    # Sort by rank and get the top 4 names
    top_4_female_billionaires = female_billionaires.sort_values(by='rank').head(4)['personName'].tolist()
    
    return top_4_female_billionaires",list of strings,[],"[14, 18, 21, 30]"
List the top 2 final worth values of billionaires in the 'Automotive' category.,What are the top 2 final worth values of billionaires in the 'Automotive' category?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	automotive_billionaires = db[db[""category""] == 'Automotive']
	top_2_worth = automotive_billionaires.nlargest(2, 'finalWorth')['finalWorth'].tolist()

	return top_2_worth",list,"[219000, 44800]","[219000, 44800]"
Did any children below the age of 18 survive?,Were there any survivors aged under 18?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    survivors_under_18 = dataset[(dataset['Survived'] == True) & (dataset['Age'] < 18)]
    
    if survivors_under_18.empty:
        return False
    else:
        return True",bool,True,True
Were there any passengers who paid a fare of more than $500?,Were there any passengers with a fare greater than 500?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    high_fare_passengers = dataset[dataset['Fare'] > 500]
    
    if high_fare_passengers.empty:
        return False
    else:
        return True",bool,True,True
Is every passenger's name unique?,Are there any duplicate names in the 'Name' column of the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	name_counts = dataset['Name'].value_counts()
	duplicates_exist = (name_counts > 1).any()

	return duplicates_exist",bool,False,True
Were there any female passengers in the 3rd class who survived?,Were there any female survivors in the third class?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    female_survivors = dataset[(dataset['Survived'] == True) & (dataset['Sex'] == 'female')]
    third_class_survivors = female_survivors[female_survivors['Pclass'] == 3]
    
    return not third_class_survivors.empty",bool,True,True
How many unique passenger classes are present in the dataset?,What is the count of distinct values in the 'Pclass' column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	pclass_unique_count = db['Pclass'].nunique()

	return pclass_unique_count",int64,3,3
What's the maximum age of the passengers?,What is the highest age of all the passengers?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	max_age = dataset['Age'].max()
	return max_age",float64,80.0,80.0
How many passengers boarded without any siblings or spouses?,What is the number of passengers with zero siblings or spouses aboard?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	zero_siblings = dataset[dataset['Siblings_Spouses Aboard'] == 0]
	num_passengers = zero_siblings.shape[0]

	return num_passengers",int64,604,604
"On average, how much fare did the passengers pay?",What is the average fare paid by the passengers?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	average_fare = dataset[""Fare""].mean()

	return average_fare",float64,32.30542018038331,32.31
Which passenger class has the highest number of survivors?,Which passenger class has the maximum number of survivors?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by passenger class and get the count of survivors in each class
    class_survivor_count = dataset.groupby('Pclass')['Survived'].sum()
    
    # Find the class with the maximum survivors
    max_survivors_class = class_survivor_count.idxmax()
    
    return max_survivors_class",uint8,1,1
What's the most common gender among the survivors?,What is the most frequent gender of the passengers who survived?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    survived_passengers = dataset[dataset['Survived'] == True]
    gender_counts = survived_passengers['Sex'].value_counts()
    most_frequent_gender = gender_counts.index[0]
    
    return most_frequent_gender",string,female,female
"Among those who survived, which fare range was the most common: (0-50, 50-100, 100-150, 150+)?",What is the most common fare range for the survivors?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only the survivors
    survivors = dataset[dataset['Survived'] == True]
    
    # Calculate the fare range
    fare_ranges = [0-10, 10-20, 20-30, 30-40, 40-50, 50-60, 60-70, 70-80]
    survivors['Fare_Range'] = pd.cut(survivors['Fare'], fare_ranges, right=False, labels=False)
    
    # Find the most common fare range
    most_common_range = survivors['Fare_Range'].mode().values[0]
    
    # Map the numerical range back to the original fare range
    fare_map = {i: r for i, r in enumerate(fare_ranges)}
    most_common_fare_range = fare_map[most_common_range]
    
    return str(most_common_fare_range) + '-' + str(most_common_fare_range + 10)",string,-,0-50
"What's the most common age range among passengers: (0-18, 18-30, 30-50, 50+)?",What is the most frequent age group among the passengers?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by age and count occurrences
    age_groups = dataset['Age'].astype(int).astype(str)
    age_counts = age_groups.value_counts()
    
    # Get the most frequent age group
    most_frequent_age = age_counts.idxmax()
    
    return most_frequent_age",string,-,18-30
Name the top 3 passenger classes by survival rate.,What are the top three passenger classes with the highest survival rates?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only the relevant columns
    dataset = db[['Survived', 'Pclass', 'Sex']]
    
    # Calculate survival rate for each passenger class
    survival_rate = dataset.groupby('Pclass')['Survived'].mean()
    
    # Get the top 3 classes with highest survival rates
    top_3_classes = survival_rate.nlargest(3).index.tolist()
    
    # Return the answer as a list of strings
    return [str(i) for i in top_3_classes]",string,"['1', '2', '3']","[1, 2, 3]"
"Could you list the 3 fare ranges present in the dataset with the least survivors: (0-50, 50-100, 100-150, 150+)?",What are the three fare ranges with the least number of survivors in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by fare ranges and count survivors
    fare_ranges = dataset.groupby('Fare')['Survived'].sum()
    
    # Find the three fare ranges with the least number of survivors
    least_survivors = fare_ranges.nsmallest(3)
    
    # Get the fare values as a list of strings
    fare_values = [str(value) for value in least_survivors.index.tolist()]
    
    return fare_values",string,"['4.0125', '5.0', '6.2375']","['50-100', '150+', '100-150']"
"What are the top 4 age ranges ('30-50', '18-30', '0-18', '50+') with the highest number of survivors?",Which four age ranges have the highest number of survivors?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Create a copy of the dataset
    dataset = db.copy()

    # Convert the 'Age' column to a categorical variable with 4 categories
    dataset['Age'] = pd.cut(dataset['Age'], 4, labels=[1, 2, 3, 4])

    # Group by age range and calculate the number of survivors
    age_survivors = dataset.groupby('Age')['Survived'].sum().reset_index()

    # Sort the age ranges by the number of survivors in descending order
    age_survivors.sort_values(by='Survived', ascending=False, inplace=True)

    # Get the top 4 age ranges
    top_age_ranges = age_survivors['Age'].head(4).tolist()

    # Convert the age ranges back to strings
    top_age_ranges_str = [str(age) for age in top_age_ranges]

    return top_age_ranges_str",string,"['2', '1', '3', '4']","['30-50', '18-30', '0-18', '50+']"
What are the top 2 genders by average fare paid?,What are the two genders with the highest average fare?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by gender and calculate average fare
    avg_fare_by_gender = dataset.groupby('Sex')['Fare'].mean()
    
    # Get the two genders with the highest average fare
    top_2_genders = avg_fare_by_gender.nlargest(2).index.tolist()
    
    return top_2_genders",category,"['female', 'male']","['female', 'male']"
What are the oldest 3 ages among the survivors?,What are the top 3 oldest ages of the survivors?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    survivors = dataset[dataset['Survived'] == True]
    top_3_oldest = survivors.sort_values(by='Age', ascending=False)['Age'].head(3).tolist()
    return top_3_oldest",list of float64,"[80.0, 63.0, 63.0]","[80, 63, 63]"
Which are the top 4 fares paid by survivors?,What are the four highest fares paid by the survivors?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset to include only the survivors
	survivors = db[db['Survived'] == True]
	
	# Sort the fares in descending order and get the top 4 values
	top_fares = survivors['Fare'].sort_values(ascending=False)[:4]
	
	return top_fares.tolist()",float64,"[512.3292, 512.3292, 512.3292, 263.0]","[512.329, 512.329, 512.329, 263]"
Could you list the youngest 3 ages among the survivors?,What are the three lowest values in the 'Age' column for the survivors?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    survivors = dataset[dataset['Survived'] == True]
    lowest_ages = survivors['Age'].nsmallest(3)
    return lowest_ages.tolist()",list of float64,"[1.0, 1.0, 1.0]","[1, 1, 1]"
Which are the lowest 4 fares among those who didn't survive?,What are the four lowest fares of those who did not survive?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter out the passengers who did not survive
    non_survivors = dataset[dataset['Survived'] == False]
    
    # Sort the fares of non-survivors in ascending order and get the first four values
    lowest_fares = non_survivors['Fare'].sort_values().head(4)
    
    return lowest_fares.tolist()",float64,"[0.0, 0.0, 0.0, 0.0]","[0, 0, 0, 0]"
Is the average age of the respondents above 30?,Is the mean age of the respondents greater than 30?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    mean_age = dataset[""What is your age? 👶🏻👵🏻""].mean()
    return mean_age > 30",bool,True,True
Are there more single individuals than married ones in the dataset?,Is the count of single individuals greater than the count of married individuals in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    civil_status_counts = dataset['What is your civil status? 💍'].value_counts()
    single_count = civil_status_counts.get('Single', 0)
    married_count = civil_status_counts.get('Married', 0)

    return single_count > married_count",bool,True,True
Do the majority of respondents have a height greater than 170 cm?,Are more than half of the respondents taller than 170 cm?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Extract the column name for height from the schema
	height_column = [col for col in datasetTableSchema if 'height' in col.lower()][0]
	
	# Calculate the number of respondents taller than 170 cm
	taller_than_170 = dataset[dataset[height_column] > 170].shape[0]
	
	# Calculate the total number of respondents
	total_respondents = dataset.shape[0]
	
	# Check if more than half are taller than 170 cm
	more_than_half = taller_than_170 > (total_respondents / 2)
	
	return more_than_half",bool,-,True
Is the most frequent hair color black?,Is the most common hair color among the participants 'black'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    hair_color_counts = dataset['What is your hair color? 👩🦰👱🏽 (category)'].value_counts()
    most_common_hair_color = hair_color_counts.index[0]

    return most_common_hair_color == 'black'",bool,-,False
How many unique nationalities are present in the dataset?,What is the count of distinct values in the 'What's your nationality?' column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	nationality_column = db['What\'s your nationality? (category)']
	distinct_nationalities = nationality_column.nunique()

	return distinct_nationalities",uint8,-,13
What is the average gross annual salary?,What is the mean value of the 'Gross annual salary (in euros) 💸' column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	salary_column = 'Gross annual salary (in euros) 💸'
	mean_salary = db[salary_column].mean()

	return mean_salary",float64,56332.81720430108,56332.81720430108
How many respondents wear glasses all the time?,What is the count of people who wear glasses all the time?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	glasses_all_time = dataset[dataset['How often do you wear glasses? 👓 (category)'] == 'All the time']
	count = glasses_all_time.shape[0]
	return count",uint8,-,98
What's the median age of the respondents?,What is the median value of the 'What is your age? 👶🏻👵🏻' column in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    df = db[datasetTableSchema]
    median_age = df['What is your age? 👶🏻👵🏻'].median()
    return median_age",float64,-,33.0
What is the most common level of studies achieved?,"What is the most frequent value in the ""What is the maximum level of studies you have achieved? 🎓"" column?","def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	max_studies_column = 'What is the maximum level of studies you have achieved? 🎓'
	most_frequent_value = db[max_studies_column].mode()

	return most_frequent_value.values[0]",category,Master,Master
Which body complexity has the least number of respondents?,What is the body complexity with the lowest number of respondents?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	body_complexity_counts = dataset['What is your body complexity? 🏋️'].value_counts()
	least_common_complexity = body_complexity_counts.index[0]

	return least_common_complexity",category,Average,Very thin
What's the most frequent eye color?,What is the most common eye color among the participants?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	eye_color_counts = db['What is your eye color? 👁️ (category)'].value_counts()
	most_common_eye_color = eye_color_counts.index[0]

	return most_common_eye_color",category,-,Brown
Which sexual orientation has the highest representation?,Which sexual orientation category has the highest count?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	# Extract the column name for sexual orientation
	sexual_orientation_col = [col for col in datasetTableSchema.keys() if 'sexual orientation' in col.lower()][0]

	# Count the occurrences of each category and find the maximum
	orientation_counts = db[sexual_orientation_col].value_counts()
	max_orientation = orientation_counts.idxmax()

	return max_orientation",category,-,Heterosexual
List the top 3 most common areas of knowledge.,What are the top 3 most frequent entries in the 'What area of knowledge is closer to you?' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    knowledge_area_counts = dataset['What area of knowledge is closer to you?'].value_counts()
    top_3_areas = list(knowledge_area_counts.index[:3])

    return top_3_areas",string,"[array(['Computer Science'], dtype=object), array(['Business'], dtype=object), array(['Enginering & Architecture'], dtype=object)]","['Computer Science', 'Business', 'Enginering & Architecture']"
List the bottom 3 hair lengths in terms of frequency.,What are the three least common hair lengths?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    hair_length_counts = dataset['How long is your hair? 💇🏻♀️💇🏽♂️ (category)'].value_counts()
    least_common_lengths = hair_length_counts.tail(3).index.tolist()
    return least_common_lengths",category,-,"['Medium', 'Long', 'Bald']"
Name the top 5 civil statuses represented in the dataset.,What are the top 5 civil status categories in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    civil_status_counts = dataset[""What is your civil status? 💍""].value_counts()
    top_5_civil_status = list(civil_status_counts.index[:5])

    return top_5_civil_status",category,"['Single', 'Married', 'In a Relationship', 'In a Relationship Cohabiting', 'Divorced']","['Single', 'Married', 'In a Relationship', 'In a Relationship Cohabiting', 'Divorced']"
What are the 4 least common hair colors?,What are the four hair colors with the lowest frequency in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    hair_color_counts = dataset[""What is your hair color? 👩🦰👱🏽 (category)""].value_counts()
    lowest_frequency_colors = list(hair_color_counts.index[:4])

    return lowest_frequency_colors",category,-,"['Red', 'Other', 'White', 'Blue']"
What are the top 4 maximum gross annual salaries?,What are the top 4 highest values in the 'Gross annual salary (in euros) 💸' column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    salary_column = 'Gross annual salary (in euros) 💸'
    top_4_salaries = db[salary_column].nlargest(4)
    return top_4_salaries.tolist()",float64,"[500000.0, 360000.0, 300000.0, 300000.0]","[500000.0, 360000.0, 300000.0, 300000.0]"
Name the 3 happiness values for the 3 unhappiest people in the happiness scale.,What are the happiness scale values for the three individuals with the lowest happiness ratings?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the three individuals with the lowest happiness ratings
    lowest_happiness = dataset.nsmallest(3, 'Happiness scale')
    
    # Get the happiness scale values as a list
    happiness_values = lowest_happiness['Happiness scale'].tolist()
    
    # Convert the values to a string
    happiness_str = ' '.join(map(str, happiness_values))
    
    return happiness_str",string,2 2 2,"[2, 2, 2]"
What are the 5 highest ages present in the dataset?,What are the top 5 ages in the '003_Love' dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    age_column = 'What is your age? 👶🏻👵🏻'
    top_5_ages = dataset[age_column].value_counts().head(5).index.tolist()
    return top_5_ages",uint8,"[32, 30, 28, 26, 29]","[65, 62, 60, 60, 59]"
List the bottom 6 skin tone values based on frequency.,What are the 6 least common skin tones?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	skin_tones = dataset['What is your skin tone?'].unique()
	skin_tone_counts = dataset['What is your skin tone?'].value_counts()
	least_common_skin_tones = skin_tone_counts.tail(6).index.tolist()

	return least_common_skin_tones",list,"[2, 1, 6, 0, 7, 8]","[2, 1, 6, 0, 7, 8]"
Are there any trips with a total distance greater than 30 miles?,Are there any trips with a trip distance greater than 30?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	trips_over_30 = dataset['trip_distance'] > 30
	return trips_over_30.any()",bool,False,False
Were there any trips that cost more than $100 in total?,Were there any trips with a total_amount greater than 100?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter trips with total_amount greater than 100
    high_total_trips = dataset[dataset['total_amount'] > 100]
    
    # Check if any such trips exist
    answer = not high_total_trips.empty
    
    return answer",bool,False,False
Is there any trip with more than 6 passengers?,Are there any trips with a passenger count greater than 6?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Check if there are any trips with passenger count greater than 6
	passenger_count_gt_6 = dataset['passenger_count'] > 6
	any_trips = passenger_count_gt_6.any()

	return any_trips",bool,False,False
Did all the trips use a payment type of either 1 or 2?,Were all the payment types either 1 or 2?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    payment_types = db[""payment_type""].unique()
    all_ones_or_twos = all(pt in [1, 2] for pt in payment_types)
    
    return all_ones_or_twos
",bool,False,False
What is the maximum fare amount charged for a trip?,What is the highest fare_amount in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	max_fare = db['fare_amount'].max()
	return max_fare",float64,75.25,75.25
How many unique pickup locations are in the dataset?,What is the count of distinct PULocationIDs in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	distinct_PULocationIDs = db['PULocationID'].nunique()
	return distinct_PULocationIDs",int64,96,96
What is the average tip amount given by passengers?,What is the mean tip amount?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	mean_tip_amount = db['tip_amount'].mean()
	return mean_tip_amount",float64,2.7366808000000002,2.74
How many trips took place in the airport area?,How many records are there in the dataset where the 'airport_fee' column is not null?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    non_null_airport_fee = dataset[dataset['airport_fee'].notnull()]
    count = len(non_null_airport_fee)
    
    return count",int64,0,99807
Which payment type is the most common in the dataset?,What is the most frequent payment type in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	payment_type_counts = db['payment_type'].value_counts()
	most_frequent_payment = payment_type_counts.index[0]

	return most_frequent_payment",string,1,1
Which vendor has the most trips recorded?,Which unique VendorID has the highest count of trips?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	vendor_trip_counts = db['VendorID'].value_counts()
	max_trip_vendor = vendor_trip_counts.idxmax()

	return max_trip_vendor",uint8,2,2
What is the most common drop-off location?,What is the most frequent drop-off location ID?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	drop_off_location_counts = dataset['DOLocationID'].value_counts()
	most_frequent_drop_off_id = drop_off_location_counts.index[0]

	return most_frequent_drop_off_id",string,236,236
On which date did the first recorded trip occur?,What is the earliest pickup datetime in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	earliest_pickup = dataset['tpep_pickup_datetime'].min()
	return earliest_pickup","datetime64[us, UTC]",2023-01-31 23:50:15+00:00,2023-01-31
Which are the top 2 most frequent pickup locations?,What are the two most common pickup locations?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	pickup_counts = dataset['PULocationID'].value_counts()
	top_two_locations = pickup_counts.index[:2].tolist()

	return top_two_locations",string,"[161, 237]","[161, 237]"
Name the 4 most common rate codes used.,What are the top four rate codes used?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    rate_code_counts = dataset['RatecodeID'].value_counts()
    top_4_rate_codes = list(rate_code_counts.index[:4])
    
    return top_4_rate_codes",string,"[1, 2, 5, 4]","[1, 2, 5, 4]"
list the 2 most frequent store and forward flags.,What are the two most common values in the 'store_and_fwd_flag' column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the relevant column
    store_and_fwd_flags = db['store_and_fwd_flag']
    
    # Get the two most common values
    most_common_values = store_and_fwd_flags.value_counts().head(2).index.tolist()
    
    return most_common_values",category,"['N', 'Y']","['N', 'Y']"
Identify the top 4 payment types used by frequency,What are the top 4 payment types used by frequency?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    payment_type_frequency = dataset['payment_type'].value_counts()
    top_4_payment_types = list(payment_type_frequency.head(4).index)

    return top_4_payment_types",object,"[1, 2, 4, 3]","[1, 2, 4, 3]"
Report the 4 highest toll amounts paid.,What are the top 4 toll amounts paid?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	top_tolls = db['tolls_amount'].nlargest(4)
	return top_tolls.tolist()",uint8,"[0, 0, 0, 0]","[0, 0, 0, 0]"
list the top 3 longest trip distances,What are the top 3 trip distances?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	top_trips = db['trip_distance'].nlargest(3)
	return top_trips.tolist()",list,"[19.83, 19.74, 19.68]","[19.83, 19.74, 19.68]"
Identify the 5 largest total amounts paid for trips.,What are the top 5 total amounts paid for trips?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	top_5_trips = dataset.nlargest(5, 'total_amount')
	top_5_amounts = top_5_trips['total_amount'].tolist()

	return top_5_amounts",float64,"[80.0, 80.0, 80.0, 80.0, 79.55]","[80.0, 80.0, 80.0, 80.0, 80.0]"
Report the 6 highest fare amounts charged.,What are the 6 highest fare amounts?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	top_6_fares = dataset['fare_amount'].nlargest(6)
	return top_6_fares.tolist()",float64,"[75.25, 74.4, 73.0, 73.0, 73.0, 73.0]","[75.25, 74.4, 73.0, 73.0, 73.0, 73.0]"
Are there any complaints made in Brooklyn?,Were there any complaints in the borough of Brooklyn?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	brooklyn_complaints = dataset[dataset['borough'] == 'Brooklyn']
	answer = not brooklyn_complaints.empty

	return answer",bool,False,True
Do any complaints have 'Dog' as a descriptor?,Are there any complaints with the descriptor 'Dog'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	dog_complaints = dataset[dataset['descriptor'] == 'Dog']
	return not dog_complaints.empty",bool,True,True
Were there any complaints raised in April?,Were there any complaints raised in the month of April?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for April complaints
    april_complaints = dataset[dataset['month_name'] == 'April']
    
    # Check if there are any complaints in April
    answer = not april_complaints.empty
    
    return answer",bool,True,True
Is the Mayor's office of special enforcement one of the agencies handling complaints?,Is the agency named 'Mayor's office of special enforcement' handling any complaints?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	agency_name = 'Mayor\'s office of special enforcement'
	agency_handling_complaints = dataset['agency_name'] == agency_name

	return agency_handling_complaints.any()",bool,False,True
How many complaints have been made in Queens?,What is the total number of complaints in the borough of Queens?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset for the borough of Queens
	queens_complaints = db[db['borough'] == 'QUEENS']
	# Count the number of complaints
	total_complaints = len(queens_complaints)

	return total_complaints",int64,23110,23110
What's the total number of unique agencies handling complaints?,How many distinct agencies are there in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	agency_count = dataset['agency'].nunique()
	return agency_count",int64,22,22
How many complaints were raised at midnight?,How many rows in the dataset have a created_date of midnight?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	midnight_rows = dataset[dataset['created_date'].dt.hour == 0]
	count = len(midnight_rows)

	return count",int64,14811,14811
How many unique descriptors are present in the dataset?,What is the count of unique values in the 'descriptor' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	unique_descriptors = dataset['descriptor'].nunique()
	return unique_descriptors",int64,1131,1131
Which borough has the most complaints?,Which borough has the highest number of complaints?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	complaint_count = dataset['borough'].value_counts()
	highest_complaint_borough = complaint_count.idxmax()

	return highest_complaint_borough",category,BROOKLYN,BROOKLYN
Which month sees the highest number of complaints?,What is the month with the highest number of complaints?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by month and count the number of complaints
    monthly_complaints = dataset['month_name'].value_counts()
    
    # Get the month with the highest number of complaints
    max_complaints_month = monthly_complaints.idxmax()
    
    return max_complaints_month",category,July,July
Which weekday has the least complaints?,Which weekday has the lowest number of complaints?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Group by weekday and count the number of complaints
	weekday_counts = dataset['weekday_name'].value_counts()

	# Get the weekday with the lowest count
	min_weekday = weekday_counts.idxmin()

	return min_weekday",category,Sunday,Sunday
Which agency is least frequently handling complaints?,Which agency has the lowest number of complaints?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	agency_complaints = dataset['agency'].value_counts()
	agency_with_least_complaints = agency_complaints.idxmin()

	return agency_with_least_complaints",category,ACS,ACS
List the top 5 most frequent complaint types.,What are the top 5 most common complaint types?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	complaint_type_counts = dataset['complaint_type'].value_counts()
	top_5_complaints = list(complaint_type_counts.index[:5])

	return top_5_complaints",category,"['Noise - Residential', 'HEAT/HOT WATER', 'Illegal Parking', 'Blocked Driveway', 'Street Condition']","['Noise - Residential', 'HEAT/HOT WATER', 'Illegal Parking', 'Blocked Driveway', 'Street Condition']"
Which 4 agencies handle the most complaints?,What are the names of the top 4 agencies with the highest number of complaints?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	agency_counts = db['agency'].value_counts()
	top_4_agencies = list(agency_counts.index[:4])

	return top_4_agencies",category,"['NYPD', 'HPD', 'DOT', 'DSNY']","['NYPD', 'HPD', 'DOT', 'DSNY']"
Name the 2 least frequent descriptors for complaints by inverse alphabetical order.,"What are the two least common descriptors for complaints, listed in reverse alphabetical order?","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	descriptor_counts = dataset['descriptor'].value_counts()
	least_common_descriptors = descriptor_counts.index[-2:].tolist()
	least_common_descriptors.sort(reverse=True)

	return least_common_descriptors",category,"['Ready NY - Businesses', 'Graffiti/Litter on Phone']","['Booting Company', 'Ready NY - Businesses', 'Animal']"
Mention the 2 most common weekdays for complaints.,What are the two most common weekday names for complaints?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	weekday_counts = dataset['weekday_name'].value_counts()
	top_two_weekdays = list(weekday_counts.index[:2])

	return top_two_weekdays",category,"['Tuesday', 'Monday']","['Tuesday', 'Monday']"
What are the top 4 hours with the most complaints?,Which four hours have the highest number of complaints?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Group by hour and count the number of complaints
	hour_counts = dataset['hour'].value_counts()
	
	# Get the top 4 hours
	top_hours = hour_counts.head(4).index.tolist()
	
	return top_hours",category,"[0, 12, 10, 11]","[0, 12, 10, 11]"
State the 3 lowest unique complaint keys.,What are the three lowest unique complaint keys?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset to get the 'unique_key' column
	unique_keys = db['unique_key']

	# Sort the unique keys in ascending order and get the first 3 values
	lowest_keys = unique_keys.sort_values().head(3)

	# Convert the values to a list of strings
	lowest_keys_list = lowest_keys.astype(str).tolist()

	return lowest_keys_list",category,"['15628852', '15634748', '15634996']","[15628852, 15634748, 15634996]"
Which 2 hours see the least complaints?,What are the two hours with the lowest number of complaints?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	complaint_counts = dataset['hour'].value_counts()
	lowest_hours = complaint_counts.index[:2]

	return [str(hour) for hour in lowest_hours]",category,"['0', '12']","[6, 2]"
List the 6 highest complaint numbers from the dataset.,What are the top 6 complaint types from the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    complaint_types = dataset['complaint_type'].value_counts()[:6].index.tolist()
    return [str(i) for i in complaint_types]",list of strings,"['Noise - Residential', 'HEAT/HOT WATER', 'Illegal Parking', 'Blocked Driveway', 'Street Condition', 'Street Light Condition']","[54954250, 54954040, 54952675, 54950924, 54950765, 54950581]"
Are all properties in the dataset located in the same neighbourhood?,Are all the neighbourhoods in the dataset the same?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	neighbourhoods = dataset['neighbourhood_cleansed'].unique()
	return len(neighbourhoods) == 1",bool,False,False
Do all hosts verify their identity?,Are all hosts verified?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Check if all hosts are verified
	all_hosts_verified = dataset[""host_identity_verified""].eq(""t"").all()

	return all_hosts_verified",bool,False,False
Are all reviews_per_month values greater than 5?,Is the minimum value of the column 'reviews_per_month' greater than 5?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	min_reviews_per_month = dataset['reviews_per_month'].min()
	return min_reviews_per_month > 5",bool,False,False
Are there any listings without a specified room type?,Are there any listings in the dataset where the room_type field is empty?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Check if there are any null values in the 'room_type' column
	is_empty_room_type = dataset['room_type'].isnull().any()

	return is_empty_room_type",bool,False,False
How many unique neighbourhoods are there in the dataset?,What is the count of distinct neighbourhoods in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	distinct_neighbourhoods = db['neighbourhood_cleansed'].nunique()

	return distinct_neighbourhoods",uint16,33,563
How many listings don't have a valid price?,What is the count of listings with an invalid price?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	invalid_price_listings = dataset[dataset['price'].isnull()]
	count = len(invalid_price_listings)

	return count",uint16,75241,0
How many properties have received the worst possible (0-5) review score for communication?,What is the count of properties with a review score of 0 for communication?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	zero_communication_score = dataset[dataset['review_scores_communication'] == 0]
	count_zero_communication = zero_communication_score.shape[0]

	return count_zero_communication",uint16,6,6
What is the maximum number of bedrooms a property has in this dataset?,What is the maximum value of the 'bedrooms' column in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	max_bedrooms = dataset['bedrooms'].max()
	return max_bedrooms",float64,22.0,22.0
Which neighbourhood has the most listings?,What is the neighbourhood with the highest number of listings?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Group by neighbourhood and count the number of listings
	neighbourhood_listings = dataset.groupby('neighbourhood_cleansed')['host_id'].nunique()

	# Find the neighbourhood with the highest number of listings
	max_listings_neighbourhood = neighbourhood_listings.idxmax()

	return max_listings_neighbourhood",category,Hackney,Westminster
What is the most common room type in the listings?,What is the most frequent room type across all listings?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	room_type_counts = dataset['room_type'].value_counts()
	most_common_room_type = room_type_counts.index[0]

	return most_common_room_type",category,Entire home/apt,Entire home/apt
What property type has the most listings?,Which property type has the highest number of listings?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	property_type_counts = dataset['property_type'].value_counts()
	highest_count_type = property_type_counts.idxmax()

	return highest_count_type",category,Entire rental unit,Entire rental unit
Which host verification method is the least used?,-,-,-,-,airbnb.com
List the top 3 neighbourhoods with the most listings.,What are the top 3 neighbourhoods with the highest number of listings?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Group by neighbourhood and count the number of listings
	neighbourhood_counts = dataset['neighbourhood_cleansed'].value_counts()
	
	# Get the top 3 neighbourhoods
	top_3_neighbourhoods = neighbourhood_counts.index[:3].tolist()
	
	return top_3_neighbourhoods",category,"['Westminster', 'Tower Hamlets', 'Hackney']","['Westminster', 'Tower Hamlets', 'Hackney']"
Which are the top 4 most common property types?,What are the top 4 property types?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	property_types = dataset['property_type'].value_counts()[:4].index.tolist()
	return property_types",category,"['Entire rental unit', 'Private room in rental unit', 'Private room in home', 'Entire condo']","['Entire rental unit', 'Private room in rental unit', 'Private room in home', 'Entire condo']"
List the 2 most common host verification methods.,-,-,-,-,"['phone', 'email']"
Which are the 2 most preferred room types?,What are the top two room types by preference?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	# Extract the column name for room type
	room_type_col = [col for col in datasetTableSchema if 'room_type' in col][0]

	# Group by room type and count the occurrences
	room_type_counts = db[room_type_col].value_counts()

	# Get the top two room types
	top_two_room_types = list(room_type_counts.index[:2])

	return top_two_room_types",category,-,"['Entire home/apt', 'Private room']"
What are the top 3 highest review scores for location?,What are the top 3 highest values for review_scores_location?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	top_scores = dataset['review_scores_location'].nlargest(3)
	return top_scores.tolist()",float64,"[5.0, 5.0, 5.0]","[5.0, 5.0, 5.0]"
What are the 4 most common number of bedrooms in properties?,What are the top 4 categories of bedrooms in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    bedroom_categories = dataset['bedrooms'].astype(str).value_counts().index.tolist()[:4]
    return bedroom_categories",category,"['1.0', '2.0', '3.0', 'nan']","[1.0, 2.0, 3.0, 4.0]"
What are the 5 highest counts of listings by a single host for entire homes?,What are the top 5 counts of listings by hosts for entire homes?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset to only include entire homes
	entire_homes = dataset[dataset['property_type'] == 'Entire home/apt']

	# Group by host and count the listings
	host_listings_count = entire_homes.groupby('host_id')['host_id'].count()

	# Get the top 5 counts
	top_5_counts = host_listings_count.nlargest(5)

	return top_5_counts.tolist()",uint16,"[6, 2, 1, 1, 1]","[288, 288, 288, 288, 288]"
List the 6 lowest review scores for communication.,What are the 6 lowest values for the review scores for communication?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset to get the 'review_scores_communication' column
	review_scores_communication = dataset['review_scores_communication']

	# Sort the values in ascending order and get the 6 lowest values
	lowest_scores = review_scores_communication.nsmallest(6)

	return lowest_scores.tolist()",float64,"[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"
Are there players who have a greater overall score than their potential score?,Are there players whose overall score is higher than their potential score?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset to get players with overall score higher than potential score
	filtered_players = dataset[dataset['Overall'] > dataset['Potential']]

	# Check if there are any players in the filtered dataset
	if filtered_players.empty:
		return False
	else:
		return True",bool,-,False
Are there any players who joined their current club before they were 18 years old?,Are there any players whose 'Age' is less than 18 and 'Joined' their current club before turning 18?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Filter players who joined before turning 18
	under_18_players = dataset[dataset['Age'] < 18]
	under_18_players_joined_early = under_18_players[under_18_players['Joined'] < '2006-01-01']  # Assuming 'Joined' is in 'YYYY-MM-DD' format

	# Check if there are any such players
	answer = not under_18_players_joined_early.empty

	return answer",bool,-,True
Are there any players whose preferred foot is left and are from a nationality that starts with 'B'?,Are there any players with a preferred foot of 'Left' and a nationality starting with the letter 'B'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Filter players with preferred foot as 'Left'
	left_footed_players = dataset[dataset['Preferred Foot<gx:category>'] == 'Left']
	# Filter players with nationality starting with 'B'
	nationality_starting_with_B = left_footed_players[left_footed_players['Nationality<gx:category>'].str.startswith('B')]

	# Check if there are any players in the filtered dataset
	answer = not nationality_starting_with_B.empty

	return answer",bool,True,True
Are there any players who are taller than 6 feet and have an agility score above 90?,Are there any players with a height greater than 6 feet and an agility score greater than 90?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Convert height from feet to meters
	dataset['Height_m'] = dataset['Height_ft'] * 0.3048

	# Filter players with height greater than 6 feet and agility greater than 90
	filtered_players = dataset[(dataset['Height_m'] > 6 * 0.3048) & (dataset['Agility'] > 90)]

	# Check if any players satisfy the condition
	is_player_found = not filtered_players.empty

	return is_player_found",bool,-,False
What is the average overall score of players from France?,What is the mean value of the 'Overall' column for players with the 'Nationality' value of 'France'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset for players with 'France' as Nationality
	france_players = dataset[dataset['Nationality<gx:category>'] == 'France']
	# Calculate the mean of the 'Overall' column for these players
	mean_overall = france_players['Overall<gx:number>'].mean()
	return mean_overall",float64,67.86143187066975,67.861432
How many unique clubs are there in the dataset?,What is the count of distinct clubs in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	df = db
	distinct_clubs = df['Club<gx:category>'].nunique()

	return distinct_clubs",uint32,683,683
What is the highest value (in €) of a player in the dataset?,What is the maximum value in the 'Value_€' column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	max_value = db['Value_€'].max()
	return max_value",uint32,-,105500000
How many players have the position 'ST'?,What is the count of players with the position 'ST'?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset to get players with position 'ST'
	st_players = db[db['Position'] == 'ST']

	# Count the number of players
	count = st_players.shape[0]

	return count",uint32,-,414
What is the most common nationality in the dataset?,What nationality appears the most in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	nationality_counts = dataset['Nationality<gx:category>'].value_counts()
	most_common_nationality = nationality_counts.index[0]

	return most_common_nationality",category,England,England
What is the most common preferred foot amongst players?,Which preferred foot is the most frequent in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset to get the 'Preferred Foot' column
	preferred_foot_data = db[['Preferred Foot']]

	# Remove any rows with missing values
	preferred_foot_data = preferred_foot_data.dropna()

	# Get the most frequent preferred foot
	most_frequent_foot = preferred_foot_data['Preferred Foot'].mode()[0]

	return most_frequent_foot",category,-,Right
Which club has the most players in the dataset?,Which club has the highest count of players?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	club_counts = dataset['Club<gx:category>'].value_counts()
	most_common_club = club_counts.index[0]

	return most_common_club",category,Tottenham Hotspur,Crystal Palace
What is the most common position of players in the dataset?,What is the most frequent value in the 'General Position' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	general_position_counts = dataset['General Postion'].value_counts()
	most_frequent_position = general_position_counts.index[0]

	return most_frequent_position",category,-,SUB
Which are the top 5 nationalities in terms of the average overall score of their players?,What are the top 5 nationalities with the highest average overall score?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset to get relevant columns
	dataset = db[['Nationality<gx:category>', 'Overall<gx:number>']]

	# Group by Nationality and calculate the mean Overall score
	nationality_avg_overall = dataset.groupby('Nationality<gx:category>').mean()

	# Sort the values in descending order and get the top 5
	top_5_nationalities = nationality_avg_overall.sort_values(by='Overall<gx:number>', ascending=False)[:5].index.tolist()

	return top_5_nationalities",category,"['Tanzania', 'Syria', 'Mozambique', 'Chad', 'Central African Republic']","['Tanzania', 'Syria', 'Mozambique', 'Chad', 'Central African Rep.']"
Which are the top 3 clubs in terms of the total value (in €) of their players?,Which are the top 3 clubs with the highest total player value in €?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset to get the relevant columns
	relevant_data = db[['Club<gx:category>', 'Value_€<gx:currency>']]

	# Group by club and sum the values
	club_values = relevant_data.groupby('Club<gx:category>').sum().reset_index()

	# Sort the values in descending order and get the top 3 clubs
	top_3_clubs = club_values.nlargest(3, 'Value_€<gx:currency>').sort_values('Value_€<gx:currency>', ascending=False)['Club<gx:category>'].tolist()

	return top_3_clubs",category,"['Liverpool', 'Manchester City', 'Real Madrid']","['Liverpool', 'Manchester City', 'Real Madrid']"
Which are the bottom 4 nationalities in terms of the average agility of their players?,"What are the nationalities of the players with the lowest average agility scores, in ascending order?","def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset to get the required columns
	required_columns = ['Nationality<gx:category>', 'Agility<gx:number>']
	dataset = db[required_columns]

	# Calculate the average agility score for each nationality
	avg_agility_scores = dataset.groupby('Nationality<gx:category>').mean()

	# Sort the nationalities in ascending order of average agility scores
	nationalities = avg_agility_scores.sort_values('Agility<gx:number>', ascending=True).index.tolist()

	return nationalities",category,"['Macau', 'Andorra', 'Moldova', 'Liechtenstein', 'Central African Republic', 'Latvia', 'United Arab Emirates', 'Mauritania', 'Estonia', 'Lithuania', 'Uzbekistan', 'Iceland', 'Luxembourg', 'Serbia', 'Croatia', 'South Sudan', 'Bulgaria', 'Bolivia', 'Venezuela', 'Benin', 'Korea DPR', 'Montenegro', 'El Salvador', 'Congo', 'Kenya', 'Russia', 'Hungary', 'Slovakia', 'Saint Kitts and Nevis', 'Canada', 'Cuba', 'Panama', 'Montserrat', 'Niger', 'New Caledonia', 'Saint Lucia', 'Bosnia Herzegovina', 'Ukraine', 'Paraguay', 'New Zealand', 'Albania', 'Netherlands', 'India', 'Finland', 'Slovenia', 'Italy', 'Turkey', 'South Africa', 'Iran', 'Poland', 'Puerto Rico', 'Germany', 'China PR', 'Denmark', 'United States', 'Peru', 'Senegal', 'Republic of Ireland', 'Czech Republic', 'France', 'North Macedonia', 'Austria', 'Guyana', 'Cameroon', 'Switzerland', 'England', 'Greece', 'Belize', 'Norway', 'Sweden', 'Haiti', 'Mexico', 'Cyprus', 'Spain', 'Wales', 'Uruguay', 'Gabon', 'Indonesia', 'Nicaragua', 'Korea Republic', 'Grenada', 'Australia', 'Burundi', 'Northern Ireland', 'Scotland', 'Georgia', 'Equatorial Guinea', 'Chad', 'Belgium', 'Madagascar', 'Gambia', 'Ecuador', 'Saudi Arabia', 'Argentina', 'Hong Kong', 'Togo', 'Egypt', 'Japan', 'Brazil', 'Costa Rica', 'Philippines', 'Uganda', 'Thailand', 'Romania', 'Eritrea', 'Kosovo', 'Chile', 'Portugal', 'Trinidad & Tobago', 'Curacao', 'Azerbaijan', 'Mali', 'Antigua & Barbuda', 'Dominican Republic', 'Tunisia', 'Guinea', 'DR Congo', 'Ivory Coast', 'Liberia', 'Namibia', 'São Tomé & Príncipe', 'Jamaica', 'Zimbabwe', 'Colombia', 'Palestine', 'Lebanon', 'Israel', 'Cape Verde', 'Morocco', 'Mozambique', 'Algeria', 'Honduras', 'Jordan', 'Nigeria', 'Belarus', 'Burkina Faso', 'Armenia', 'Chinese Taipei', 'Syria', 'Guam', 'Comoros', 'Faroe Islands', 'Kazakhstan', 'Angola', 'Rwanda', 'Ghana', 'Zambia', 'Sierra Leone', 'Libya', 'Iraq', 'Tanzania', 'Malawi', 'Papua New Guinea', 'Guinea Bissau', 'Sudan', 'Bermuda', 'Malaysia', 'Malta', 'Afghanistan', 'Aruba']","['Macau', 'Andorra', 'Moldova', 'Liechtenstein']"
Which are the top 6 clubs in terms of the average potential score of their players?,What are the top 6 clubs with the highest average potential score?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Group by club and calculate the average potential
	club_potential = dataset.groupby('Club')['Potential'].mean()

	# Sort the values in descending order and get the top 6 clubs
	top_6_clubs = club_potential.sort_values(ascending=False)[:6].index.tolist()

	return top_6_clubs",category,-,"['FC Bayern München', 'Real Madrid', 'FC Barcelona', 'Paris Saint-Germain', 'Juventus', 'Manchester City']"
What are the top 3 overall scores in the dataset?,What are the top 3 values in the 'Overall' column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	overall_values = db['Overall']
	top_3_values = list(overall_values.nlargest(3))

	return top_3_values",uint8,-,"[93, 92, 91]"
What are the bottom 5 potential scores in the dataset?,What are the lowest 5 values in the 'Potential' column of the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    potential_values = db['Potential'].unique()
    lowest_5_values = sorted(potential_values)[:5]
    return lowest_5_values",uint8,-,"[48, 48, 49, 50, 50]"
What are the top 4 values (in €) of players in the dataset?,What are the top 4 values of players in the dataset in terms of their Value_€?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset to get the top 4 values based on 'Value_€'
	top_players = db.nlargest(4, 'Value_€')
	# Get the list of values
	top_values = top_players['Value_€'].tolist()

	return top_values",list,-,"[105500000, 90000000, 87000000, 80000000]"
What are the top 2 wages (in €) of players in the dataset?,What are the top 2 values in the 'Wage_€' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	top_2_wages = dataset['Wage_€'].nlargest(2)
	return top_2_wages.tolist()",uint32,-,"[560000, 370000]"
There are no tornadoes that resulted in more than 500 injuries.,Are there any tornadoes with more than 500 injuries?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	tornadoes_with_injuries = dataset[dataset['inj'] > 500]
	answer = len(tornadoes_with_injuries) > 0

	return answer",bool,True,True
All tornadoes in the dataset occurred in the 21st century.,Did all tornadoes occur in the 21st century?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the 'date' column
    date_column = dataset['date']
    
    # Check if all dates are in the 21st century
    is_21st_century = date_column.dt.year >= 2000
    
    return is_21st_century.all()",bool,False,False
No tornado has a length greater than 100 miles.,Is the maximum length of a tornado less than or equal to 100 miles?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	max_length = dataset['len'].max()
	return max_length <= 100",bool,False,True
There are no tornadoes that resulted in more than 100 fatalities.,Are there any tornadoes with more than 100 fatalities?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	tornadoes_over_100_fatalities = dataset[dataset['fat'] > 100]
	answer = len(tornadoes_over_100_fatalities) > 0

	return answer",bool,True,True
How many unique states are represented in the dataset?,What is the count of distinct values in the 'st' column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	distinct_st_values = db['st'].nunique()
	return distinct_st_values",int64,53,53
What is the highest magnitude of tornado recorded in the dataset?,What is the maximum value of the 'mag' column in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    max_mag = db['mag'].max()
    return max_mag",int8,5,5
What is the longest length of a tornado path in the dataset?,What is the maximum length of a tornado path in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	max_length = dataset['len'].max()
	return max_length",float64,234.7,234.7
What is the maximum number of injuries caused by a single tornado?,What is the maximum value of the 'inj' column in the '008_Tornados' dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	max_inj = db['inj'].max()
	return max_inj",uint16,1740,1740
Which state has experienced the most tornadoes?,What is the state with the highest number of tornadoes?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by state and count the number of tornadoes
    state_tornado_count = dataset['st'].value_counts()
    
    # Get the state with the highest count
    max_tornado_state = state_tornado_count.idxmax()
    
    return max_tornado_state",string,TX,TX
In which month do most tornadoes occur?,What is the month with the highest number of tornadoes?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the month column
    month_data = db['mo']
    
    # Get the month with the highest count of tornadoes
    max_tornado_month = month_data.mode().values[0]
    
    return str(max_tornado_month)",string,5,5
On what date did the most destructive tornado (by injuries) occur?,What is the date of the tornado with the highest number of injuries?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    max_inj_tornado = db.loc[db['inj'] == db['inj'].max()]
    date = max_inj_tornado['date'].values[0]
    
    return date","datetime64[us, UTC]",1979-04-10T00:00:00.000000,1979-04-10 00:00:00
On what date did the longest tornado (by path length) occur?,What is the date of the tornado with the longest path length?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the tornado with the longest path length
    longest_tornado = db[db['len'] == db['len'].max()]
    
    # Get the date of the longest tornado
    date_of_longest_tornado = longest_tornado['date'].values[0]
    
    return date_of_longest_tornado","datetime64[us, UTC]",1953-03-22T00:00:00.000000,1953-03-22 00:00:00
Which are the top 5 states with the highest average tornado magnitude?,What are the top 5 states with the highest average tornado magnitude?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the required columns
    df = db[['st', 'mag']]
    
    # Group by state and calculate the average magnitude
    avg_mag_by_state = df.groupby('st')['mag'].mean()
    
    # Sort the values in descending order and get the top 5 states
    top_5_states = avg_mag_by_state.sort_values(ascending=False)[:5]
    
    # Convert the index to a list of strings
    top_5_states_list = top_5_states.index.tolist()
    
    return top_5_states_list",string,"['AR', 'KY', 'VT', 'TN', 'MS']","[AR, KY, VT, TN, MS]"
Which are the top 2 states with the most tornado-related injuries? If in a tie then select alphabetically. ,"What are the names of the top 2 states with the highest number of tornado-related injuries, ordered by the number of injuries and then alphabetically?","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by state and sum the injuries
    state_injuries = dataset.groupby('st')['inj'].sum().reset_index()
    
    # Sort by injuries in descending order and then by state name
    sorted_states = state_injuries.sort_values(by=['inj', 'st'], ascending=[False, True])
    
    # Get the top 2 states
    top_2_states = sorted_states.head(2)['st'].tolist()
    
    return top_2_states",string,"['TX', 'AL']","[TX, AL]"
Which are the top 4 states with the most tornado-related fatalities? If you find a tie select alphabetically.,What are the top 4 states with the highest number of tornado-related fatalities?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the relevant columns
    dataset = db[['st', 'fat']]
    
    # Group by state and sum the fatalities
    state_fatalities = dataset.groupby('st')['fat'].sum().reset_index()
    
    # Sort the values in descending order and get the top 4 states
    top_states = state_fatalities.sort_values('fat', ascending=False)['st'].head(4).tolist()
    
    # Return the list of top states
    return top_states",string,"['AL', 'TX', 'MS', 'OK']","[AL, TX, MS, OK]"
Which are the bottom 2 states in terms of the average tornado path length?,What are the names of the two states with the lowest average tornado path length?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by state and calculate the average path length
    avg_length_by_state = dataset.groupby('st')['len'].mean()
    
    # Find the two states with the lowest average path length
    two_lowest_states = avg_length_by_state.nsmallest(2).index.tolist()
    
    return two_lowest_states",string,"['AK', 'VI']","[AK, VI]"
What are the top 3 number of injuries caused by tornadoes in the dataset?,What are the top 3 values in the 'inj' column of the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    top_3_injuries = db['inj'].nlargest(3).tolist()
    return top_3_injuries",list,"[1740, 1500, 1228]","[1740, 1500, 1228]"
What are the top 5 magnitudes of tornadoes in the dataset?,List the top 5 magnitudes of tornadoes in the dataset.,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	top_5_magnitudes = dataset['mag'].nlargest(5)
	return top_5_magnitudes.tolist()",list,"[5, 5, 5, 5, 5]","[5, 5, 5, 5, 5]"
What are the top 4 path lengths of tornadoes in the dataset?,List the top 4 tornado path lengths.,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	tornado_lengths = db['len'].nlargest(4)
	return tornado_lengths.tolist()",list,"[234.7, 217.8, 202.5, 202.1]","[234.7, 217.8, 202.5, 202.1]"
What are the top 6 number of fatalities caused by tornadoes in the dataset?,What are the top 6 values in the 'fat' column of the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	top_6_fats = dataset['fat'].nlargest(6)
	return top_6_fats.tolist()",uint8,"[158, 116, 114, 94, 80, 72]","[158, 116, 114, 94, 80, 72]"
There were no days when the precipitation was greater than 5 inches.,Was there any day with precipitation greater than 5 inches?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Convert the 'DATE' column to a datetime object
    db['DATE'] = pd.to_datetime(db['DATE'])
    
    # Filter the data for days with precipitation greater than 5 inches
    heavy_rain_days = db[db['PRCP'] > 5]
    
    # Check if any such days exist
    answer = not heavy_rain_days.empty
    
    return answer",bool,True,False
All recorded temperatures are above freezing point.,Are all the TMIN values greater than 0?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get TMIN values
    tmin_values = dataset['TMIN']

    # Check if all values are greater than 0
    all_greater_than_zero = (tmin_values > 0).all()

    return all_greater_than_zero",bool,False,False
There were no days when the snow depth was more than 10 inches.,Were there any days with snow depth greater than 10 inches?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    snow_depth_gt_10 = db['SNWD'] > 10
    return snow_depth_gt_10.any()",bool,True,False
There were no days when the maximum temperature was below freezing point.,Were there any days with a TMAX value below 0?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter rows where TMAX is below 0
    below_zero_rows = db[db['TMAX'] < 0]
    
    # Check if any rows exist
    answer = True if len(below_zero_rows) > 0 else False
    
    return answer",bool,False,False
What is the highest recorded precipitation in inches?,What is the maximum value of PRCP in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	max_prcp = db['PRCP'].max()
	return max_prcp",float64,8.28,8.28
What is the lowest minimum temperature recorded?,What is the lowest value in the TMIN column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	# Assuming 'db' is a pandas dataframe
	min_tmin = db['TMIN'].min()
	return min_tmin",float64,-15.0,-15.0
What is the highest maximum temperature recorded?,What is the highest value in the TMAX column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the TMAX column
    tmax_values = db['TMAX']

    # Return the highest value in the TMAX column
    return tmax_values.max()",float64,106.0,106.0
What is the deepest recorded snow depth in inches?,What is the maximum value of the column 'SNWD' in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    max_snwd = db['SNWD'].max()
    return max_snwd",float64,26.0,26.0
On which date was the highest precipitation recorded?,What is the date with the highest precipitation?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Convert the 'DATE' column to datetime format
    db['DATE'] = pd.to_datetime(db['DATE'])
    
    # Find the date with the highest precipitation
    max_prcp_date = db.loc[db['PRCP'] == db['PRCP'].max(), 'DATE'].values[0]
    
    return max_prcp_date",datetime64[us],1882-09-23T00:00:00.000000,1882-09-23
On which date was the lowest minimum temperature recorded?,What is the date of the lowest recorded TMIN value?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    min_tmin_date = db.loc[db['TMIN'] == db['TMIN'].min(), 'DATE'].values[0]
    return min_tmin_date",datetime64[us],1934-02-09T00:00:00.000000,1934-02-09
On which date was the highest maximum temperature recorded?,What is the date with the highest maximum temperature?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Convert the 'DATE' column to datetime format
    db['DATE'] = pd.to_datetime(db['DATE'])
    
    # Find the date with the highest maximum temperature
    max_temp_date = db.loc[db['TMAX'] == db['TMAX'].max(), 'DATE'].values[0]
    
    return max_temp_date",datetime64[us],1936-07-09T00:00:00.000000,1936-07-09
On which date was the deepest snow depth recorded?,What is the date with the highest snow depth?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Convert the 'DATE' column to datetime format
    db['DATE'] = pd.to_datetime(db['DATE'])
    
    # Find the date with the highest snow depth
    max_snow_date = db.loc[db['SNWD'] == db['SNWD'].max(), 'DATE'].values[0]
    
    return max_snow_date",datetime64[us],1947-12-27T00:00:00.000000,1947-12-27
What are the dates of the top 5 highest recorded precipitation events?,What are the dates of the top 5 rows with the highest PRCP values?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the top 5 rows with the highest PRCP values
    top_5_prcp = db.nlargest(5, 'PRCP')
    
    # Extract the dates from the top 5 rows
    dates = top_5_prcp['DATE'].tolist()
    
    return dates",datetime64[us],"[Timestamp('1882-09-23 00:00:00+0000', tz='UTC'), Timestamp('2007-04-15 00:00:00+0000', tz='UTC'), Timestamp('1977-11-08 00:00:00+0000', tz='UTC'), Timestamp('1903-10-09 00:00:00+0000', tz='UTC'), Timestamp('2021-09-01 00:00:00+0000', tz='UTC')]","[1882-09-23, 2007-04-15, 1977-11-08, 1903-10-09, 2021-09-01]"
What are the dates of the top 3 lowest minimum temperatures recorded?,What are the dates of the 3 lowest recorded minimum temperatures?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the relevant columns
    dataset = db[['DATE', 'TMIN']]
    
    # Sort the dataset by TMIN in ascending order and get the top 3 rows
    lowest_temp_dates = dataset.sort_values(by='TMIN', ascending=True).head(3)['DATE']
    
    return lowest_temp_dates.tolist()","datetime64[us, UTC]","[Timestamp('1934-02-09 00:00:00+0000', tz='UTC'), Timestamp('1917-12-30 00:00:00+0000', tz='UTC'), Timestamp('1943-02-15 00:00:00+0000', tz='UTC')]","[1934-02-09, 1917-12-30, 1943-02-15]"
What are the dates of the top 4 highest maximum temperatures recorded?,What are the dates of the top 4 highest TMAX values?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the top 4 highest TMAX values and their corresponding dates
    top_tmax = db.nlargest(4, 'TMAX')
    dates = top_tmax['DATE'].tolist()

    return dates",datetime64[us],"[Timestamp('1936-07-09 00:00:00+0000', tz='UTC'), Timestamp('1918-08-07 00:00:00+0000', tz='UTC'), Timestamp('1977-07-21 00:00:00+0000', tz='UTC'), Timestamp('2011-07-22 00:00:00+0000', tz='UTC')]","[1936-07-09, 1918-08-07, 1977-07-21, 2011-07-22]"
What are the dates of the top 2 deepest snow depth recorded?,What are the dates of the two records with the highest snow depth?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the two records with the highest snow depth
    max_snow_records = db[['DATE', 'SNWD']].nlargest(2, 'SNWD')
    
    # Return the dates as a list of datetime objects
    return max_snow_records['DATE'].tolist()",datetime64[us],"[Timestamp('1947-12-27 00:00:00+0000', tz='UTC'), Timestamp('1947-12-28 00:00:00+0000', tz='UTC')]","[1947-12-27, 1947-12-28]"
What are the 3 highest recorded precipitation events in inches?,What are the top 3 PRCP values in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the PRCP column
    prcp_values = db[datasetTableSchema[1]]
    
    # Sort the values in descending order and get the top 3
    top_3_prcp = prcp_values.sort_values(ascending=False)[:3]
    
    return top_3_prcp.tolist()",float64,-,"[8.28, 7.57, 7.4]"
What are the 5 lowest minimum temperatures recorded?,What are the 5 lowest values in the TMIN column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the TMIN column
    tmin_values = db['TMIN']

    # Get the 5 lowest values
    lowest_5_values = tmin_values.nsmallest(5)

    # Return the list of values
    return lowest_5_values.tolist()",list of float64,"[-15.0, -13.0, -8.0, -7.0, -7.0]","[-15.0, -13.0, -8.0, -7.0, -7.0]"
What are the 4 highest maximum temperatures recorded?,What are the top 4 highest TMAX values?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the 'TMAX' column
    tmax_values = db['TMAX']
    
    # Get the top 4 highest values
    top_4_values = tmax_values.nlargest(4)
    
    # Convert to a list of strings
    top_4_list = top_4_values.astype(str).tolist()
    
    return top_4_list",list of strings,"['106.0', '104.0', '104.0', '104.0']","[106.0, 104.0, 104.0, 104.0]"
What are the 2 deepest snow depth recorded in inches?,What are the two highest values in the 'SNWD' column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the 'SNWD' column
    snwd_column = db['SNWD']
    
    # Get the two highest values
    top_two_values = snwd_column.nlargest(2)
    
    # Return the values as a list
    return top_two_values.tolist()",float64,"[26.0, 25.0]","[26.0, 25.0]"
Are there more than 20 unique clothing items in the dataset?,Is the number of unique clothing IDs greater than 20?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	unique_clothing_ids = dataset['Clothing ID'].nunique()
	return unique_clothing_ids > 20",bool,True,True
Is the age of the reviewers above 50 years on average?,Is the average age of the reviewers greater than 50?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	average_age = dataset[""Age""].mean()
	return average_age > 50",bool,False,False
Do all reviews come from the same department?,Are all the reviews in the dataset from a single department?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    departments = dataset['Department Name'].unique()
    if len(departments) == 1:
        return True
    else:
        return False",bool,False,False
Are all products recommended?,Are all products in the dataset recommended?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    recommended_products = dataset[dataset['Recommended IND'] == 1]
    total_products = len(dataset)
    total_recommended = len(recommended_products)
    
    if total_products == total_recommended:
        return True
    else:
        return False",bool,False,False
What is the average age of the reviewers?,What is the mean of the 'Age' column in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	mean_age = dataset['Age'].mean()
	return mean_age",float64,43.198543813335604,43.198543813335604
What's the highest number of positive feedback received for a review?,What is the maximum value of the 'Positive Feedback Count' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	max_feedback_count = dataset['Positive Feedback Count'].max()
	return max_feedback_count",uint8,122,122
What is the most common rating given by reviewers?,What is the most frequent rating given by customers?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    rating_counts = dataset['Rating'].value_counts()
    most_frequent_rating = rating_counts.index[0]

    return most_frequent_rating",category,5,5
How many unique clothing items are there in the dataset?,What is the count of unique clothing IDs in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	unique_clothing_ids = dataset['Clothing ID'].nunique()
	return unique_clothing_ids",uint16,1206,1206
Which department has the most reviews?,What is the name of the department with the highest number of reviews?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Group by department and count the number of reviews
    department_review_count = db.groupby('Department Name')['Review Text'].count()
    
    # Find the department with the highest number of reviews
    max_reviews_department = department_review_count.idxmax()
    
    return max_reviews_department",category,Tops,Tops
Which class of clothing is most commonly reviewed?,What is the most frequently reviewed class of clothing?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	class_reviews = dataset[""Class Name""].value_counts()
	most_reviewed_class = class_reviews.index[0]

	return most_reviewed_class",category,Dresses,Dresses
Which division is most commonly mentioned in the reviews?,What is the most frequently mentioned division in the reviews?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	division_counts = db['Division Name'].value_counts()
	most_common_division = division_counts.index[0]

	return most_common_division",category,General,General
What is the most frequently reviewed clothing item? If you find a tie answer with row order.,What is the most frequently reviewed clothing item?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	clothing_reviews = dataset.groupby('Clothing ID')['Review Text'].count()
	most_reviewed_clothing = clothing_reviews.idxmax()

	return most_reviewed_clothing",string,1078,1078
Which are the 4 most reviewed categories in Department Name?,What are the top 4 categories in the 'Department Name' column based on the number of reviews?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by 'Department Name' and count the number of reviews
    department_review_counts = dataset['Department Name'].value_counts()
    
    # Get the top 4 categories
    top_departments = list(department_review_counts.index[:4])
    
    return top_departments",category,"['Tops', 'Dresses', 'Bottoms', 'Intimate']","['Tops', 'Dresses', 'Bottoms', 'Intimate']"
Which are the top 2 most reviewed categories in Class Name?,What are the two categories with the highest positive feedback count in the 'Class Name' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by 'Class Name' and sum the 'Positive Feedback Count'
    class_feedback = dataset.groupby('Class Name')['Positive Feedback Count'].sum().reset_index()
    
    # Find the two categories with the highest positive feedback count
    top_2_classes = class_feedback.nlargest(2, 'Positive Feedback Count')['Class Name'].tolist()
    
    return top_2_classes",category,"['Dresses', 'Knits']","['Dresses', 'Knits']"
Which are the 2 most reviewed categories in Division Name?,What are the two categories with the highest number of reviews in the 'Division Name' column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the 'Division Name' column
    division_names = db['Division Name']
    
    # Get the counts of each category in the 'Division Name' column
    category_counts = division_names.value_counts()
    
    # Get the top 2 categories with the highest counts
    top_2_categories = category_counts.index[:2].tolist()
    
    return top_2_categories",category,"['General', 'General Petite']","['General', 'General Petite']"
What are the 4 highest ratings given by reviewers?,What are the top 4 values in the 'Rating' column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    top_ratings = db['Rating'].nlargest(4)
    return top_ratings.tolist()",uint8,"[5, 5, 5, 5]","[5, 4, 3, 2]"
What are the 5 oldest Ages of reviewers?,What are the top 5 values in the 'Age' column of the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    top_5_ages = dataset['Age'].value_counts().head(5).index.tolist()
    return top_5_ages",list of integers,"[39, 35, 36, 34, 38]","[99, 99, 94, 94, 94]"
What are the 4 most common Positive Feedback Counts of reviewers?,What are the top 4 Positive Feedback Counts in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    top_feedback_counts = dataset['Positive Feedback Count'].nlargest(4)
    return top_feedback_counts.tolist()",uint8,"[122, 117, 108, 99]","[0, 1, 2, 3]"
What are the 2 most common values for recommendation indicator?,What are the top two most frequent values in the 'Recommended IND' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    recommended_counts = dataset['Recommended IND'].value_counts()
    top_two_recommended = list(recommended_counts.index[:2])

    return top_two_recommended",category,"[1, 0]","[1, 0]"
What are the 2 most common clothing IDs in the reviews? If you find a tie answer in row order.,"What are the two most frequent clothing IDs in the reviews, and if there's a tie, return them in the order of appearance?","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    clothing_id_counts = dataset['Clothing ID'].value_counts()
    top_2_clothing_ids = clothing_id_counts.index[:2].tolist()

    return top_2_clothing_ids",uint16,"[1078, 862]","[1078, 862]"
Was the highest reported incident in the year 2023 filed online?,Was the incident with the highest 'Incident Year' filed online in the year 2023?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the incident with the highest 'Incident Year'
    max_incident_year = dataset[dataset['Incident Year'] == dataset['Incident Year'].max()]
    
    # Check if the 'Filed Online' value for this incident is '2023'
    is_filed_online_2023 = max_incident_year['Filed Online'].str.contains('2023').any()
    
    return is_filed_online_2023",bool,-,False
Are all incidents reported on Mondays resolved?,Were all incidents reported on Monday resolved?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter incidents reported on Monday
    monday_incidents = dataset[dataset['Incident Day of Week'] == 'Monday']
    
    # Check if all incidents were resolved
    all_resolved = monday_incidents['Resolution'].eq('Resolved').all()
    
    return all_resolved",bool,False,False
Do any incidents reported in Police District 'Central' fall in Supervisor District 5?,Are there any incidents in the dataset where the Police District is 'Central' and the Supervisor District is 5?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset based on the conditions
	filtered_data = dataset[(dataset[""Police District""] == ""Central"") & (dataset[""Supervisor District""] == 5)]

	# Check if there are any rows in the filtered data
	if filtered_data.empty:
		return False
	else:
		return True
",bool,True,False
Are there any incidents that occurred at the same latitude and longitude more than once?,Are there any incidents with the same latitude and longitude values?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Check if there are any duplicate latitude and longitude pairs
	duplicate_locations = dataset.duplicated(subset=['Latitude', 'Longitude'], keep=False)
	answer = duplicate_locations.any()

	return answer",bool,True,True
How many unique types of incident categories are there in the dataset?,What is the count of distinct incident categories in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	incident_categories = dataset['Incident Category']
	unique_categories = incident_categories.nunique()

	return unique_categories",int64,49,49
What's the total number of incidents reported online?,How many incidents were filed online?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	online_incidents = dataset[dataset['Filed Online'] == 'TRUE']
	count = len(online_incidents)

	return count",int64,0,144099
How many different police districts are there in the dataset?,What is the count of unique police districts in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	unique_police_districts = dataset['Police District'].nunique()
	return unique_police_districts",int64,11,11
What is the average incident count per year?,What is the mean of the 'Incident Year' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	mean_incident_year = dataset['Incident Year'].mean()
	return mean_incident_year",float64,2020.0505912857398,118851.16666666667
What is the most common incident category?,What is the most frequent incident category?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	incident_category_counts = dataset['Incident Category'].value_counts()
	most_frequent_category = incident_category_counts.index[0]

	return most_frequent_category",category,Larceny Theft,Larceny Theft
Which day of the week has the highest number of incidents?,What is the day of the week with the highest number of incidents?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Create a dataframe from the dataset
    df = pd.DataFrame(db)
    
    # Convert the 'Incident Day of Week' column to lowercase for consistency
    df['Incident Day of Week'] = df['Incident Day of Week'].str.lower()
    
    # Count the number of incidents for each day of the week
    incident_counts = df['Incident Day of Week'].value_counts()
    
    # Get the day with the highest count
    max_incident_day = incident_counts.idxmax()
    
    return max_incident_day",category,friday,Friday
What is the most common resolution for incidents reported online?,What is the most frequent resolution for incidents in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	resolution_counts = dataset['Resolution'].value_counts()
	most_common_resolution = resolution_counts.index[0]

	return most_common_resolution",category,Open or Active,Open or Active
What is the Police District with the most incidents?,Which Police District has the highest number of incidents?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Group by 'Police District' and count the incidents
	district_counts = dataset['Police District'].value_counts()

	# Get the district with the highest count
	max_district = district_counts.idxmax()

	return max_district",string,Central,Central
What are the three most common incident descriptions?,What are the top 3 incident descriptions?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    incident_descriptions = dataset['Incident Description'].value_counts()[:3].index.tolist()
    return [str(desc) for desc in incident_descriptions]",category,"['Theft, From Locked Vehicle, >$950', 'Malicious Mischief, Vandalism to Property', 'Battery']","['Theft, From Locked Vehicle, >$950', 'Malicious Mischief, Vandalism to Property', 'Battery']"
Name the 4 most frequently occurring police districts.,What are the top 4 police districts by frequency of occurrence?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	df = db
	police_district_counts = df['Police District'].value_counts()
	top_4_districts = list(police_district_counts.index[:4])

	return top_4_districts",string,"['Central', 'Northern', 'Mission', 'Southern']","[Central, Northern, Mission, Southern]"
List the three most common incident categories on Fridays.,What are the three most frequent incident categories on Fridays?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	# Filter data for Fridays
	friday_data = db[db['Incident Day of Week'] == 'Friday']

	# Count incident categories
	category_counts = friday_data['Incident Category'].value_counts()

	# Get the top 3 categories
	top_3_categories = list(category_counts.index[:3])

	return top_3_categories",category,"['Larceny Theft', 'Malicious Mischief', 'Other Miscellaneous']","[Larceny Theft, Malicious Mischief, Other Miscellaneous]"
Give the 6 most common resolutions for incidents.,What are the top 6 most frequent resolutions for incidents?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by the 'Resolution' column and count the occurrences
    resolution_counts = dataset['Resolution'].value_counts()
    
    # Get the top 6 resolutions
    top_resolutions = resolution_counts[:6].index.tolist()
    
    return top_resolutions",category,"['Open or Active', 'Cite or Arrest Adult', 'Unfounded', 'Exceptional Adult']","[Open or Active, Cite or Arrest Adult, Unfounded, Exceptional Adult]"
List the years with the top 4 highest incident counts.,What are the top 4 years with the highest incident counts?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by the 'Incident Year' column and count the incidents
    year_counts = dataset['Incident Year'].value_counts()
    
    # Get the top 4 years
    top_years = list(year_counts.index[:4])
    
    return top_years",string,"[2018, 2019, 2022, 2021]","[2018, 2019, 2022, 2021]"
Which 3 incident years have the lowest number of online filed reports? If two have the same number choose the latest year,"What are the three incident years with the lowest number of online filed reports, with the most recent year being chosen in case of a tie?","def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to only include rows with 'Filed Online' as 'Y'
    online_reports = db[db['Filed Online'] == 'Y']
    
    # Group by 'Incident Year' and count the number of reports
    year_counts = online_reports.groupby('Incident Year').size()
    
    # Find the three years with the lowest counts
    lowest_years = year_counts.nsmallest(3).index.tolist()
    
    return lowest_years",uint16,[],"[2023, 2020, 2021]"
What are the 2 years with the highest incident counts.,What are the two years with the highest incident counts?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by year and count incidents
    year_counts = dataset[""Incident Year""].value_counts()

    # Get the two years with the highest incident counts
    top_two_years = year_counts.nlargest(2).index.tolist()

    return top_two_years
",string,"[2018, 2019]","[2018, 2019]"
Name the 6 years with the most number of unique incident categories.,What are the six years with the highest number of unique incident categories?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by year and count unique incident categories
    year_category_count = dataset.groupby('Incident Year')['Incident Category'].nunique()
    
    # Get the top 6 years with the highest count of unique incident categories
    top_years = year_category_count.nlargest(6).index.tolist()
    
    return top_years",string,"[2018, 2019, 2020, 2021, 2022, 2023]","[2018, 2019, 2020, 2021, 2022, 2023]"
Do all patients experience exercise-induced angina?,Is the ExerciseAngina category value True for all patients?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Check if all values in the 'ExerciseAngina' column are True
	all_true = dataset['ExerciseAngina'].eq('True').all()

	return all_true",bool,False,False
Does any patient have a resting blood pressure above 200?,Are there any patients with a resting blood pressure greater than 200?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get patients with resting blood pressure greater than 200
    filtered_data = db[db['RestingBP'] > 200]
    
    # Check if there are any rows in the filtered data
    answer = not filtered_data.empty
    
    return answer",bool,False,False
Are there patients without heart disease?,Are there any patients with a HeartDisease value of 0?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	patients_with_heart_disease_0 = dataset['HeartDisease'] == 0

	return patients_with_heart_disease_0.any()",bool,True,True
Does everyone have normal resting electrocardiographic results?,Are all the 'RestingECG' values in the dataset categorized as 'Normal'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	resting_ecg_values = dataset['RestingECG'].unique()
	is_all_normal = all(value == 'Normal' for value in resting_ecg_values)

	return is_all_normal",bool,False,False
What is the maximum age of patients in the dataset?,What is the highest age value in the 'Age' column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	max_age = db['Age'].max()
	return max_age",uint8,77,77
What is the minimum resting blood pressure among the patients?,What is the lowest resting blood pressure value in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	min_bp = dataset['RestingBP'].min()
	return min_bp",uint8,0,0
What is the average cholesterol level in the dataset?,What is the mean of the 'Cholesterol' column in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	mean_cholesterol = dataset['Cholesterol'].mean()
	return mean_cholesterol",float64,198.7995642701525,198.7995642701525
What is the standard deviation of maximum heart rate among the patients?,What is the standard deviation of the 'MaxHR' column in the '012_Heart' dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	std_max_hr = dataset[""MaxHR""].std()
	return std_max_hr
",float64,25.4603341382503,25.4603341382503
What is the most common chest pain type among patients?,What is the most frequent chest pain type in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    chest_pain_type_counts = dataset['ChestPainType'].value_counts()
    most_frequent_chest_pain = chest_pain_type_counts.idxmax()

    return most_frequent_chest_pain",category,ASY,ASY
What is the least common resting electrocardiographic result?,What is the least common value in the 'RestingECG' column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    ecg_counts = db['RestingECG'].value_counts()
    least_common_ecg = ecg_counts.index[-1]

    return least_common_ecg",category,ST,ST
What is the most common ST slope among patients with heart disease?,What is the mode of the ST_Slope column for the patients with HeartDisease equal to 1?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for patients with HeartDisease equal to 1
    filtered_data = db[db['HeartDisease'] == 1]
    
    # Find the mode of the ST_Slope column
    mode_st_slope = filtered_data['ST_Slope'].mode()
    
    # Return the mode as a string
    return mode_st_slope.values[0]",category,Flat,Flat
What is the least common chest pain type among male patients?,What is the chest pain type with the lowest frequency among male patients?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter data for male patients
    male_patients = db[db['Sex (category)'] == 'Male']

    # Count the frequency of each chest pain type
    chest_pain_counts = male_patients['ChestPainType (category)'].value_counts()

    # Get the chest pain type with the lowest frequency
    lowest_chest_pain = chest_pain_counts.index[0]

    return lowest_chest_pain
",category,-,TA
What are the top 3 most common chest pain types?,What are the three most frequent chest pain types?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    chest_pain_counts = db['ChestPainType'].value_counts()
    top_3_chest_pains = list(chest_pain_counts.index[:3])

    return top_3_chest_pains",category,"['ASY', 'NAP', 'ATA']","['ASY', 'NAP', 'ATA']"
Which 4 resting electrocardiographic results are least common?,What are the four least common values in the 'RestingECG' column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the 'RestingECG' column
    resting_ecg_data = db['RestingECG']

    # Get the four least common values
    least_common_values = resting_ecg_data.value_counts().tail(4).index.tolist()

    return least_common_values",category,"['Normal', 'LVH', 'ST']","['ST', 'LVH', 'Normal']"
What are the 2 most common ST slopes among patients with heart disease?,What are the top two ST_Slope values for patients with heart disease?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter patients with heart disease
    patients_with_heart_disease = db[db['HeartDisease'] == 1]
    
    # Get the top two ST_Slope values
    top_two_st_slopes = patients_with_heart_disease['ST_Slope'].value_counts().head(2).index.tolist()
    
    return top_two_st_slopes",category,"['Flat', 'Up']","['Flat', 'Up']"
What are the 4 most common chest pain types among male patients?,What are the top 4 chest pain types for male patients?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter data for male patients
    male_patients = db[db['Sex (category)'] == 'Male']
    
    # Get the top 4 chest pain types
    top_chest_pain_types = male_patients['ChestPainType (category)'].value_counts().head(4).index.tolist()
    
    return top_chest_pain_types",category,-,"['TA', 'ATA', 'NAP', 'ASY']"
What are the ages of the 5 oldest patients in the dataset?,What are the top 5 highest values in the 'Age' column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    top_5_ages = db['Age'].nlargest(5)
    return top_5_ages.tolist()",list of uint8,"[77, 77, 76, 76, 75]","[77, 77, 76, 76, 75]"
What are the 4 highest resting blood pressures?,What are the top 4 values in the 'RestingBP' column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the 'RestingBP' column
    resting_bp_values = db['RestingBP']
    
    # Get the top 4 values
    top_4_values = resting_bp_values.nlargest(4).tolist()
    
    return top_4_values",list of uint8,"[200, 200, 200, 200]","[200, 200, 200, 200]"
What are the 6 lowest cholesterol levels in the dataset?,List the 6 lowest values of the 'Cholesterol' column in the dataset.,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    df = db
    lowest_cholesterol_values = df['Cholesterol'].nsmallest(6)
    answer = lowest_cholesterol_values.tolist()
    return answer",list of int64,"[0, 0, 0, 0, 0, 0]","[0, 0, 0, 0, 0, 0]"
What are the 3 highest maximum heart rates among the patients?,What are the top 3 values in the 'MaxHR' column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    max_hr_values = db['MaxHR'].nlargest(3)
    return max_hr_values.tolist()",uint8,"[202, 195, 194]","[202, 195, 194]"
Did the oldest roller coaster in the dataset still operate?,Did the oldest roller coaster in the dataset have a status of 'Operating'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    oldest_coaster = dataset.loc[dataset['year_introduced'] == dataset['year_introduced'].min()]
    status = oldest_coaster['Status'].values[0]
    
    if status == 'Operating':
        return True
    else:
        return False",bool,False,True
Is there a roller coaster in the dataset that operates at a speed more than 100 mph?,Are there any roller coasters with a speed greater than 100 mph?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Assuming the speed column contains numerical values
	speed_gt_100 = dataset['speed_mph'] > 100
	return speed_gt_100.any()",bool,True,True
Are all roller coasters in the dataset designed by 'Werner Stengel' removed?,Are there any roller coasters in the dataset designed by 'Werner Stengel'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	designer_name = 'Werner Stengel'
	designer_coasters = dataset[dataset['Designer'] == designer_name]

	return not designer_coasters.empty",bool,True,False
Does every roller coaster have a G-force value?,Are there any roller coasters with a missing G-force value?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	g_force_missing = dataset[""G-force""].isnull().any()
	return g_force_missing
",bool,True,False
What is the maximum speed (in mph) for roller coasters in the dataset?,What is the highest speed_mph value in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	max_speed = db['speed_mph'].max()
	return max_speed",float64,149.1,149.1
How many roller coasters were introduced in the year 2000?,How many roller coasters were introduced in the year 2000?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	year_2000_coasters = dataset[dataset['year_introduced'] == 2000]
	count = year_2000_coasters.shape[0]

	return count",uint16,47,47
What is the average G-force across all roller coasters in the dataset?,What is the mean of the Gforce_clean column in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	mean_gforce = dataset['Gforce_clean'].mean()
	return mean_gforce",float64,3.8240055248618785,3.8240055248618785
What is the total number of roller coasters designed by 'Edwin Madeupname' in the dataset?,How many roller coasters were designed by 'Edwin Madeupname' in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	designer_count = dataset[dataset['Designer'] == 'Edwin Madeupname'].shape[0]

	return designer_count",int64,0,0
Which manufacturer has built the fastest roller coaster?,What is the name of the manufacturer that has built the roller coaster with the highest speed?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	# Extracting the column names from the schema
	columns = [col.split('(')[0].strip() for col in datasetTableSchema.split(', ')]

	# Finding the maximum speed value
	max_speed_row = db[columns].loc[db['Speed1_value'] == db['Speed1_value'].max()]

	# Extracting the manufacturer name
	manufacturer = max_speed_row['Manufacturer'].values[0]

	return manufacturer",category,-,Intamin
What is the status of the roller coaster with the highest G-force?,What is the status of the roller coaster with the highest G-force value?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	max_gforce_coaster = dataset.loc[dataset[""G-force""] == dataset[""G-force""].max()]
	status = max_gforce_coaster[""Status""].values[0]

	return status",category,-,Removed
What type of the roller coaster is the oldest in the dataset?,What is the type of the roller coaster with the earliest opening date?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    earliest_opening_date = dataset['opening_date_clean'].min()
    roller_coaster_type = dataset.loc[dataset['opening_date_clean'] == earliest_opening_date, 'Type_Main'].values[0]

    return roller_coaster_type",category,Wood,Wood
What is the location of the roller coaster with the highest number of inversions?,What is the location of the roller coaster with the maximum number of inversions?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	max_inversions_coaster = dataset.loc[dataset[""Inversions""] == dataset[""Inversions""].max()]
	location = max_inversions_coaster[""Location""].values[0]

	return location",category,Alton Towers,Alton Towers
What are the names of the top 3 fastest roller coasters?,What are the names of the three roller coasters with the highest speed_mph?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset to get the required columns
	required_columns = ['coaster_name', 'speed_mph']
	dataset = dataset[required_columns]
	
	# Sort the dataset by speed_mph in descending order
	dataset = dataset.sort_values(by='speed_mph', ascending=False)
	
	# Get the top 3 coaster names
	top_3_coasters = dataset['coaster_name'].head(3).tolist()
	
	return top_3_coasters",category,"['Formula Rossa', 'Kingda Ka', 'Top Thrill Dragster']","[Formula Rossa, Kingda Ka, Top Thrill Dragster]"
Which 2 roller coasters have the highest number of inversions?,What are the names of the two roller coasters with the highest number of inversions?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	max_inversions = dataset['Inversions'].max()
	highest_inversion_coasters = dataset[dataset['Inversions'] == max_inversions]['coaster_name'].tolist()

	return highest_inversion_coasters[:2]",category,['The Smiler'],"[The Smiler, Colossus (Thorpe Park)]"
What are the locations of the top 5 roller coasters with the highest G-force?,What are the locations of the top 5 roller coasters with the highest G-force values?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the top 5 roller coasters with the highest G-force values
    top_5_coasters = dataset.nlargest(5, 'G-force')

    # Extract the locations of these top 5 roller coasters
    locations = top_5_coasters['Location'].tolist()

    return locations",category,-,"[Sea Lion Park, Fuji-Q Highland, Six Flags Over Texas, Nürburgring, Morey's Piers]"
Name the 4 oldest roller coasters in the dataset.,What are the names of the 4 oldest roller coasters in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Assuming the dataset has a column 'year_introduced'
	oldest_coasters = dataset.nlargest(4, 'year_introduced')
	coaster_names = oldest_coasters['coaster_name'].tolist()

	return coaster_names",category,"['Aquaman: Power Wave', 'ArieForce One', 'Defiance (roller coaster)', 'Dr. Diabolical’s Cliffhanger']","[Switchback Railway, Flip Flap Railway, Loop the Loop (Coney Island), Loop the Loop (Young's Pier)]"
What are the top 3 speeds (in mph) of roller coasters in the dataset?,What are the three highest values in the 'speed_mph' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset to get the 'speed_mph' column
	speed_mph_values = dataset['speed_mph']

	# Sort the values in descending order and get the top 3 values
	top_3_speeds = sorted(speed_mph_values, reverse=True)[:3]

	return top_3_speeds",float64,"[55.0, 6.0, nan]","[149.1, 128.0, 120.0]"
List the G-force values of the 2 roller coasters with the highest G-force.,What are the names of the two roller coasters with the highest G-force values?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset to get the two highest G-force values
	top_gforce_coasters = dataset.nlargest(2, 'Gforce_clean')
	# Extract the names of these two roller coasters
	coaster_names = top_gforce_coasters['coaster_name'].tolist()

	return coaster_names",category,"['Flip Flap Railway', 'Moonsault Scramble']","[12.0, 6.5]"
What are the heights (in ft) of the top 4 tallest roller coasters?,What are the heights in feet of the four tallest roller coasters?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the height values in feet
    height_values = dataset['height_ft'].dropna()
    
    # Sort the values in descending order and get the top 4 values
    top_4_heights = height_values.sort_values(ascending=False)[:4]
    
    return top_4_heights.tolist()",float64,"[377.3, 367.5, 318.2, 306.1]","[377.3, 367.5, 318.2, 306.1]"
Name the introduction years of the 6 oldest roller coasters in the dataset.,What are the introduction years of the 6 oldest roller coasters?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the 6 oldest roller coasters
    oldest_coasters = dataset.sort_values(by='year_introduced').head(6)

    # Extract the introduction years
    introduction_years = oldest_coasters['year_introduced'].tolist()

    # Convert the years to strings and return the list
    return [str(year) for year in introduction_years]",string,"['1884', '1895', '1896', '1901', '1901', '1902']","[1884, 1895, 1901, 1901, 1902, 1902]"
Is there a rental property with exactly 5 bedrooms?,Are there any rental properties with 5 bedrooms?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset to get rows with 5 bedrooms
	five_bedrooms_dataset = dataset[dataset['bedrooms'] == 5]

	# Check if there are any rows in the filtered dataset
	answer = len(five_bedrooms_dataset) > 0

	return answer",bool,True,True
Is there a rental property listed by a superhost that is instantly bookable?,Are there any listings where the host is a superhost and the property is instantly bookable?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset to include only superhosts and instantly bookable properties
	filtered_dataset = dataset[(dataset['host_is_superhost'] == 't') & (dataset['instant_bookable'] == 't')]

	# Check if the filtered dataset is empty
	if filtered_dataset.empty:
		return False
	else:
		return True

The function filters the dataset to include only the rows where the host is a superhost and the property is instantly bookable. It then checks if the filtered dataset is empty, returning False if it is and True otherwise.",bool,-,True
Are there any rental properties that can accommodate more than 10 guests?,Are there any Airbnb listings that can accommodate more than 10 people?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	accommodates_more_than_10 = dataset['accommodates'] > 10
	return accommodates_more_than_10.any()",bool,True,True
Is there a rental property that has received a perfect review score?,Are there any rental properties with a review score of 100?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Check if there are any rows with a review score of 100
	has_perfect_score = dataset['review_scores_rating'].eq(100).any()

	return has_perfect_score",bool,False,False
How many rental properties are there in the dataset?,What is the total number of listings in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	total_listings = dataset[""id""].count()
	return total_listings",int64,20776,20776
What is the maximum number of bedrooms in a property?,What is the maximum value in the 'bedrooms' column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	max_bedrooms = db['bedrooms'].max()
	return max_bedrooms",float64,18.0,18.0
What is the highest price per night for a rental property?,What is the maximum price for a rental property?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	max_price = dataset['price'].max()
	return max_price",float64,-,95150.0
What is the maximum number of reviews a property has received?,What is the maximum value in the 'number_of_reviews' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	max_reviews = dataset['number_of_reviews'].max()
	return max_reviews",uint16,870,870
What is the host response time for the property with the highest number of bedrooms?,What is the host response time for the property with the maximum number of bedrooms?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to find the property with the maximum number of bedrooms
    max_bedrooms_property = db[db['bedrooms'] == db['bedrooms'].max()]
    
    # Extract the host response time for the property
    host_response_time = max_bedrooms_property['host_response_time'].values[0]
    
    # Convert the time to a float
    response_time_float = float(host_response_time.split()[0])
    
    return response_time_float",float64,-,within an hour
What type of room is the most expensive property?,What is the room type of the property with the highest price?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the property with the highest price
    highest_price_property = dataset.loc[dataset['price'] == dataset['price'].max()]
    
    # Get the room type of the highest price property
    room_type = highest_price_property['room_type'].values[0]
    
    return room_type",category,-,Entire home/apt
What is the property type of the listing with the most reviews?,What is the property type of the listing with the highest number of reviews?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	max_reviews_listing = dataset.loc[dataset[""number_of_reviews""] == dataset[""number_of_reviews""].max()]
	property_type = max_reviews_listing[""property_type""].values[0]

	return property_type",category,Entire rental unit,Entire rental unit
What is the acceptance rate of the host of the property that can accommodate the most number of guests?,What is the acceptance rate of the host with the highest 'accommodates' value?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset to get the host with the highest 'accommodates' value
	max_accommodates_host = db.loc[db['accommodates'] == db['accommodates'].max()]
	# Get the acceptance rate of this host
	acceptance_rate = max_accommodates_host['host_acceptance_rate'].values[0]

	return float(acceptance_rate)",float64,,100%
Which are the 2 lowest values of host response rates above 0% ?,What are the two lowest host response rates that are greater than 0%?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Filter host response rates greater than 0%
	filtered_rates = dataset[dataset['host_response_rate'] != '0%']
	# Sort the rates in ascending order
	sorted_rates = filtered_rates.sort_values(by='host_response_rate')
	# Get the two lowest rates
	lowest_rates = sorted_rates['host_response_rate'].head(2)

	return lowest_rates.tolist()",category,"['100%', '100%']","['5%', '10%']"
Which are the 2 lowest values of host response rates?,What are the two lowest values of the host response rate?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	host_response_rate = dataset['host_response_rate']
	lowest_response_rates = host_response_rate.nsmallest(2)

	return lowest_response_rates.tolist()",category,-,"['0%', '0%']"
What are the 4 highest values of host acceptance rates?,What are the top 4 host acceptance rates?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	top_acceptance_rates = dataset['host_acceptance_rate'].value_counts().head(4)
	return top_acceptance_rates.index.tolist()",category,"['100%', '99%', '97%', '98%']","['99%', '99%', '99%', '99%']"
What are the 2 least common scraping sources?,What are the two least common values in the 'source' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	source_counts = dataset['source'].value_counts()
	least_common_sources = source_counts.tail(2).index.tolist()

	return least_common_sources",category,"['city scrape', 'previous scrape']","['previous scrape', 'city scrape']"
What are the 3 prices of the most expensive properties?,What are the top 3 prices of the most expensive properties?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset to get the top 3 most expensive properties
	top_3_expensive = dataset.nlargest(3, 'price')

	# Extract the prices and convert to a list of strings
	top_3_prices = top_3_expensive['price'].tolist()

	return top_3_prices",category,-,"[95150.0, 90130.0, 64430.0]"
What are the 2 prices of the least expensive properties?,What are the 2 lowest prices of the properties?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset to get the price column
	price_data = dataset[['price']]

	# Convert the price column to a numeric type
	price_data['price'] = pd.to_numeric(price_data['price'], errors='coerce')

	# Handle any non-numeric values
	price_data = price_data.dropna()

	# Sort the prices in ascending order
	sorted_prices = price_data.sort_values(by='price')

	# Get the 2 lowest prices
	lowest_prices = sorted_prices['price'].head(2)

	return lowest_prices.tolist()",category,[],"[0.0, 0.0]"
What are the 2 numbers of reviews received by the 2 most reviewed properties?,What are the two highest values in the 'number_of_reviews' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset to get the 'number_of_reviews' column
	reviews_column = dataset['number_of_reviews']

	# Get the two highest values
	top_two_reviews = reviews_column.nlargest(2)

	return top_two_reviews.tolist()",uint16,"[870, 822]","[870, 822]"
What are the 5 numbers of guests accommodated by the properties that can accommodate the most guests?,What are the top 5 values of the 'accommodates' column in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	top_accommodates = dataset['accommodates'].value_counts().index[:5]
	return top_accommodates.tolist()",uint8,"[2, 4, 1, 3, 6]","[16, 16, 16, 16, 16]"
Is there a food item with 'Fruits' as its group?,Are there any food items in the dataset with the group 'Fruits'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    group_fruits = dataset[dataset['GROUP'] == 'Fruits']
    
    if group_fruits.empty:
        return False
    else:
        return True",bool,True,True
Are there food items with 'Nuts' as their sub group?,Do any food items have the sub group 'Nuts'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to check if any food items have the sub group 'Nuts'
    sub_group_nuts = dataset[dataset['SUB GROUP'] == 'Nuts']
    
    # Check if the filtered dataset is empty
    if sub_group_nuts.empty:
        return False
    else:
        return True",bool,True,True
Is there a food item with scientific name 'Tilia argentea'?,Does the food item with the scientific name 'Tilia argentea' exist in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	food_item_exists = dataset['SCIENTIFIC NAME'].str.contains('Tilia argentea').any()
	return food_item_exists",bool,True,True
Is 'Angelica' listed as a food name in the dataset?,Is the food name 'Angelica' present in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    food_name = 'Angelica'
    food_names = dataset['FOOD NAME'].tolist()
    
    return food_name in food_names",bool,True,True
How many food items are there in the dataset?,What is the count of food items in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	return dataset.shape[0]",int64,906,906
How many unique food groups are there in the dataset?,What is the count of distinct food groups in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	food_groups = dataset['GROUP (category)']
	distinct_groups = food_groups.nunique()

	return distinct_groups",int64,-,24
How many unique sub groups are there in the dataset?,What is the number of distinct sub groups in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	sub_group_count = dataset['SUB GROUP'].nunique()
	return sub_group_count",int64,123,123
How many unique food items are there in the dataset?,What is the count of distinct food names in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	food_names = dataset['FOOD NAME']
	distinct_food_count = food_names.nunique()

	return distinct_food_count",int64,906,906
What is the group of the food named 'Kiwi'?,What is the group of the food named 'Kiwi'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the row where 'FOOD NAME' is 'Kiwi'
    kiwi_row = dataset[dataset['FOOD NAME'] == 'Kiwi']
    # Get the 'GROUP' value from the filtered row
    group_value = kiwi_row['GROUP'].values[0]
    
    return group_value",category,Fruits,Fruits
What is the sub group of the food with scientific name 'Tilia argentea'?,What is the sub group of the food with the scientific name 'Tilia argentea'?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the row with the given scientific name
    filtered_data = db[db['SCIENTIFIC NAME'] == 'Tilia argentea']
    
    # Get the sub group value from the filtered data
    sub_group = filtered_data['SUB GROUP'].values[0]
    
    return sub_group",category,Herbs,Herbs
What is the scientific name of the food named 'Colorado pinyon'?,What is the value of the 'SCIENTIFIC NAME' column for the row where the 'FOOD NAME' is 'Colorado pinyon'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	answer = dataset.loc[dataset['FOOD NAME'] == 'Colorado pinyon', 'SCIENTIFIC NAME'].values[0]
	return answer",string,Pinus edulis,Pinus edulis
What is the food name of the item with scientific name 'Tilia argentea'?,What is the food name of the item with the scientific name 'Tilia argentea'?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	food_name = db[db['SCIENTIFIC NAME'] == 'Tilia argentea']['FOOD NAME'].values[0]
	return food_name",category,Silver linden,Silver linden
What are the top 3 most common food groups?,What are the top 3 most frequent food groups?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    food_group_counts = dataset['GROUP'].value_counts()
    top_3_groups = list(food_group_counts.index[:3])
    
    return top_3_groups",category,"['Aquatic foods', 'Vegetables', 'Fruits']","['Aquatic foods', 'Vegetables', 'Fruits']"
What are the top 2 most common groups? If there are two that have the same number of appearances give preference alphabetically.,"What are the two most common groups in the dataset, sorted alphabetically if there is a tie?","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    group_counts = dataset['GROUP'].value_counts()
    top_two_groups = list(group_counts.index[:2])
    return top_two_groups",category,"['Aquatic foods', 'Vegetables']","['Aquatic foods', 'Fruits']"
What are the 5 least common food groups?,What are the 5 least common food groups in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Assuming the dataset is a pandas dataframe
    food_group_counts = dataset['GROUP'].value_counts()
    least_common_groups = food_group_counts.index[-5:]

    return least_common_groups.tolist()",category,"['Teas', 'Eggs', 'Baby foods', 'Unclassified', 'Herbs and spices']","['Teas', 'Eggs', 'Baby foods', 'Unclassified', 'Herbs and spices']"
What are the 5 most common sub groups?,What are the top 5 sub groups in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    sub_groups = dataset['SUB GROUP'].value_counts()[:5].index.tolist()
    return sub_groups",category,"['Fishes', 'Herbs', 'Berries', 'Tropical fruits', 'Nuts']","['Fishes', 'Herbs', 'Berries', 'Tropical fruits', 'Nuts']"
What are the lengths of the top 5 most common sub group names?,What are the lengths of the top 5 most common sub group names in the '015_Food' dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Get the 'SUB GROUP' column
    sub_group_column = db['SUB GROUP']

    # Get the top 5 most common sub group names and their lengths
    top_5_sub_groups = sub_group_column.value_counts().head(5)
    lengths = top_5_sub_groups.index.str.len()

    return lengths.tolist()",list,"[6, 5, 7, 15, 4]","[6, 5, 7, 15, 4]"
What are the number of appearances of the 2 least common groups?,How many times do the two least common groups appear in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Get the group column
    group_column = dataset['GROUP (category)']
    
    # Get the two least common groups
    least_common_groups = group_column.value_counts().tail(2)
    
    # Sum the counts of the two least common groups
    total_count = least_common_groups.sum()
    
    return total_count",int64,-,"[1, 1]"
What are the number of appearances of the 3 most common groups?,How many times do the top 3 most common groups appear in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Get the top 3 most common groups
    top_3_groups = dataset['GROUP'].value_counts().head(3)
    # Calculate the sum of their occurrences
    total_occurrences = top_3_groups.sum()
    return total_occurrences",int64,426,"[166, 130, 130]"
What are the three most common group name lengths?,What are the three most frequent lengths of the 'GROUP' column in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Get the 'GROUP' column
    group_column = db['GROUP']
    
    # Calculate the length of each string in the 'GROUP' column
    group_lengths = group_column.str.len()
    
    # Get the three most common lengths
    most_common_lengths = group_lengths.value_counts().head(3).index.tolist()
    
    return most_common_lengths",list,"[6.0, 13.0, 10.0]","[6.0, 13.0, 10.0]"
Is there a customer with 'Large Business' as their occupation?,Are there any customers with the occupation 'Large Business'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	large_business_customers = dataset[dataset['Occupation'] == 'Large Business']

	return not large_business_customers.empty",bool,True,True
Are there customers with 'King' as their pitched product?,Are there any customers who have 'King' as their ProductPitched?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	king_customers = dataset[dataset['ProductPitched'] == 'King']

	return not king_customers.empty",bool,True,True
Is there a customer with designation 'VP'?,Are there any customers with the designation 'VP'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	vp_customers = dataset[dataset[""Designation""] == ""VP""]
	return not vp_customers.empty
",bool,True,True
Is 'Unmarried' listed as a marital status in the dataset?,Does the MaritalStatus column contain the value 'Unmarried'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	marital_status_values = dataset['MaritalStatus'].unique()
	contains_unmarried = 'Unmarried' in marital_status_values

	return contains_unmarried",bool,True,True
How many customers are there in the dataset?,What is the count of unique CustomerIDs in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	unique_customer_ids = dataset['CustomerID'].nunique()
	return unique_customer_ids",uint32,4888,4888
How many unique occupations are there in the dataset?,What is the count of distinct occupations in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	distinct_occupations = db['Occupation'].nunique()

	return distinct_occupations",uint8,4,4
How many unique designations are there in the dataset?,What is the count of distinct values in the 'Designation' column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	# Extract the 'Designation' column
	designation_column = db['Designation']

	# Get the count of distinct values
	distinct_count = len(designation_column.unique())

	return distinct_count",uint8,5,5
How many unique marital statuses are there in the dataset?,What is the count of distinct marital statuses in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	marital_status_count = dataset['MaritalStatus'].nunique()

	return marital_status_count",uint8,4,4
What is the occupation of the customer with ID 200000?,What is the occupation of the customer with CustomerID 200000?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	customer_occupation = dataset.loc[dataset[""CustomerID""] == 200000, ""Occupation""].values[0]
	return customer_occupation",category,Salaried,Salaried
What is the product pitched to the customer with ID 200001?,What is the product pitched to the customer with CustomerID 200001?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	customer_info = db[db['CustomerID'] == 200001]
	product_pitched = customer_info['ProductPitched'].values[0]

	return product_pitched",category,Deluxe,Deluxe
What is the designation of the customer with ID 200002?,What is the value of the 'Designation' column for the customer with 'CustomerID' 200002?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	customer_info = db[db['CustomerID'] == 200002]
	designation = customer_info['Designation'].values[0]

	return designation",category,Executive,Executive
What is the marital status of the customer with ID 200003?,What is the MaritalStatus of the customer with CustomerID 200003?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	customer_info = dataset[dataset['CustomerID'] == 200003]
	marital_status = customer_info['MaritalStatus'].values[0]

	return marital_status",category,Divorced,Divorced
What are the 3 most common occupations?,What are the top 3 occupations in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	occupation_counts = dataset['Occupation'].value_counts()
	top_3_occupations = list(occupation_counts.index[:3])

	return top_3_occupations",category,"['Salaried', 'Small Business', 'Large Business']","['Salaried', 'Small Business', 'Large Business']"
What are the top 2 most common pitched products?,What are the two most frequent product pitches?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    product_pitch_counts = dataset['ProductPitched'].value_counts()
    top_2_pitches = list(product_pitch_counts.index[:2])

    return top_2_pitches",category,"['Basic', 'Deluxe']","['Basic', 'Deluxe']"
What are the 4 least common occupations?,What are the four least frequent occupations?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    occupation_counts = dataset['Occupation'].value_counts()
    least_frequent_occupations = list(occupation_counts.tail(4).index)

    return least_frequent_occupations",category,"['Salaried', 'Small Business', 'Large Business', 'Free Lancer']","['Salaried', 'Small Business', 'Large Business', 'Free Lancer']"
What are the 2 least common pitched products?,What are the two products with the lowest frequency in the 'ProductPitched' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	product_counts = dataset['ProductPitched'].value_counts()
	least_common_products = product_counts.index[:2]

	return least_common_products.tolist()",category,"['Basic', 'Deluxe']","['Super Deluxe', 'King']"
What are the ages of the 3 oldest customers?,List the ages of the top 3 customers by age in descending order.,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	top_3_ages = dataset.nlargest(3, 'Age')['Age'].tolist()
	return top_3_ages
",list of float64,"[61.0, 61.0, 61.0]","[61, 61, 61]"
What are the ages of the 4 youngest customers?,What are the ages of the 4 customers with the lowest age?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset to get the 4 customers with the lowest age
	lowest_age_customers = db.nsmallest(4, 'Age')
	# Get the ages of these customers
	ages = lowest_age_customers['Age'].tolist()
	return ages",float64,"[18.0, 18.0, 18.0, 18.0]","[18.0, 18.0, 18.0, 18.0]"
What are the top 2 highest monthly incomes of the customers?,What are the top 2 highest values in the 'MonthlyIncome' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	top_2_incomes = dataset['MonthlyIncome'].nlargest(2)
	return top_2_incomes.tolist()",float64,"[98678.0, 95000.0]","[98678, 95000]"
What are the 4 most common duration of pitch?,What are the top 4 categories of 'DurationOfPitch'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    duration_pitch_categories = dataset['DurationOfPitch'].value_counts().index.tolist()[:4]
    return duration_pitch_categories",category,"[9.0, 7.0, 8.0, 6.0]","[9.0, 7.0, 8.0, 6.0]"
Is there any entry posted on a weekend?,Are there any entries with a timestamp on a Saturday or Sunday?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    weekend_days = ['Saturday', 'Sunday']
    weekend_entries = dataset[dataset['weekday_name'].isin(weekend_days)]
    
    return not weekend_entries.empty",bool,True,True
Are there titles with more than 100 characters?,Are there any titles with a text length greater than 100?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset to get titles with text length greater than 100
	long_titles = dataset[dataset['title_gx_text_length'] > 100]

	# Check if there are any rows in the filtered dataset
	answer = not long_titles.empty

	return answer",bool,False,False
Do any entries have a negative sentiment according to the Cardiff NLP model?,Are there any entries with a 'title_gx_cardiff_nlp_sentiment' value of 'negative'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	negative_sentiment_entries = dataset[dataset['title_gx_cardiff_nlp_sentiment'] == 'negative']

	return len(negative_sentiment_entries) > 0",bool,False,False
"Is the term 'linux' mentioned in the ""Clusters II"" column?","Does the ""Clusters II"" column contain the term 'linux'?","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    clusters_ii_column = dataset['Clusters II']
    linux_in_column = clusters_ii_column.str.contains('linux', case=False)
    return linux_in_column.any()",bool,True,True
How many entries were posted in the morning?,What is the total number of entries with the 'partofday' attribute set to 'morning'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	total_entries = dataset[dataset['partofday'] == 'morning'].shape[0]
	return total_entries",uint16,1516,1516
What's the highest score received by an entry?,What is the maximum score in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	max_score = dataset['score'].max()
	return max_score",uint16,6015,6015
"On average, how many descendants does an entry have?",What is the average number of descendants for all entries?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	average_descendants = dataset['descendants'].mean()
	return average_descendants",float64,339.2486205432937,339.2486205432937
How many entries are in the Autumn season?,What is the count of entries with the season attribute set to 'Autumn'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	autumn_entries = dataset[dataset['season'] == 'Autumn']
	count = len(autumn_entries)

	return count",int64,2301,2301
Which day of the week has the most entries?,What is the weekday name with the highest number of entries?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	weekday_counts = dataset['weekday_name'].value_counts()
	max_weekday = weekday_counts.idxmax()

	return max_weekday",category,Tuesday,Tuesday
What is the predominant language used in titles?,What is the most common language used in the 'title_gx_lang' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	lang_counts = dataset['title_gx_lang'].value_counts()
	most_common_lang = lang_counts.index[0]

	return most_common_lang",string,en,en
In which season was the entry with the highest score posted?,What is the name of the season with the highest score?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the maximum score and its corresponding season
    max_score_season = dataset.loc[dataset['score'] == dataset['score'].max()]
    max_score_season = max_score_season['season'].values[0]

    return max_score_season",string,Spring,Spring
On which part of the day are most entries posted?,What is the most common part of the day for entries to be posted?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	part_of_day_counts = dataset['partofday'].value_counts()
	most_common_part_of_day = part_of_day_counts.index[0]

	return most_common_part_of_day",category,afternoon,afternoon
"List the top 4 most frequent terms in the ""Clusters II"" column.","What are the top 4 most common terms in the ""Clusters II"" column?","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    common_terms = dataset['Clusters II'].value_counts()[:4].index.tolist()
    return [str(term) for term in common_terms]",list,"['year, work, new', 'google, web, firefox, open', 'apple, linux, rust, iphone', 'facebook, twitter, die, account']","['year, work, new', 'google, web, firefox, open', 'apple, linux, rust, iphone', 'facebook, twitter, die, account']"
Name the 2 month names which appear less in the dataset.,What are the two month names that have the least number of occurrences in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	month_counts = db['month_name'].value_counts()
	least_common_months = month_counts.index[-2:]

	return least_common_months.tolist()",string,"['December', 'July']","['December', 'July']"
Identify the top 3 weekdays based on entry frequency.,What are the top 3 weekday names based on the frequency of entries?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    weekday_counts = dataset['weekday_name'].value_counts()
    top_3_weekdays = list(weekday_counts.index[:3])

    return top_3_weekdays",category,"['Tuesday', 'Wednesday', 'Thursday']","['Tuesday', 'Wednesday', 'Thursday']"
Provide the bottom 4 seasons in terms of entry count.,Which are the four seasons with the least number of entries?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the relevant columns
    dataset = db[['season', 'title']]
    
    # Count the number of entries for each season
    season_counts = dataset['season'].value_counts()
    
    # Get the four seasons with the least number of entries
    least_four_seasons = season_counts.index[:4]
    
    return least_four_seasons.tolist()",category,"['Spring', 'Winter', 'Autumn', 'Summer']","['Spring', 'Winter', 'Autumn', 'Summer']"
List the top 3 scores in the dataset.,What are the top 3 scores in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	top_3_scores = dataset['score'].nlargest(3)
	return top_3_scores.tolist()",list,"[6015, 5771, 4338]","[6015, 5771, 4338]"
Name the bottom 5 title text lengths.,What are the five shortest title text lengths?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the 'title_gx_text_length' column
    title_lengths = db['title_gx_text_length']
    
    # Sort the text lengths in ascending order and get the top 5 values
    top_5_shortest = title_lengths.sort_values().head(5)
    
    # Convert the values to a list and return
    return top_5_shortest.tolist()",string,"[1.0, 2.0, 2.0, 2.0, 2.0]","[1.0, 2.0, 2.0, 2.0, 2.0]"
Identify the top 4 numbers of descendants.,What are the top 4 values in the 'descendants' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    top_descendants = dataset['descendants'].nlargest(4)
    return top_descendants.tolist()",float64,"[4576.0, 3678.0, 3676.0, 3463.0]","[4576.0, 3678.0, 3676.0, 3463.0]"
Provide the bottom 6 scores in the dataset.,What are the 6 lowest scores in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	six_lowest_scores = dataset['score'].nsmallest(6)
	return six_lowest_scores.tolist()",uint16,"[501, 501, 501, 501, 501, 501]","[501, 501, 501, 501, 501, 501]"
Are there any employees with more than 7 projects?,Are there any employees with more than 7 projects in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	num_projects_gt_7 = dataset['Number of Projects (uint8)'] > 7
	return num_projects_gt_7.any()",bool,-,False
Has any employee worked for more than 300 hours on average per month?,Are there any employees with an average monthly hours value greater than 300?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset to get employees with average monthly hours greater than 300
	filtered_data = db[db['Average Monthly Hours (uint16)'] > 300]

	# Check if there are any rows in the filtered data
	answer = not filtered_data.empty

	return answer",bool,-,True
Are all satisfaction levels above 0.5?,Are all satisfaction levels greater than 0.5?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	satisfaction_levels = dataset['Satisfaction Level']
	all_greater_than_05 = all(i > 0.5 for i in satisfaction_levels)

	return all_greater_than_05",bool,False,False
Were there any employees hired in 2019?,Were there any employees hired on a date in 2019?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to check for dates in 2019
    hired_in_2019 = dataset['Date Hired'].dt.year == 2019

    # Check if any employees were hired in 2019
    answer = hired_in_2019.any()

    return answer",bool,True,True
How many unique departments are there?,What is the count of distinct departments?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	distinct_departments = dataset['Department'].nunique()
	return distinct_departments",uint8,10,10
What's the maximum number of years an employee has been in the company?,What is the maximum value in the 'Years in the Company' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	max_years = dataset['Years in the Company'].max()
	return max_years",uint8,10,10
How many employees have been promoted in the last 5 years?,What is the total number of employees who have been promoted in the last 5 years?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	promoted_employees = dataset[dataset['Promoted in the last 5 years? (category)'] == 'Yes']
	total_promoted = promoted_employees.shape[0]

	return total_promoted",uint8,-,319
"On average, how many hours do employees work monthly?",What is the average of the 'Average Monthly Hours' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	average_monthly_hours = dataset['Average Monthly Hours'].mean()

	return average_monthly_hours",float64,201.0503366891126,201.05
Which department has the highest number of employees?,What is the department with the highest number of employees?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Group by department and count the number of employees in each department
	department_counts = dataset['Department'].value_counts()

	# Get the department with the highest count
	max_department = department_counts.idxmax()

	return max_department",category,sales,sales
What's the most common salary level among employees?,What is the most frequent salary category among the staff?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	salary_category = dataset['salary'].mode()
	return salary_category[0]",category,low,low
Which year had the highest number of employees hired?,What is the year with the maximum number of employees hired?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extract the year from the 'Date Hired' column
    db['Year'] = db['Date Hired'].dt.year
    
    # Group by year and count the number of employees hired
    year_counts = db['Year'].value_counts()
    
    # Find the year with the maximum count
    max_year = year_counts.idxmax()
    
    return max_year",uint8,2017,2017
Which salary level has the least number of employees who had an accident at work?,Which salary level has the fewest employees who had a work accident?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by salary and work accident
    salary_accident_group = dataset.groupby(['salary', 'Work Accident'])

    # Count the number of employees in each group
    employee_count = salary_accident_group.size()

    # Find the salary level with the fewest employees who had a work accident
    min_count_salary = employee_count.idxmin()

    # Get the salary level
    min_salary = min_count_salary[0]

    return min_salary",category,high,high
Name the top 4 departments with the most employees.,What are the names of the top 4 departments with the highest number of employees?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the relevant columns
    dataset = db[['Department', 'Number of Projects']]
    
    # Group by department and count the number of projects
    department_counts = dataset.groupby('Department').count()
    
    # Sort the departments by the number of projects in descending order
    sorted_departments = department_counts.sort_values('Number of Projects', ascending=False)
    
    # Get the top 4 departments
    top_4_departments = sorted_departments.head(4)
    
    # Get the department names
    top_departments_list = list(top_4_departments.index)
    
    return top_departments_list",string,"['sales', 'technical', 'support', 'IT']","['sales', 'technical', 'support', 'IT']"
List the 3 departments with the most number of promotions in the last 5 years that have at least one promotion. ,"Which are the top 3 departments with the highest number of promotions in the last 5 years, given that there is at least one promotion?","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only those who were promoted in the last 5 years
    promoted_df = dataset[dataset['Promoted in the last 5 years? (category)'] == 'Yes']
    
    # Group by department and count the number of promotions
    promotion_counts = promoted_df['Department (category)'].value_counts()
    
    # Get the top 3 departments with the highest number of promotions
    top_departments = list(promotion_counts.index[:3])
    
    return top_departments",list,-,"['hr', 'accounting', 'IT']"
Identify the 3 departments with the lowest average satisfaction levels.,What are the three departments with the lowest average satisfaction levels?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the relevant columns
    dataset = db[['Department', 'Satisfaction Level']]
    
    # Group by department and calculate the average satisfaction level
    avg_satisfaction = dataset.groupby('Department')['Satisfaction Level'].mean()
    
    # Find the three departments with the lowest average satisfaction levels
    lowest_depts = avg_satisfaction.nsmallest(3).index.tolist()
    
    return lowest_depts",category,"['accounting', 'hr', 'technical']","['accounting', 'hr', 'technical']"
What are the 2 departments with the lowest average monthly hours worked?,Which two departments have the lowest average monthly hours?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the relevant columns
    dataset = db[['Department', 'Average Monthly Hours']]
    
    # Group by department and calculate the average monthly hours
    avg_hours_by_dept = dataset.groupby('Department')['Average Monthly Hours'].mean()
    
    # Find the departments with the lowest average monthly hours
    lowest_depts = avg_hours_by_dept.nsmallest(2).index.tolist()
    
    return lowest_depts",category,"['hr', 'marketing']","['hr', 'marketing']"
Identify the top 3 years with the highest employee hiring.,What are the top 3 years with the highest number of employees hired?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by year and count the number of employees hired
    year_hires = dataset['Year'].value_counts()
    
    # Get the top 3 years
    top_3_years = year_hires.index[:3]
    
    return top_3_years.tolist()",int32,"[2017, 2018, 2016]","['2017', '2018', '2016']"
Which are the highest 3 satisfaction levels among employees who left?,What are the top 3 satisfaction levels of employees who have left the company?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter employees who have left the company
    left_employees = db[db['Left'] == 'Yes']

    # Sort by satisfaction level in descending order and get the top 3
    top_3_satisfaction = left_employees.nlargest(3, 'Satisfaction Level')['Satisfaction Level'].tolist()

    return top_3_satisfaction",float64,"[0.92, 0.92, 0.92]","[0.92, 0.92, 0.92]"
List the bottom 5 average monthly hours among employees who were promoted in the last 5 years.,What are the bottom 5 average monthly hours for employees promoted in the last 5 years?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    promoted_employees = dataset[dataset['Promoted in the last 5 years? (category)'] == 'yes']
    bottom_5_hours = promoted_employees['Average Monthly Hours (uint16)'].nsmallest(5)
    
    return bottom_5_hours.tolist()",list,-,"[215, 133, 159, 241, 247]"
Whhat are the top 6 last evaluation scores?,What are the top 6 values in the 'Last Evaluation' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    top_evaluations = dataset['Last Evaluation'].nlargest(6)
    return top_evaluations.tolist()",float64,"[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]","[1, 1, 1, 1, 1, 1]"
Did any incident result in the total destruction of the aircraft?,Were there any incidents where the aircraft was completely destroyed?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter incidents where the aircraft was completely destroyed
    destroyed_incidents = dataset[dataset['Aircaft_Damage_Type'] == 'destroyed']
    
    # Check if there are any incidents in the filtered dataset
    if destroyed_incidents.empty:
        return False
    else:
        return True",bool,False,True
Have there been any incidents where the cause was related to the undercarriage of the aircraft?,Were there any incidents where the cause was related to the undercarriage of the aircraft?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    undercarriage_related_incidents = dataset[dataset['Incident_Cause(es)'].str.contains('undercarriage', case=False)]
    
    if undercarriage_related_incidents.empty:
        return False
    else:
        return True",bool,True,True
Has there been any instance where the ground casualties were non-zero?,Were there any incidents with ground casualties?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    ground_casualties = dataset['Ground_Casualties'].dropna()
    ground_casualties_bool = ground_casualties.astype(bool).any()
    
    return ground_casualties_bool",bool,True,True
Are there incidents where the aircraft was involved in a collision?,Were there any incidents where the 'Incident_Category' column value was 'collision'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    incident_category_collision = dataset['Incident_Category'] == 'collision'
    return incident_category_collision.any()",bool,False,True
How many unique aircraft models are in the dataset?,What is the count of distinct aircraft models in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	distinct_models = dataset['Aircaft_Model'].nunique()
	return distinct_models",int64,3523,3523
What's the highest number of occupants recorded in an incident?,What is the maximum number of fatalities recorded in an incident?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	max_fatalities = dataset['Fatalities'].max()
	return max_fatalities",uint16,1692,524.0
How many incidents occurred in January 2022?,How many fatalities were there in January 2022?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for January 2022
    filtered_data = db[db['Incident_Date'].str.startswith('2022-01')]
    
    # Sum the fatalities
    total_fatalities = filtered_data['Fatalities'].sum()
    
    return total_fatalities",uint16,0,7
How many incidents resulted in non-zero fatalities?,What is the sum of the Fatalities column in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	fatalities_sum = db['Fatalities'].sum()
	return fatalities_sum",uint16,131987,0
Which aircraft model was involved in the most incidents?,What is the aircraft model with the highest number of incidents?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Group by aircraft model and count the incidents
	model_incident_counts = dataset['Aircaft_Model'].value_counts()

	# Get the model with the highest count
	max_incident_model = model_incident_counts.idxmax()

	return max_incident_model",category,Junkers Ju-52/3m,Junkers Ju-52/3m
What was the cause of the incident that resulted in the most fatalities?,What is the incident cause category that resulted in the highest number of fatalities?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by incident cause category and sum the fatalities
    incident_cause_fatalities = dataset.groupby('Incident_Cause(es)')[
        'Fatalities'].sum().reset_index()
    
    # Find the incident cause category with the highest fatalities
    max_fatalities_cause = incident_cause_fatalities.loc[incident_cause_fatalities['Fatalities'].idxmax(), 'Incident_Cause(es)']
    
    return max_fatalities_cause",category,Info-Unavailable,"Airplane - Pressurization, Airplane - Pressurization - Bulkhead failure, Airplane - Pressurization - Explosive decompression, Maintenance - (repair of) previous damage, Result - Loss of control"
What is the most common phase of aircraft during incidents?,What is the most frequent aircraft phase during incidents?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    aircraft_phase_counts = dataset['Aircraft_Phase'].value_counts()
    most_frequent_phase = aircraft_phase_counts.index[0]
    
    return most_frequent_phase",category,En route (ENR),En route (ENR)
What is the location of the incident with the highest number of onboard occupants?,What is the incident location where the maximum number of onboard occupants were present?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by incident location and sum the onboard total
    incident_location_occupants = dataset.groupby('Incident_Location')['Onboard_Total'].sum()
    
    # Find the incident location with the maximum number of onboard occupants
    max_occupancy_location = incident_location_occupants.idxmax()
    
    return max_occupancy_location",category,-,near Ueno Village...
What are the top 3 most common causes of incidents?,What are the top 3 incident causes in terms of frequency?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Create a dataframe from the dataset
    df = pd.DataFrame(db)
    
    # Get the column name for the incident cause
    incident_cause_col = 'Incident_Cause(es)'
    
    # Count the frequency of each incident cause
    incident_cause_counts = df[incident_cause_col].value_counts()
    
    # Get the top 3 incident causes
    top_3_causes = list(incident_cause_counts.index[:3])
    
    return top_3_causes",category,"['Info-Unavailable', 'Result - Runway excursion', 'Result - Damaged on the ground']","['Info-Unavailable', 'Result - Runway excursion', 'Result - Damaged on the ground']"
List the top 5 locations where the most incidents have occurred. If there are two or more with the same number order them alphabetically,"What are the top 5 incident locations, ordered by incident count and then alphabetically?","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    incident_locations = dataset['Incident_Location'].value_counts().index[:5]
    answer = list(incident_locations)
    return answer",string,"['unknown', 'Havana-José ...', 'Miami Intern...', 'Rio de Janei...', 'Beirut Inter...']","['Arnhem', 'Beirut International Airport (BEY)', 'Glasgow-Preswick Airport', 'Havana-José Martí International Airport (HAV)', 'Miami International Airport, FL (MIA)']"
Name the 2 most frequently occurring aircraft operators in the dataset.,What are the two most common aircraft operators in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    operator_counts = dataset['Aircaft_Operator'].value_counts()
    top_two_operators = list(operator_counts.index[:2])
    return top_two_operators",string,"['USAAF', 'USAF']","['USAAF', 'USAF']"
What are the top 2 most common types of aircraft damage?,What are the two most frequent aircraft damage types?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    damage_type_counts = dataset['Aircaft_Damage_Type'].value_counts()
    top_two_damage_types = list(damage_type_counts.index[:2])

    return top_two_damage_types",category,"['Damaged beyond repair', 'Substantial']","['Damaged beyond repair', 'Substantial']"
What are the 5 highest numbers of onboard passengers in incidents?,What are the top 5 categories of onboard passengers in incidents?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by 'Onboard_Passengers' and aggregate the count
    passenger_counts = dataset['Onboard_Passengers'].value_counts()
    
    # Get the top 5 categories
    top_5_categories = list(passenger_counts.index[:5])
    
    return top_5_categories",category,"['Fatalities: 0 / Occupants: 0', 'Fatalities:  / Occupants:', 'Fatalities: 0 / Occupants:', 'Fatalities: 0 / Occupants: 1', 'Fatalities: 1 / Occupants: 1']","[509.0, 503.0, 497.0, 451.0, 440.0]"
List the 3 highest numbers of onboard crew in incidents.,What are the top 3 onboard crew counts across all incidents?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	top_crew_counts = dataset['Onboard_Crew'].value_counts().head(3)
	top_3_counts = top_crew_counts.index.tolist()

	return top_3_counts",list,"['Fatalities:  / Occupants:', 'Fatalities: 0 / Occupants:', 'Fatalities: 0 / Occupants: 2']","[32.0, 31.0, 29.0]"
Identify the 4 highest numbers of total onboard occupants in incidents.,What are the top 4 highest values in the 'Onboard_Total' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    top_onboard_total = dataset['Onboard_Total'].nlargest(4)
    return top_onboard_total.tolist()",category,-,"[524.0, 521.0, 517.0, 469.0]"
What are the 6 highest numbers of ground casualties in incidents?,What are the top 6 ground casualty incidents?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    top_ground_casualties = dataset.nlargest(6, 'Ground_Casualties')['Incident_Cause(es)'].tolist()
    return [str(i) for i in top_ground_casualties]",category,-,"[1600, 900, 237, 107, 88, 87]"
"Are there any properties with a price over 1,000,000?","Are there any properties with a price greater than 1,000,000 in the 'Precio' column?","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	high_price_properties = dataset['Precio'] > 1000000
	return high_price_properties.any()",bool,True,True
Any property with more than 10 bedrooms?,Are there any properties with more than 10 bedrooms?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Assuming 'Habitaciones' is the column name for the number of bedrooms
    max_bedrooms = dataset['Habitaciones'].max()
    return max_bedrooms > 10",bool,True,True
Are there properties with zero bathrooms?,Are there any properties with the number of bathrooms equal to zero?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset to select rows with zero bathrooms
	zero_bathrooms = db[db['Baños'] == 0]

	# Check if the filtered dataset is empty
	if zero_bathrooms.empty:
		return False
	else:
		return True
",bool,False,False
Has any property been listed for more than 100 days?,Are there any properties with a listing duration of over 100 days?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter rows where 'Duración' is greater than 100
    long_duration_properties = db[db['Duración'] > 100]
    
    # Check if any rows are returned
    if long_duration_properties.empty:
        return False
    else:
        return True",bool,True,True
What's the highest price in the dataset?,What is the maximum value in the 'Precio' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	max_precio = dataset['Precio'].max()
	return max_precio",uint32,17000000,17000000.0
What's the total number of properties listed?,How many properties are there in total?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	total_properties = dataset.shape[0]
	return total_properties",uint32,26026,26026
What's the longest duration a property has been listed?,What is the maximum value in the 'Duración' column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	max_duracion = db['Duración'].max()
	return max_duracion",uint16,2535,2535.0
What's the largest surface listed?,What is the maximum value in the 'Superficie solar' column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	max_superficie_solar = db['Superficie solar'].max()
	return max_superficie_solar",uint32,261000,5504.0
What's the most common type of property listed?,What is the most frequent value in the 'Tipo' column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	tipo_counts = db['Tipo'].value_counts()
	most_frequent_tipo = tipo_counts.index[0]

	return most_frequent_tipo",category,Piso,Piso
Which advertiser has listed the most properties?,Which unique advertiser has the highest count of properties listed?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	advertiser_count = db['Anunciante'].value_counts()
	top_advertiser = advertiser_count.idxmax()

	return top_advertiser",category,housell,housell
Which property has the highest price?,What is the name of the property with the highest price?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	max_price_property = db.loc[db[""Precio""] == db[""Precio""].max()]
	property_name = max_price_property[""Referencia""].values[0]

	return property_name",category,GM31-121816,GM31-121816
Which property has the largest surface area?,What is the ID of the property with the largest surface area?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	max_surface_property = dataset.loc[dataset[""Superficie""] == dataset[""Superficie""].max()]
	property_id = max_surface_property[""Id""].values[0]

	return property_id",category,casa_rustica-navarredonda_buitrago-75050464421_101600,IF5563-FINCA VALLE LOZOYA
What are the five types of properties more frequently listed?,What are the top five property types in terms of frequency?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	# Extract the 'Tipo' column from the dataset
	property_types = db['Tipo']

	# Get the top 5 most frequent property types
	top_5_types = property_types.value_counts().head(5).index.tolist()

	return top_5_types",category,"['Piso', 'Chalet', 'Apartamento', 'Chalet adosado', 'Chalet unifamiliar']","['Piso', 'Chalet', 'Apartamento', 'Chalet adosado', 'Chalet unifamiliar']"
What are the 2 types of properties which are listed more frequently?,What are the top two property types with the highest frequency in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extract the 'Tipo' column as a series
    property_type_series = db['Tipo']
    
    # Get the frequency of each property type
    property_type_freq = property_type_series.value_counts()
    
    # Get the top two property types
    top_two_property_types = property_type_freq.index[:2].tolist()
    
    return top_two_property_types",category,"['Piso', 'Chalet']","['Piso', 'Chalet']"
What are the 2 most common localities for properties listed?,What are the top two localities for the listed properties?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	localities = db['Localidad'].value_counts()
	top_two_localities = list(localities.index[:2])

	return top_two_localities",category,"['Madrid Capital', 'Torrejón de Ardoz']","['Madrid Capital', 'Torrejón de Ardoz']"
What are the 2 most common districts for properties listed?,Which two districts have the highest number of property listings?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	district_counts = db['Distrito'].value_counts()
	top_two_districts = district_counts.nlargest(2).index.tolist()

	return top_two_districts",category,"['Centro', 'Salamanca']","['Centro', 'Salamanca']"
What are the 5 highest property prices listed?,What are the top 5 property listings with the highest prices?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset to get the top 5 listings by price
	top_5_listings = db.nlargest(5, 'Precio')

	# Extract the 'Referencia' column values
	top_5_references = top_5_listings['Referencia'].tolist()

	# Return the list of top 5 property references
	return top_5_references",category,"['GM31-121816', 'GM6-137857', 'GM6-126269', 'GM6-116396', 'XA195-19108-28VTC']","[17000000.0, 13600000.0, 13250000.0, 13000000.0, 12000000.0]"
List the 3 longest durations properties have been listed.,What are the top 3 durations for property listings?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the 'Duración' column
    duration_data = db['Duración']
    
    # Get the top 3 durations
    top_3_durations = duration_data.value_counts().head(3).index.tolist()
    
    return top_3_durations",object,"[10, 9, 13]","[2535.0, 2534.0, 2285.0]"
Identify the 4 largest surfaces listed.,What are the four largest surfaces in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset to get the 'Superficie' column
	surface_data = db[['Superficie']]

	# Sort the data in descending order and get the top 4 values
	top_4_surfaces = surface_data.sort_values(by='Superficie', ascending=False).head(4)

	# Convert the values to a list of strings
	top_4_surface_list = top_4_surfaces['Superficie'].astype(str).tolist()

	return top_4_surface_list",category,"['5504', '3957', '2974', '2927']","[5504.0, 3957.0, 2974.0, 2927.0]"
What are the 6 highest numbers of bedrooms in properties listed?,What are the top 6 values in the 'Habitaciones' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	top_6_habitaciones = dataset['Habitaciones'].value_counts().head(6).index.tolist()
	return top_6_habitaciones",uint8,"[3, 4, 2, 5, 1, 6]","[20, 20, 20, 20, 20, 20]"
Are there more than 2000 customers with a monthly charge higher than $80?,Are there more than 2000 customers with a MonthlyCharges value greater than 80?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get customers with MonthlyCharges greater than 80
    filtered_data = dataset[dataset['MonthlyCharges'] > 80]
    
    # Get the number of customers in the filtered dataset
    num_customers = len(filtered_data)
    
    # Check if the number of customers is greater than 2000
    answer = num_customers > 2000
    
    return answer",bool,True,True
Do all customers have phone service?,Are there any customers without phone service?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	no_phone_service = dataset[dataset['PhoneService'] == 'No']
	answer = True if len(no_phone_service) > 0 else False
	return answer",bool,True,True
Are there any customers with no internet service?,Are there any customers with InternetService set to 'No'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    internet_service_no = dataset['InternetService'] == 'No'
    return internet_service_no.any()",bool,True,True
Are there any customers who are senior citizens and have dependents?,Are there any customers who are senior citizens and have the 'Dependents' column value set to 'Yes'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	senior_dependents = dataset.loc[(dataset[""SeniorCitizen""] == 1) & (dataset[""Dependents""] == 'Yes')]

	return len(senior_dependents) > 0",bool,True,True
How many unique customers are there in the dataset?,What is the count of distinct customer IDs in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	distinct_customer_ids = dataset['customerID'].nunique()
	return distinct_customer_ids",int64,7043,7043
What's the highest monthly charge?,What is the maximum value in the 'MonthlyCharges' column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	max_monthly_charge = db['MonthlyCharges'].max()
	return max_monthly_charge",float64,118.75,118.75
What's the total number of customers?,How many unique customer IDs are there in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	unique_customer_ids = dataset['customerID'].nunique()
	return unique_customer_ids",uint64,7043,7043
What's the longest tenure?,What is the maximum tenure value in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	max_tenure = dataset['tenure'].max()
	return max_tenure",uint8,72,72
What's the most common payment method?,Which payment method is the most frequent in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	payment_method_counts = dataset['PaymentMethod'].value_counts()
	most_frequent_method = payment_method_counts.index[0]

	return most_frequent_method",category,Electronic check,Electronic check
What's the most common contract type?,Which contract type is the most frequent in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	contract_type = db['Contract'].mode()
	return contract_type[0]",category,Month-to-month,Month-to-month
Which customer has the highest total charge?,Which customerID has the highest total charge?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	max_charge_customer = db.loc[db['TotalCharges'] == db['TotalCharges'].max()]
	customer_id = max_charge_customer['customerID'].values[0]

	return customer_id",category,2889-FPWRM,2889-FPWRM
Which customer has the highest monthly charge?,Which customerID has the highest MonthlyCharges?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	max_charge_customer = db.loc[db['MonthlyCharges'] == db['MonthlyCharges'].max()]
	customer_id = max_charge_customer['customerID'].values[0]

	return customer_id",category,7569-NMZYQ,7569-NMZYQ
What are the top 3 most common internet services?,What are the three most frequent internet services?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	internet_service_counts = db['InternetService'].value_counts()
	top_3_services = list(internet_service_counts.index[:3])

	return top_3_services",category,"['Fiber optic', 'DSL', 'No']","['Fiber optic', 'DSL', 'No']"
Name the 4 most common payment methods.,What are the top 4 payment methods used by customers?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    payment_methods = db['PaymentMethod'].value_counts()[:4].index.tolist()
    answer = [str(method) for method in payment_methods]
    return answer",category,"['Electronic check', 'Mailed check', 'Bank transfer (automatic)', 'Credit card (automatic)']","['Electronic check', 'Mailed check', 'Bank transfer (automatic)', 'Credit card (automatic)']"
What are the 2 most common types of contract?,What are the two most frequent contract types?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	contract_type_counts = db['Contract'].value_counts()
	top_2_contract_types = list(contract_type_counts.index[:2])

	return top_2_contract_types",category,"['Month-to-month', 'Two year']","['Month-to-month', 'Two year']"
What are the 2 most common services for which customers have multiple lines?,What are the top 2 services that customers have multiple lines for?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    multiple_lines_services = dataset[dataset['MultipleLines'] == 'Yes']['InternetService'].value_counts().index[:2].tolist()
    return multiple_lines_services",category,"['Fiber optic', 'DSL']","['No', 'Yes']"
What are the 5 highest total charges?,What are the top 5 values in the 'TotalCharges' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    top_5_charges = dataset['TotalCharges'].nlargest(5)
    return top_5_charges.tolist()",float64,"[8684.8, 8672.45, 8670.1, 8594.4, 8564.75]","[8684.8, 8672.45, 8670.1, 8594.4, 8564.75]"
What are the 4 highest monthly charges?,What are the top 4 values in the 'MonthlyCharges' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    top_monthly_charges = dataset['MonthlyCharges'].nlargest(4)
    return top_monthly_charges.tolist()",float64,"[118.75, 118.65, 118.6, 118.6]","[118.75, 118.65, 118.6, 118.6]"
What are the 6 longest tenures?,List the top 6 tenures.,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    top_tenures = db['tenure'].nlargest(6)
    return top_tenures.tolist()",list,"[72, 72, 72, 72, 72, 72]","[72, 72, 72, 72, 72, 72]"
What are the 3 shortest tenures?,What are the three lowest tenure values?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	tenure_values = db['tenure'].nsmallest(3)
	return tenure_values.tolist()",uint8,"[0, 0, 0]","[0, 0, 0]"
Is there a listing with a review score rating of 100?,Are there any listings with a review score rating of 100?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Check if there are any listings with a review score rating of 100
	max_review_score = dataset['review_scores_rating'].max()
	is_perfect_score = max_review_score == 100

	return is_perfect_score",bool,True,True
Are there any hosts who have listed more than 10 properties?,Are there any hosts with a host_total_listings_count greater than 10?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	hosts_with_more_listings = dataset[dataset['host_total_listings_count'] > 10]
	return not hosts_with_more_listings.empty",bool,True,True
Are all listings instantly bookable?,Are all listings in the dataset marked as instantly bookable?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	instant_bookable_count = dataset['instant_bookable'].value_counts()
	all_bookable = (instant_bookable_count[True] == len(dataset))

	return all_bookable",bool,-,False
Is there a listing that requires a minimum of 365 nights?,Are there any listings with a minimum_nights value of 365?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Check if there are any listings with minimum_nights value of 365
	result = dataset['minimum_nights'].eq(365).any()

	return result",bool,True,True
How many unique hosts are there in the dataset?,What is the count of distinct host IDs in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	host_ids = dataset['host_id'].unique()
	host_id_count = len(host_ids)

	return host_id_count",uint32,26765,26765
What is the highest number of listings a single host has?,What is the maximum value of the 'host_total_listings_count' column in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	max_host_listings = dataset['host_total_listings_count'].max()
	return max_host_listings",uint32,2739.0,2739.0
How many unique locations are listed by the hosts?,What is the count of distinct host locations?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	host_locations = dataset['host_location'].unique()
	host_location_count = len(host_locations)

	return host_location_count",uint32,1317,1316
What is the average review score rating across all listings?,What is the mean of the review scores rating column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	mean_review_score = dataset['review_scores_rating'].mean()
	return mean_review_score",float64,93.76718825858012,93.767188
What is the most common host location?,What is the most frequent host location?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	host_location_counts = dataset['host_location'].value_counts()
	most_frequent_location = host_location_counts.index[0]

	return most_frequent_location",category,"New York, New York, United States","New York, New York, United States"
What is the name of the listing with the most bedrooms?,Which listing has the maximum number of bedrooms?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	max_bedrooms_listing = dataset.loc[dataset[""bedrooms""] == dataset[""bedrooms""].max()]
	listing_name = max_bedrooms_listing[""name""].values[0]

	return listing_name",string,"Walk to UN, Macy's & Empire State B","Walk to UN, Macy's & Empire State B"
Which location has the highest number of listings?,What is the host location with the highest number of listings?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Group by host location and count the number of listings
	host_location_counts = dataset['host_location'].value_counts()

	# Get the host location with the highest count
	max_listings_location = host_location_counts.idxmax()

	return max_listings_location",category,"New York, New York, United States","New York, New York, United States"
What is the most common property type?,What is the most frequent property type?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    property_type_counts = db['property_type'].value_counts()
    most_frequent_property_type = property_type_counts.idxmax()

    return most_frequent_property_type",category,Entire apartment,Entire apartment
What are the top 6 unique host locations with the most listings?,What are the top 6 host locations with the highest number of listings?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by host location and count the number of listings
    host_location_counts = dataset['host_location'].value_counts()
    
    # Get the top 6 host locations
    top_host_locations = list(host_location_counts.index[:6])
    
    return top_host_locations",string,"['New York, New York, United States', 'US', 'Brooklyn, New York, United States', 'Queens, New York, United States', 'Los Angeles, California, United States', 'Bronx, New York, United States']","['New York, New York, United States', 'US', 'Brooklyn, New York, United States', 'Queens, New York, United States', 'Los Angeles, California, United States', 'Bronx, New York, United States']"
What are the 2 unique host locations with the most listings?,What are the two distinct host locations with the highest number of listings?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by host location and count the number of listings
    host_location_counts = dataset['host_location'].value_counts()
    
    # Get the two most common host locations
    top_two_locations = host_location_counts.nlargest(2).index.tolist()
    
    return top_two_locations",string,"['New York, New York, United States', 'US']","['New York, New York, United States', 'US']"
List the 4 most common property types.,What are the top 4 property types?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	property_types = dataset['property_type'].value_counts()
	top_4_property_types = list(property_types.index[:4])

	return top_4_property_types",category,"['Entire apartment', 'Private room in apartment', 'Private room in house', 'Private room in townhouse']","['Entire apartment', 'Private room in apartment', 'Entire condominium', 'Entire house']"
What are the 2 most common types of properties?.,What are the two most frequent property types?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	property_type_counts = db['property_type'].value_counts()
	top_two_types = property_type_counts.index[:2].tolist()

	return top_two_types",category,"['Entire apartment', 'Private room in apartment']","['Entire apartment', 'Private room in apartment']"
What are the top 3 highest review score ratings?,What are the top 3 highest values in the review_scores_rating column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	top_3_scores = dataset['review_scores_rating'].nlargest(3)
	return top_3_scores.tolist()",float64,"[100.0, 100.0, 100.0]","[100, 100, 100]"
What are the 5 lowest number of minimum nights required?,What are the 5 lowest values in the 'minimum_nights' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    min_nights = dataset['minimum_nights'].nsmallest(5)
    return min_nights.tolist()",uint16,"[1, 1, 1, 1, 1]","[1, 1, 1, 1, 1]"
What are the 4 highest unique number of bedrooms listed?,What are the top 4 unique values in the 'bedrooms' column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	# Filter the 'bedrooms' column and remove null values
	bedrooms_column = db['bedrooms'].dropna()

	# Get the unique values and sort them in descending order
	unique_values = bedrooms_column.unique()
	unique_values.sort(reverse=True)

	# Get the top 4 unique values
	top_unique_values = unique_values[:4]

	return top_unique_values",uint8,-,"[21, 14, 13, 11]"
What are the 6 lowest review scores given because of locations?,What are the 6 lowest values in the 'review_scores_location' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset to get the 'review_scores_location' column
	review_scores_location = dataset['review_scores_location']

	# Get the 6 lowest values
	lowest_values = review_scores_location.nsmallest(6)

	return lowest_values.tolist()",float64,"[2.0, 2.0, 2.0, 2.0, 2.0, 2.0]","[2, 2, 2, 2, 2, 2]"
Was there a day when the minimum temperature was below zero and it didn't rain?,Were there any days with a minimum temperature below zero and no precipitation?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter rows with minimum temperature below zero and no precipitation
    filtered_rows = db[(db['tmin'] < 0) & (db['prec'] == 0)]

    # Check if there are any rows in the filtered DataFrame
    if filtered_rows.empty:
        return False
    else:
        return True
",bool,True,True
Are there records where the solar radiation exceeds 10 but the maximum temperature was below 20?,Are there any records where the 'sol' column value is greater than 10 and the 'tmax' column value is less than 20?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	filtered_data = dataset[(dataset['sol'] > 10) & (dataset['tmax'] < 20)]
	answer = not filtered_data.empty

	return answer
",bool,True,True
Did any day with maximum wind speed above 15 also have average wind speed below 5?,Were there any days with a maximum wind speed greater than 15 and an average wind speed less than 5?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get rows where maximum wind speed is greater than 15
    max_wind_filter = dataset['racha'] > 15
    max_wind_data = dataset[max_wind_filter]

    # Check if there are any days with average wind speed less than 5 in the filtered data
    avg_wind_filter = max_wind_data['velmedia'] < 5
    result = avg_wind_filter.any()

    return result
",bool,True,True
Were there days in the summer where the minimum temperature dropped below 10?,Did the minimum temperature ever fall below 10 during the summer months?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter summer months
    summer_months = ['June', 'July', 'August']
    df_summer = db[db['month_name'].isin(summer_months)]
    
    # Check if any tmin value is below 10
    min_temp_below_10 = df_summer['tmin'].min() < 10
    
    return min_temp_below_10",bool,True,True
How many days had a maximum temperature above 30 degrees?,How many days have a tmax value greater than 30?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	num_days = dataset[dataset['tmax'] > 30].shape[0]
	return num_days",int64,5500,5500
"On average, what's the minimum temperature during winters?",What is the average of the minimum temperature during the winter season?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter data for winter season
    winter_data = dataset[dataset['season'] == 'Winter']
    
    # Calculate the average of the minimum temperature
    avg_tmin = winter_data['tmin'].mean()
    
    return avg_tmin",float64,2.7196082770831027,2.7196082770831027
How many unique days had solar radiation measurements?,How many distinct days are there in the 'fecha' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	distinct_days = dataset['fecha'].nunique()

	return distinct_days",uint16,36858,28615
What's the highest wind speed ever recorded?,What is the maximum value in the 'racha' column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	max_racha = db['racha'].max()
	return max_racha",float64,32.2,32.2
On which weekday did the highest temperature ever occur?,What is the weekday name on which the highest temperature was recorded?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the data to find the row with the highest temperature
    max_temp_row = db[db['tmax'] == db['tmax'].max()]
    
    # Extract the weekday name from the filtered row
    weekday_name = max_temp_row['weekday_name'].values[0]
    
    return weekday_name",string,Friday,Friday
In which season do we find the highest average solar radiation?,What is the average solar radiation in the season with the highest average solar radiation?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the relevant columns
    dataset = db[['season', 'sol']]

    # Group by season and calculate the average solar radiation
    season_avg_sol = dataset.groupby('season')['sol'].mean()

    # Find the season with the highest average solar radiation
    max_season = season_avg_sol.idxmax()

    # Get the average solar radiation for that season
    avg_sol_max_season = season_avg_sol[max_season]

    return avg_sol_max_season",float64,11.26350823332403,Summer
Which month had the lowest average wind speed?,Which month has the lowest average wind speed?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extract column names and data types from the schema
    columns = [col.split('(')[0].strip() for col in datasetTableSchema.split(', ')]
    dtypes = [col.split('(')[1].split(')')[0] for col in datasetTableSchema.split(', ')]

    # Create a dictionary to map column names to data types
    dtype_map = {col: dtype for col, dtype in zip(columns, dtypes)}

    # Convert the 'fecha' column to a datetime object and extract the month
    db['month'] = pd.to_datetime(db['fecha']).dt.month

    # Group by month and calculate the average wind speed
    avg_wind_speed = db.groupby('month')['velmedia'].mean()

    # Find the month with the lowest average wind speed
    min_wind_month = avg_wind_speed.idxmin()

    # Get the corresponding month name
    min_wind_month_name = db[db['month'] == min_wind_month]['month_name'].values[0]

    return min_wind_month_name",category,-,October
On what date was the highest pressure ever recorded?,What is the date when the highest pressure was recorded?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_pressure_date = dataset.loc[dataset['presMax'] == dataset['presMax'].max(), 'fecha'].values[0]
    return max_pressure_date","datetime64[us, UTC]",2016-12-22T00:00:00.000000,2016-12-22T00:00:00Z
What are the top 3 months with the highest average maximum temperatures?,Which are the top 3 months with the highest average maximum temperatures?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Extract the column name for tmax
    tmax_col = [col for col in datasetTableSchema if 'tmax' in col.lower()][0]
    
    # Group by month and calculate the average maximum temperature
    monthly_avg_tmax = db.groupby('month_name')[tmax_col].mean()
    
    # Sort the values in descending order and get the top 3 months
    top_3_months = monthly_avg_tmax.sort_values(ascending=False)[:3].index.tolist()
    
    return top_3_months",category,-,"['July', 'August', 'June']"
"Which are the 5 weekdays with the most rain, ranked from highest to lowest?",What are the top 5 weekdays with the highest rainfall?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Convert the schema to a dictionary
    schema_dict = {col.split(' (')[0]: col.split(' (')[1].strip(')') for col in datasetTableSchema.split(', ')}
    
    # Get the column name for rainfall
    rain_col = 'prec'
    
    # Get the column name for weekdays
    weekday_col = 'weekday_name'
    
    # Filter the data to get the top 5 weekdays with highest rainfall
    top_weekdays = db[[weekday_col, rain_col]].groupby(weekday_col).sum().sort_values(by=rain_col, ascending=False).head(5).index.tolist()
    
    return top_weekdays",object,-,"['Friday', 'Sunday', 'Saturday', 'Thursday', 'Wednesday']"
"List the 4 seasons ranked by average solar radiation, from highest to lowest.",What are the four seasons ranked by average solar radiation in descending order?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get relevant columns
    dataset = db[['season', 'sol']]
    
    # Group by season and calculate the average solar radiation
    season_avg_sol = dataset.groupby('season')['sol'].mean().reset_index()
    
    # Sort the values in descending order and get the season names
    ranked_seasons = season_avg_sol.sort_values('sol', ascending=False)['season'].tolist()
    
    return ranked_seasons",string,"['Summer', 'Spring', 'Autumn', 'Winter']","['Summer', 'Spring', 'Autumn', 'Winter']"
Which 2 months recorded the lowest average minimum temperatures?,What are the two months with the lowest average minimum temperature?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Convert the 'fecha' column to a datetime object
    dataset['fecha'] = pd.to_datetime(dataset['fecha'])
    
    # Extract the month from the 'fecha' column
    dataset['month'] = dataset['fecha'].dt.month
    
    # Group by month and calculate the average minimum temperature
    avg_min_temp_by_month = dataset.groupby('month')['tmin'].mean()
    
    # Find the two months with the lowest average minimum temperature
    two_lowest_months = avg_min_temp_by_month.nsmallest(2).index.tolist()
    
    # Convert month numbers to month names
    month_names = [date.strftime('%B') for date in pd.to_datetime(two_lowest_months, format='%m', errors='ignore')]
    
    return month_names",category,"['January', 'December']","['January', 'December']"
List the top 5 recorded maximum temperatures.,What are the top 5 highest temperatures recorded?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	top_5_tmax = dataset.nlargest(5, 'tmax')['tmax'].tolist()
	return top_5_tmax",list,"[40.7, 40.6, 40.0, 40.0, 40.0]","[40.7, 40.6, 40.0, 40.0, 40.0]"
What are the 4 lowest wind speeds ever recorded?,What are the 4 lowest values of the 'racha' column in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    df = db
    racha_values = df['racha'].nsmallest(4)
    return racha_values.tolist()",float64,"[0.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 0.0]"
Rank the highest 3 solar radiation measurements.,What are the top 3 highest solar radiation measurements?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the 'sol' column
    sol_values = db['sol']
    
    # Sort the values in descending order and get the top 3
    top_3_solar_radiation = sol_values.sort_values(ascending=False)[:3]
    
    # Return the list of top 3 values
    return top_3_solar_radiation.tolist()",float64,"[14.9, 14.8, 14.7]","[14.9, 14.8, 14.7]"
Which 6 days of the year (numbered from 1 to 365/366) had the highest average temperatures?,What are the dates of the 6 days of the year with the highest average temperatures?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the required columns
    required_columns = ['fecha', 'tmed']
    df = db[required_columns]

    # Sort the data by tmed in descending order and get the top 6 rows
    top_6_days = df.sort_values(by='tmed', ascending=False).head(6)

    # Return the list of dates
    return top_6_days['fecha'].tolist()
","datetime64[us, UTC]","[Timestamp('2018-08-03 00:00:00+0000', tz='UTC'), Timestamp('2017-06-17 00:00:00+0000', tz='UTC'), Timestamp('2012-08-10 00:00:00+0000', tz='UTC'), Timestamp('2019-06-28 00:00:00+0000', tz='UTC'), Timestamp('1993-08-20 00:00:00+0000', tz='UTC'), Timestamp('1995-07-20 00:00:00+0000', tz='UTC')]","[209, 210, 208, 207, 211, 205]"
"Are there records where the RETRINOIN_xRZI exceeds 10,000?","Are there any entries in the dataset where the RETRINOIN_xRZI value is greater than 10,000?","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset based on the condition
	filtered_data = dataset[dataset['RETRINOIN_xRZI'] > 10000]
	
	# Check if the filtered dataset is empty
	if filtered_data.empty:
		return False
	else:
		return True",bool,True,True
Are there any female respondents who belong to the ESTE NUTS1 region?,Are there any female respondents with the NUTS1 category set to 'ESTE'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    female_respondents = dataset[dataset['SEXO'] == 'F']
    este_category = female_respondents[female_respondents['NUTS1'] == 'ESTE']
    
    return not este_category.empty",bool,False,True
Do we have respondents who fall under both PRIVADO control and NACIONAL market?,Are there any respondents with the CONTROL category set to 'PRIVADO' and the MERCADO category set to 'NACIONAL'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    filtered_data = dataset[(dataset['CONTROL'] == 'PRIVADO') & (dataset['MERCADO'] == 'NACIONAL')]
    
    if filtered_data.empty:
        return False
    else:
        return True",bool,True,True
"Are there records with RETRINOIN_WwQk less than 5,000?",Are there any records where the RETRINOIN_WwQk value is less than 5000?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset based on the condition
    filtered_data = dataset[dataset['RETRINOIN_WwQk'] < 5000]
    
    # Check if there are any records in the filtered data
    if filtered_data.empty:
        return False
    else:
        return True",bool,True,True
How many unique respondents belong to the ESTE NUTS1 region?,What is the count of distinct respondents from the ESTE NUTS1 region?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for the ESTE NUTS1 region
    filtered_data = dataset[dataset['NUTS1'] == 'ESTE']
    
    # Count the number of distinct respondents
    distinct_respondents = filtered_data['RESPONSA'].nunique()
    
    return distinct_respondents",int64,2,58852
"On average, what's the RETRINOIN value for male respondents?",What is the average RETRINOIN value for male respondents?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter dataset for male respondents
    male_respondents = dataset[dataset['SEXO'] == 'M']
    
    # Calculate the average RETRINOIN value
    average_retrin = male_respondents['RETRINOIN'].mean()
    
    return average_retrin",float64,,29370.243704368546
What's the highest value for RETRINOIN_ac1q in the dataset?,What is the maximum value of the column RETRINOIN_ac1q in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	max_value = dataset['RETRINOIN_ac1q'].max()
	return max_value",float64,199496.34,199496.34
How many unique clusters are present in the 'umap_cluster' column?,What is the count of distinct values in the 'umap_cluster' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	unique_clusters = dataset['umap_cluster'].nunique()
	return unique_clusters",int64,73,73
Which 'ANOS2' category has the most number of respondents?,What is the most frequent category in the 'ANOS2' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	anos2_category = dataset['ANOS2'].mode()

	return anos2_category.values[0]",category,DE 40 A 49,DE 40 A 49
In which 'NUTS1' region do we find the highest average RETRINOIN?,Which 'NUTS1' region has the highest average 'RETRINOIN' value?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Group by 'NUTS1' and calculate the mean 'RETRINOIN'
	mean_retri_by_nuts1 = dataset.groupby('NUTS1')['RETRINOIN'].mean()

	# Find the region with the highest average
	max_avg_region = mean_retri_by_nuts1.idxmax()

	return max_avg_region",category,COMUNIDAD DE MADRID,COMUNIDAD DE MADRID
Which 'MERCADO' category is the least common in the dataset?,What is the least frequent value in the 'MERCADO' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	mercado_value_counts = dataset['MERCADO'].value_counts()
	least_frequent_value = mercado_value_counts.idxmin()

	return least_frequent_value",category,UNIÓN EUROPEA,UNIÓN EUROPEA
Which 'umap_cluster' is the most dominant in the dataset?,What is the most common value in the 'umap_cluster' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	most_common_cluster = dataset['umap_cluster'].mode()
	return most_common_cluster.iloc[0]",category,Cluster 1,Cluster 1
Which are the 2 least common age categories in the dataset?,What are the two least frequent values in the 'ANOS2' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	anos2_counts = dataset['ANOS2'].value_counts()
	least_frequent_values = anos2_counts.index[:2].tolist()

	return least_frequent_values",category,"['DE 40 A 49', 'DE 50 A 59']","['MENOS 19 AÑOS', 'MÁS DE 59']"
Which are the 3 least common 'ANOS2' categories in the dataset?,What are the three least frequent categories in the 'ANOS2' column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	anos2_counts = db['ANOS2'].value_counts()
	least_frequent_categories = anos2_counts.index[:3].tolist()

	return least_frequent_categories",category,"['DE 40 A 49', 'DE 50 A 59', 'DE 30 A 39']","['MENOS 19 AÑOS', 'MÁS DE 59', 'DE 20 A 29']"
List the top 5 'NUTS1' regions by frequency.,What are the top 5 'NUTS1' regions in terms of frequency?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	top_5_regions = dataset['NUTS1'].value_counts().head(5).index.tolist()
	return top_5_regions",category,"['ESTE', 'COMUNIDAD DE MADRID', 'NORESTE', 'SUR', 'CENTRO']","['ESTE', 'COMUNIDAD DE MADRID', 'NORESTE', 'SUR', 'CENTRO']"
Which 2 'umap_cluster' categories are the least represented?,What are the two least represented categories in the 'umap_cluster' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    umap_cluster_counts = dataset['umap_cluster'].value_counts()
    least_represented = umap_cluster_counts.index[[-2, -1]]

    return least_represented.tolist()",category,"['Cluster 70', 'Cluster 72']","['Cluster 71', 'Cluster 73']"
List the top 5 recorded RETRINOIN values.,What are the top 5 RETRINOIN values in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    top_5_values = dataset['RETRINOIN'].nlargest(5)
    return top_5_values.tolist()",float64,"[4225998.36, 4153877.05, 4021902.63, 3903390.45, 2192967.2]","[4225998.36, 4153877.05, 4021902.63, 3903390.45, 2192967.2]"
What are the 4 lowest x values in the dataset?,What are the 4 lowest values in the 'x' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	x_values = dataset['x'].nsmallest(4)
	return x_values.tolist()",float64,"[-23714.217, -23706.5, -23698.271, -23697.166]","[-23714.217, -23706.5, -23698.271, -23697.166]"
Rank the highest 3 y values in the dataset.,What are the top 3 y values in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	top_3_y_values = dataset['y'].nlargest(3)
	return top_3_y_values.tolist()
",float64,"[28352.02, 28313.926, 28283.78]","[28352.02, 28313.926, 28283.78]"
What are the largest 2 y values in the dataset?.,What are the second and third highest values of the column 'y' in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    y_values = dataset['y'].tolist()
    y_values.sort(reverse=True)
    second_highest = y_values[1]
    third_highest = y_values[2]
    return [second_highest, third_highest]",float64,"[28313.926, 28283.78]","[28352.02, 28313.926]"
Is the most visited URL related to 'no code data science'?,Does the URL with the highest ranking belong to the 'no code data science' category?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_rank_url = dataset.loc[dataset[""Ranking""] == dataset[""Ranking""].max()]
    category = max_rank_url[""Keyword""].values[0]

    return category == 'no code data science'",bool,False,True
Does any URL have a competition level of 'Low'?,Are there any URLs with a competition level of 'Low'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    low_competition_urls = dataset[dataset['Competition (category)'] == 'Low']
    
    if low_competition_urls.empty:
        return False
    else:
        return True",bool,-,True
Are there any URLs with an average monthly searches above 1000?,Are there any URLs with an average monthly search value greater than 1000?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    high_search_urls = dataset[dataset['Avg. monthly searches (uint8)'] > 1000]
    
    if high_search_urls.empty:
        return False
    else:
        return True",bool,-,False
Is the URL with the lowest ranking also the one with the highest monthly searches?,Does the URL with the lowest ranking have the highest average monthly searches?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Get the URL with the lowest ranking
    lowest_ranking_url = dataset.loc[dataset[""Ranking""] == dataset[""Ranking""].min()]
    # Get the average monthly searches for the lowest ranking URL
    lowest_ranking_searches = lowest_ranking_url[""Avg. monthly searches""].values[0]
    
    # Get the URL with the highest average monthly searches
    highest_searches_url = dataset.loc[dataset[""Avg. monthly searches""] == dataset[""Avg. monthly searches""].max()]
    # Get the ranking for the highest average monthly searches URL
    highest_searches_ranking = highest_searches_url[""Ranking""].values[0]
    
    # Check if the lowest ranking URL has the highest average monthly searches
    if lowest_ranking_searches == highest_searches_url[""Avg. monthly searches""].values[0] and lowest_ranking_ranking == highest_searches_ranking:
        return True
    else:
        return False",bool,-,True
How many unique URLs are in the dataset?,What is the count of distinct URLs in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	unique_urls = dataset[""URLs""].nunique()

	return unique_urls",int64,28,28
What is the lowest ranking value in the dataset?,What is the minimum value in the 'Ranking' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	min_rank = dataset['Ranking'].min()
	return min_rank",uint8,1,11
What is the minimum average monthly searches in the dataset?,What is the minimum value in the 'Avg. monthly searches' column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	min_searches = db['Avg. monthly searches'].min()
	return min_searches",uint8,50,50
How many unique keywords are present in the dataset?,What is the count of distinct keywords in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	distinct_keywords = dataset['Keyword'].nunique()

	return distinct_keywords",int64,6,6
What is the competition level of the highest-ranked URL?,What is the competition level of the URL with the highest ranking?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_rank_url = dataset.loc[dataset[""Ranking""] == dataset[""Ranking""].max()]
    competition = max_rank_url[""Competition""].values[0]

    return competition",category,Low,Medium
What keyword has the highest average monthly searches?,Which keyword has the highest average monthly searches?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_searches = dataset['Avg. monthly searches'].max()
    keyword_with_max_searches = dataset.loc[dataset['Avg. monthly searches'] == max_searches, 'Keyword'].values[0]
    
    return keyword_with_max_searches",uint8,no code data science,no code data science
What is the competition level for the URL with the highest ranking?,What is the competition level for the URL with the highest ranking value?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_rank_url = dataset.loc[dataset[""Ranking""] == dataset[""Ranking""].max()]
    competition = max_rank_url[""Competition""].values[0]

    return competition
",category,Low,Low
What keyword is associated with the URL with the lowest ranking?,What is the keyword associated with the URL that has the lowest ranking?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    min_rank_url = dataset.loc[dataset[""Ranking""] == dataset[""Ranking""].min()]
    keyword = min_rank_url[""Keyword""].values[0]

    return keyword",category,no code data science,no code data science
What are the top 3 URLs with the highest average monthly searches?,What are the top 3 URLs with the highest average monthly searches?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the top 3 URLs with the highest average monthly searches
    top_3_urls = db.nlargest(3, 'Avg. monthly searches (uint8)')['URLs (category)'].tolist()

    return top_3_urls",category,-,"['https://www.obviously.ai/', 'https://venturebeat.com/2021/10/12/no-code-ai-startup-obviously-ai-raises-4-7m/', 'https://hbr.org/2021/11/how-no-code-platforms-could-disrupt-the-it-industry']"
List the bottom 2 competition levels of URLs with ranking better than 5.,What are the bottom two competition levels of URLs with a ranking better than 5?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter rows with ranking better than 5
    filtered_data = db[db['Ranking (uint8)'] > 5]
    
    # Get the bottom two competition levels
    bottom_two_competitions = filtered_data['Competition (category)'].nsmallest(2)
    
    return bottom_two_competitions.tolist()",list,-,"['Medium', 'Unknown']"
Which are the 4 keywords associated with the URLs of lowest rankings?,What are the keywords associated with the four URLs with the lowest rankings?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset to get the four lowest rankings
	lowest_rankings = dataset.nsmallest(4, 'Ranking')
	# Extract the keywords from these rankings
	keywords = lowest_rankings['Keyword'].tolist()

	return keywords",category,"['no code data science', 'no code data analytics', 'no code analytics', 'no code data science tools']","['no code data science', 'no code data analytics', 'no code data science', 'no code data science']"
Enumerate the 3 URLs with the highest ranking.,What are the top 3 URLs by ranking?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    top_3_urls = dataset['URLs'].head(3)
    return top_3_urls.tolist()",category,"['https://www.obviously.ai/', 'https://venturebeat.com/2021/10/12/no-code-ai-analytics-may-soon-automate-data-science-jobs/', 'https://hbr.org/2021/11/how-no-code-platforms-can-bring-ai-to-small-and-midsize-businesses']","['https://www.obviously.ai/', 'https://www.obviously.ai/', 'https://venturebeat.com/2021/10/12/no-code-ai-startup-obviously-ai-raises-4-7m/']"
What are the lowest 4 rankings associated with the keyword 'no code data science'?,What are the four lowest rankings for the keyword 'no code data science'?,,list of strings,-,"[10, 9, 8, 7]"
List the bottom 3 average monthly searches for URLs with medium competition.,What are the URLs with the three lowest average monthly searches that have medium competition?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter rows with medium competition
    medium_competition_data = db[db['Competition (category)'] == 'medium']
    
    # Sort by average monthly searches and get the bottom 3 URLs
    lowest_search_urls = medium_competition_data.nsmallest(3, 'Avg. monthly searches (uint8)')['URLs (category)'].tolist()
    
    return lowest_search_urls",list,-,"[50, 50, 50]"
Provide the lowest 5 rankings of URLs with low competition (if any).,What are the URLs of the 5 lowest ranked entries with low competition?,,string,-,"[11, 10, 10, 9, 9]"
Specify the bottom 2 average monthly searches for URLs with the highest rankings.,What are the bottom two URLs with the highest rankings in terms of average monthly searches?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the bottom two URLs with the highest rankings
    filtered_data = db[db['Ranking'] == db['Ranking'].max()].head(2)
    
    # Get the URLs from the filtered data
    urls = filtered_data['URLs'].tolist()
    
    # Return the URLs as a list of strings
    return urls",string,"['https://www.nocodelytics.com/no-code-analytics', 'https://www.akkio.com/post/the-complete-no-code-ai-guide-exploring-26-no-code-ai-tools']","[50, 50]"
Is there any wine with a quality rating of 10?,Are there any wines with a quality rating of 10?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	# Filter the wines with quality rating of 10
	quality_10_wines = db[db['quality'] == 10]

	# Check if there are any wines with quality 10
	answer = not quality_10_wines.empty

	return answer",bool,False,False
Are there any wines with residual sugar above 15g/dm^3?,Are there any wines with a residual sugar value greater than 15?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	wines_with_high_sugar = dataset['residual sugar'] > 15
	return wines_with_high_sugar.any()",bool,True,True
Is the highest alcohol content wine also the one with the highest quality rating?,Does the wine with the highest alcohol content also have the highest quality rating?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the highest alcohol content wine
    highest_alcohol_wine = dataset[dataset['alcohol'] == dataset['alcohol'].max()]
    
    # Check if the quality rating of the highest alcohol wine is the maximum
    is_highest_quality = highest_alcohol_wine['quality'].eq(dataset['quality'].max()).bool()
    
    return is_highest_quality",bool,False,False
Does any wine have a pH level below 2.5?,Are there any wines with a pH value less than 2.5?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to check for wines with pH value less than 2.5
    wines_with_low_pH = dataset[dataset['pH'] < 2.5]
    
    # Check if there are any wines with low pH
    if len(wines_with_low_pH) > 0:
        return True
    else:
        return False",bool,False,False
How many unique quality ratings are there in the dataset?,What is the count of distinct values in the 'quality' column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	distinct_quality_count = db['quality'].nunique()

	return distinct_quality_count",int64,6,6
What is the maximum fixed acidity level found in the dataset?,What is the highest value of the 'fixed acidity' column in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	max_fixed_acidity = db['fixed acidity'].max()
	return max_fixed_acidity",float64,15.9,15.9
What is the minimum volatile acidity level in the dataset?,What is the lowest value in the 'volatile acidity' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	min_volatile_acidity = dataset['volatile acidity'].min()
	return min_volatile_acidity",float64,0.12,0.12
How many wines have free sulfur dioxide above 50 mg/dm^3?,Count the number of wines with free sulfur dioxide greater than 50 mg/dm^3.,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter wines with free sulfur dioxide greater than 50
    filtered_wines = dataset[dataset['free sulfur dioxide (float64)'] > 50]
    
    # Count the number of wines
    wine_count = len(filtered_wines)
    
    return wine_count",int64,-,16
What is the quality rating of the wine with the highest alcohol content?,What is the quality rating of the wine with the highest alcohol content?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	max_alcohol_wine = dataset.loc[dataset['alcohol'] == dataset['alcohol'].max()]
	quality_rating = max_alcohol_wine['quality'].values[0]

	return quality_rating",uint8,5,5
What is the quality rating of the wine with the highest fixed acidity?,What is the quality rating of the wine with the highest fixed acidity value?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    max_fixed_acidity = db['fixed acidity'].max()
    quality_rating = db.loc[db['fixed acidity'] == max_fixed_acidity, 'quality'].values[0]
    
    return quality_rating",uint8,5,5
What is the quality rating of the wine with the lowest volatile acidity?,What is the quality rating of the wine with the minimum volatile acidity?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	min_vol_acidity = db['volatile acidity'].min()
	quality_rating = db.loc[db['volatile acidity'] == min_vol_acidity, 'quality'].values[0]

	return quality_rating",uint8,7,7
What is the quality rating of the wine with the highest pH level?,What is the quality rating of the wine with the maximum pH level?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_ph_wine = dataset.loc[dataset[""pH""] == dataset[""pH""].max()]
    quality_rating = max_ph_wine[""quality""].values[0]

    return quality_rating",uint8,6,6
List the quality ratings of the top 3 wines with the highest alcohol content.,What are the quality ratings of the three wines with the highest alcohol content?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset to get the top 3 wines by alcohol content
	top_wines = db.nlargest(3, 'alcohol')

	# Get the quality ratings of these wines
	quality_ratings = top_wines['quality'].tolist()

	return quality_ratings",list,"[5, 6, 6]","['5', '6', '6']"
Enumerate the quality ratings of the bottom 2 wines with the lowest residual sugar.,What are the quality ratings of the wines with the two lowest residual sugar values?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset to get the two lowest residual sugar values
	lowest_sugar_wines = dataset.nsmallest(2, 'residual sugar')

	# Get the quality ratings of these wines
	quality_ratings = lowest_sugar_wines['quality'].tolist()

	return quality_ratings",list,"[6, 6]","['6', '6']"
Which are the quality ratings of the top 5 wines with the highest density?,What are the quality ratings of the top 5 wines with the highest density?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Sort the dataset by density in descending order
    sorted_by_density = dataset.sort_values(by='density', ascending=False)
    
    # Get the top 5 wines
    top_5_wines = sorted_by_density.head(5)
    
    # Get the quality ratings of these wines
    quality_ratings = top_5_wines['quality'].tolist()
    
    return quality_ratings",uint8,"[6, 6, 7, 5, 5]","['6', '6', '7', '5', '5']"
List the quality ratings of the bottom 4 wines with the lowest pH level.,What are the quality ratings of the four wines with the lowest pH values?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Sort the dataset by pH in ascending order
    sorted_dataset = dataset.sort_values(by='pH')
    
    # Get the quality ratings of the first four wines
    quality_ratings = sorted_dataset['quality'].head(4).tolist()
    
    return quality_ratings",list,"[4, 6, 6, 8]","['4', '6', '6', '8']"
What are the alcohol contents of the top 4 wines with the highest quality ratings?,What are the alcohol levels of the four wines with the highest quality ratings?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Sort the dataset by quality in descending order
    sorted_dataset = dataset.sort_values(by='quality', ascending=False)
    
    # Get the alcohol levels of the top 4 wines
    top_4_alcohol_levels = sorted_dataset['alcohol'].head(4).tolist()
    
    return top_4_alcohol_levels",float64,"[11.0, 10.0, 12.9, 12.5]","['12.8', '12.6', '12.9', '9.8']"
List the volatile acidity levels of the bottom 3 wines with the lowest quality ratings.,What are the volatile acidity levels of the wines with the three lowest quality ratings?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the three lowest quality ratings
    lowest_quality_wines = dataset.nsmallest(3, 'quality')
    
    # Get the volatile acidity levels for these wines
    volatile_acidity_levels = lowest_quality_wines['volatile acidity'].tolist()
    
    return volatile_acidity_levels",list of float64,"[0.58, 0.61, 1.185]","['0.58', '0.61', '1.185']"
Enumerate the fixed acidity levels of the top 5 wines with the highest quality ratings.,List the fixed acidity values of the top 5 wines with the highest quality ratings.,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the top 5 wines by quality rating
    top_5_wines = db.nlargest(5, 'quality')
    
    # Extract the fixed acidity values for these wines
    fixed_acidity_values = top_5_wines['fixed acidity'].tolist()
    
    return fixed_acidity_values",list,"[7.9, 10.3, 5.6, 12.6, 11.3]","['7.9', '10.3', '5.6', '12.6', '11.3']"
Provide the residual sugar levels of the bottom 2 wines with the lowest quality ratings.,What are the residual sugar levels of the two wines with the lowest quality ratings?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the two wines with the lowest quality ratings
    lowest_quality_wines = db[db['quality'] == db['quality'].min()]

    # Get the residual sugar levels of these wines
    residual_sugar_levels = lowest_quality_wines['residual sugar'].tolist()

    return residual_sugar_levels",float64,"[2.2, 2.1, 4.25, 1.5, 3.4, 2.1, 1.2, 2.1, 5.7, 1.8]","['2.2', '2.1']"
Is there any purchase with a total cost above 1000?,Are there any invoices with a total cost greater than 1000?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	invoices_over_1000 = dataset[""Total""] > 1000
	return invoices_over_1000.any()
",bool,True,True
Are there any customers who made a purchase using cash?,Did any customers pay using cash?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	cash_payment = dataset[dataset['Payment'] == 'Cash']

	return not cash_payment.empty",bool,True,True
Is the customer with the highest total purchase cost a 'Member'?,Does the customer with the highest total purchase cost have a customer type of 'Member'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the customer with the highest total purchase cost
    max_total_customer = dataset.loc[dataset[""Total""] == dataset[""Total""].max()]
    # Get the customer type of the customer with the highest total purchase cost
    customer_type = max_total_customer[""Customer type""].values[0]

    # Check if the customer type is 'Member'
    is_member = customer_type == 'Member'

    return is_member
",bool,True,True
Does any customer with a rating strictly above 9 use 'Ewallet' as their payment method?,Are there any customers with a rating greater than 9 who use 'Ewallet' as their payment method?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter customers with rating greater than 9 and Ewallet payment method
    filtered_customers = dataset[(dataset['Rating'] > 9) & (dataset['Payment'] == 'Ewallet')]
    
    # Check if there are any customers in the filtered list
    if filtered_customers.empty:
        return False
    else:
        return True",bool,True,True
How many unique branches are there in the dataset?,What is the count of distinct branches in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	branch_count = dataset['Branch'].nunique()

	return branch_count",int64,3,3
What is the maximum quantity of products bought in a single purchase?,What is the highest value in the 'Quantity' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	max_quantity = dataset['Quantity'].max()
	return max_quantity",uint8,10,10
What is the minimum total cost of a purchase in the dataset?,What is the lowest total cost of a purchase in the supermarket dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset to get the 'Total' column
	total_column = db['Total']

	# Find the minimum value in the 'Total' column
	min_total = total_column.min()

	return min_total",float64,10.6785,10.6785
How many purchases were made in Yangon city?,What is the total quantity of products purchased in Yangon city?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	yangon_data = db[db['City'] == 'Yangon']
	total_quantity = yangon_data['Quantity'].sum()

	return total_quantity",uint8,1859,340
What is the payment method used for the purchase with the highest total cost?,What is the payment method for the invoice with the highest total cost?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	max_total_invoice = db.loc[db[""Total""] == db[""Total""].max()]
	payment_method = max_total_invoice[""Payment""].values[0]

	return payment_method",string,Credit card,Credit card
What is the product line of the purchase with the highest total cost?,What is the product line of the purchase with the highest total cost?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	max_total_purchase = dataset.loc[dataset[""Total""] == dataset[""Total""].max()]
	product_line = max_total_purchase[""Product line""].values[0]

	return product_line",string,Fashion accessories,Fashion accessories
What is the customer type of the purchase with the lowest total cost?,What is the customer type of the purchase with the lowest total cost?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	min_total_purchase = db.loc[db[""Total""] == db[""Total""].min()]
	customer_type = min_total_purchase[""Customer type""].values[0]

	return customer_type",category,Member,Member
What is the gender of the customer with the highest total purchase cost?,What is the gender of the customer with the highest total cost?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	max_total_cost = db['Total'].max()
	gender = db.loc[db['Total'] == max_total_cost, 'Gender'].values[0]

	return gender",string,Female,Female
List the payment methods of the top 3 purchases with the highest total cost.,What are the payment methods of the top 3 purchases with the highest total cost?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset to get the top 3 purchases by total cost
	top_purchases = db.nlargest(3, 'Total')

	# Extract the payment methods for these purchases
	payment_methods = top_purchases['Payment'].tolist()

	return payment_methods",category,"['Credit card', 'Credit card', 'Ewallet']","['Credit card', 'Credit card', 'Ewallet']"
Enumerate the product lines of the bottom 2 purchases with the lowest total cost.,What are the product lines of the two purchases with the lowest total cost?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the two purchases with the lowest total cost
    lowest_cost_purchases = dataset.nsmallest(2, 'Total')
    
    # Get the product lines for these purchases
    product_lines = lowest_cost_purchases['Product line'].tolist()
    
    # Return the product lines as a list of strings
    return product_lines",string,"['Sports and travel', 'Fashion accessories']","['Sports and travel', 'Fashion accessories']"
Which are the customer types of the top 5 purchases with the highest total cost?,What are the customer types of the top 5 purchases with the highest total cost?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset to get the top 5 purchases by total cost
	top_5_purchases = db.nlargest(5, 'Total')

	# Get the customer types for these purchases
	customer_types = top_5_purchases['Customer type'].tolist()

	return customer_types",category,"['Member', 'Normal', 'Member', 'Normal', 'Normal']","['Member', 'Normal', 'Member', 'Normal', 'Normal']"
List the genders of the bottom 4 purchases with the lowest total cost.,What are the genders of the four purchases with the lowest total cost?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the four purchases with the lowest total cost
    lowest_cost_purchases = dataset.nsmallest(4, 'Total')

    # Extract the genders of these purchases
    genders = lowest_cost_purchases['Gender'].tolist()

    # Return the list of genders as a list of strings
    return [str(gender) for gender in genders]",list of strings,"['Male', 'Female', 'Female', 'Male']","['Male', 'Female', 'Female', 'Male']"
What are the quantities of products bought in the top 4 purchases with the highest total cost?,What are the quantities of products bought in the top 4 purchases with the highest total cost?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	top_purchases = dataset.nlargest(4, 'Total')
	quantities = top_purchases['Quantity'].tolist()

	return quantities",uint8,"[10, 10, 10, 10]","[10, 10, 10, 10]"
List the unit prices of the bottom 3 purchases with the lowest total cost.,What are the unit prices of the three purchases with the lowest total cost?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset to get the three purchases with the lowest total cost
	lowest_total_purchases = db.nsmallest(3, 'Total')
	# Extract the unit prices from these purchases
	unit_prices = lowest_total_purchases['Unit price'].tolist()

	return unit_prices",float64,"[10.17, 12.09, 12.54]","[10.17, 12.09, 12.54]"
Enumerate the ratings of the top 5 purchases with the highest total cost.,What are the ratings of the top 5 products with the highest total cost?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by product line and sum the total cost
    product_totals = dataset.groupby('Product line')['Total'].sum()
    
    # Get the top 5 products by total cost
    top_5_products = product_totals.nlargest(5).index.tolist()
    
    # Filter the dataset to get the ratings of the top 5 products
    top_5_ratings = dataset[dataset['Product line'].isin(top_5_products)]['Rating'].tolist()
    
    return top_5_ratings",float64,"[9.6, 7.4, 5.3, 4.1, 5.8, 8.0, 5.9, 4.5, 6.8, 7.1, 8.2, 4.5, 6.9, 8.6, 4.4, 4.8, 4.4, 9.9, 6.0, 8.5, 6.7, 7.7, 9.6, 4.8, 4.5, 5.1, 7.5, 6.8, 7.0, 4.7, 7.7, 7.9, 6.3, 5.6, 7.6, 9.5, 4.1, 8.1, 7.9, 9.5, 8.5, 6.5, 6.1, 6.5, 8.2, 5.8, 5.4, 9.3, 10.0, 7.0, 10.0, 8.6, 9.9, 6.4, 9.6, 5.9, 4.0, 8.7, 9.4, 5.4, 8.6, 5.7, 6.6, 6.4, 6.6, 8.3, 6.6, 4.0, 9.9, 7.3, 5.7, 7.1, 8.2, 5.1, 7.2, 4.1, 9.3, 7.4, 4.1, 7.2, 4.9, 9.9, 7.3, 7.9, 7.4, 4.2, 9.2, 4.6, 8.4, 4.3, 9.5, 7.1, 5.3, 5.2, 6.0, 4.1, 5.2, 6.5, 4.2, 4.6, 7.3, 4.5, 9.0, 5.9, 8.5, 7.2, 7.5, 8.3, 7.4, 8.8, 6.2, 8.8, 9.8, 8.2, 9.2, 5.4, 8.4, 8.0, 9.2, 6.2, 4.8, 7.3, 7.4, 9.9, 9.3, 9.0, 6.1, 9.7, 10.0, 8.3, 6.0, 7.0, 6.5, 5.9, 4.8, 8.7, 6.5, 8.5, 9.4, 6.3, 9.8, 8.7, 8.8, 9.6, 4.8, 4.4, 5.7, 7.7, 8.0, 6.7, 8.0, 7.5, 7.0, 9.9, 5.9, 7.2, 4.6, 9.2, 5.7, 9.9, 5.0, 6.1, 5.5, 6.8, 6.6, 9.8, 5.4, 9.7, 7.8, 5.1, 6.5, 5.9, 8.8, 4.9, 4.4, 6.5, 8.3, 8.5, 5.5, 8.7, 7.9, 6.1, 5.4, 9.4, 8.2, 6.2, 9.7, 9.7, 5.3, 7.4, 6.5, 8.7, 6.7, 4.1, 8.6, 4.3, 4.9, 5.6, 6.0, 4.2, 8.3, 5.7, 4.8, 6.8, 8.8, 4.2, 6.4, 8.4, 7.2, 5.2, 8.9, 9.0, 9.7, 8.7, 6.5, 6.9, 6.2, 5.6, 5.7, 4.2, 7.9, 8.7, 6.9, 9.5, 4.4, 7.0, 6.3, 8.8, 5.1, 6.2, 7.1, 6.4, 5.7, 9.6, 6.4, 7.9, 6.5, 6.9, 9.5, 5.2, 4.2, 7.0, 6.0, 4.7, 7.1, 7.5, 6.4, 5.8, 4.5, 7.7, 6.7, 4.4, 4.7, 8.6, 4.3, 9.6, 4.1, 4.7, 7.8, 5.5, 9.7, 4.4, 4.4, 5.2, 7.3, 4.9, 5.5, 6.7, 9.4, 6.4, 5.4, 8.6, 7.6, 6.8, 9.1, 5.5, 7.9, 8.5, 9.1, 7.5, 5.2, 9.5, 8.9, 7.8, 9.3, 6.2, 7.6, 7.3, 4.7, 5.1, 6.6, 5.5, 8.5, 4.8, 8.4, 7.8, 9.3, 5.2, 6.5, 5.6, 7.4, 9.1, 8.0, 7.2, 7.1, 9.1, 5.6, 6.0, 5.4, 7.8, 9.9, 4.9, 5.2, 8.9, 9.1, 7.0, 9.6, 8.7, 9.4, 4.0, 7.5, 4.2, 9.9, 4.2, 9.9, 5.8, 6.0, 9.5, 6.6, 8.1, 9.7, 7.2, 6.2, 4.6, 5.8, 8.0, 9.4, 6.2, 9.8, 9.6, 4.9, 8.0, 7.8, 4.1, 5.5, 5.4, 6.9, 6.6, 9.2, 8.7, 8.2, 7.5, 9.8, 8.7, 6.7, 5.0, 7.0, 8.0, 6.9, 7.3, 6.9, 5.7, 6.4, 9.6, 6.8, 9.0, 9.6, 7.7, 7.0, 6.5, 8.1, 4.3, 6.5, 9.5, 9.7, 8.9, 6.5, 9.6, 6.7, 7.6, 4.8, 4.7, 6.9, 4.5, 6.2, 7.6, 7.9, 4.5, 8.7, 6.1, 6.4, 9.1, 7.1, 4.5, 7.2, 8.4, 5.4, 9.7, 5.5, 6.6, 4.2, 4.4, 6.7, 6.7, 8.4, 6.2, 5.0, 6.0, 7.0, 6.6, 7.3, 8.3, 4.3, 9.8, 8.2, 7.2, 8.4, 7.1, 5.5, 8.5, 6.2, 8.9, 9.6, 5.4, 9.1, 9.0, 6.3, 9.5, 9.8, 6.7, 7.7, 5.1, 6.2, 6.1, 9.3, 7.6, 8.2, 8.5, 8.7, 9.7, 4.3, 7.7, 7.3, 5.9, 8.0, 7.1, 9.0, 6.7, 6.1, 9.3, 7.2, 8.2, 8.4, 6.2, 7.4, 5.0, 6.9, 4.9, 5.1, 9.1, 5.0, 5.5, 9.2, 4.9, 8.9, 6.0, 4.2, 7.3, 6.5, 8.9, 8.6, 6.9, 7.7, 9.5, 4.5, 5.6, 8.2, 7.3, 4.4, 5.7, 5.0, 9.0, 6.3, 9.4, 7.7, 5.5, 4.1, 7.6, 8.6, 8.3, 8.1, 8.6, 6.3, 5.8, 6.2, 7.3, 8.0, 9.5, 7.0, 9.2, 7.7, 5.3, 9.4, 9.8, 4.8, 5.3, 9.5, 5.3, 9.2, 9.6, 6.4, 4.5, 6.9, 7.8, 4.5, 8.6, 5.2, 6.4, 5.2, 8.9, 6.2, 6.7, 7.2, 9.0, 4.2, 4.2, 6.9, 4.4, 4.0, 8.5, 9.2, 9.8, 4.9, 4.4, 6.8, 9.1, 8.7, 7.5, 8.2, 6.7, 5.4, 7.0, 4.7, 5.0, 6.3, 8.5, 7.5, 6.4, 4.7, 6.0, 4.0, 5.5, 8.7, 5.6, 6.3, 7.1, 7.8, 7.3, 5.1, 9.4, 5.8, 8.0, 7.9, 5.9, 4.9, 9.3, 7.9, 5.9, 9.9, 7.7, 7.6, 7.7, 4.1, 4.4, 5.5, 4.8, 4.6, 7.3, 6.0, 9.4, 6.5, 7.0, 7.1, 6.6, 4.9, 6.4, 8.0, 4.3, 6.1, 7.5, 6.7, 5.2, 9.5, 7.6, 6.6, 6.9, 4.3, 7.8, 8.0, 9.6, 4.3, 5.0, 6.3, 7.6, 4.8, 9.1, 6.1, 9.1, 8.3, 7.2, 8.5, 4.5, 8.1, 7.2, 6.1, 7.1, 5.1, 7.9, 7.4, 7.4, 5.9, 8.9, 6.8, 9.3, 4.4, 9.5, 8.9, 6.4, 8.1, 9.0, 6.0, 9.8, 8.5, 8.8, 8.8, 9.5, 5.6, 8.6, 5.2, 5.8, 8.0, 4.1, 8.6, 7.0, 8.4, 7.4, 6.2, 4.9, 4.5, 5.6, 8.0, 5.6, 4.2, 9.9, 4.7, 9.8, 6.3, 7.9, 7.7, 4.5, 5.7, 6.3, 6.0, 8.0, 9.6, 6.1, 5.6, 7.8, 4.1, 8.8, 9.0, 5.5, 9.7, 4.0, 4.9, 9.3, 6.6, 4.3, 5.5, 8.1, 9.4, 7.9, 5.1, 6.9, 8.0, 8.0, 4.2, 8.5, 9.0, 6.0, 5.0, 6.5, 6.0, 5.0, 5.0, 9.2, 9.6, 6.0, 6.7, 4.1, 5.9, 4.5, 6.6, 8.5, 5.2, 4.3, 7.6, 4.1, 5.4, 5.8, 5.6, 5.1, 5.8, 5.0, 7.9, 6.0, 5.0, 8.9, 5.9, 5.9, 9.7, 8.6, 4.0, 4.2, 9.2, 9.2, 10.0, 4.2, 6.3, 8.2, 5.0, 7.0, 7.8, 4.3, 7.0, 6.6, 6.5, 4.3, 9.3, 7.1, 9.6, 6.2, 9.9, 5.9, 6.3, 4.0, 6.1, 4.5, 8.6, 6.0, 9.5, 9.9, 7.5, 7.6, 5.0, 6.7, 9.5, 6.8, 5.6, 8.1, 8.6, 9.4, 8.9, 5.0, 8.8, 4.6, 7.5, 5.1, 8.1, 7.9, 6.2, 4.2, 7.3, 8.6, 6.8, 7.6, 5.8, 4.1, 9.3, 6.8, 8.7, 6.3, 5.1, 7.0, 5.2, 6.6, 6.5, 9.0, 5.2, 7.6, 7.2, 7.1, 9.5, 5.1, 9.8, 5.1, 7.4, 5.9, 6.9, 6.6, 5.7, 7.3, 5.3, 4.7, 7.9, 8.9, 4.7, 8.7, 7.6, 5.7, 6.8, 5.4, 7.1, 7.8, 8.4, 9.8, 9.8, 7.4, 6.7, 6.4, 5.8, 7.2, 9.3, 9.0, 9.0, 6.7, 5.5, 5.4, 8.2, 7.0, 8.5, 4.9, 5.1, 6.5, 9.8, 7.4, 6.0, 8.5, 4.3, 4.5, 6.0, 8.8, 6.6, 5.9, 4.4, 7.7, 4.1, 6.6]","[6.6, 8.7, 4.5, 8.0, 4.4]"
Provide the gross incomes of the bottom 2 purchases with the lowest total cost.,What are the gross incomes of the two purchases with the lowest total cost?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the two purchases with the lowest total cost
    lowest_total_purchases = db[['Total', 'gross income']].nsmallest(2, 'Total')
    
    # Get the gross incomes from the filtered dataset
    gross_incomes = lowest_total_purchases['gross income'].tolist()
    
    return gross_incomes",float64,"[0.5085, 0.6045]","[0.5085, 0.6045]"
Are there any individuals in the dataset who are above 60 years of age?,Are there any individuals with an age greater than 60 in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataframe to check for individuals with age greater than 60
    filtered_data = db[db['Age'] > 60]
    
    # Check if the filtered dataframe is empty
    if filtered_data.empty:
        return False
    else:
        return True",bool,True,False
Does anyone have a Diabetes Pedigree Function score above 2.5?,Are there any individuals with a Diabetes Pedigree Function score greater than 2.5?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    df = db
    high_dpf_individuals = df[df['DiabetesPedigreeFunction'] > 2.5]
    
    if high_dpf_individuals.empty:
        return False
    else:
        return True",bool,False,True
Does the person with the highest glucose level also have diabetes?,Does the person with the highest glucose level have diabetes?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the person with the highest glucose level
    max_glucose_person = db.loc[db['Glucose'] == db['Glucose'].max()]
    
    # Check if the person has diabetes (Outcome column value is 1)
    has_diabetes = max_glucose_person['Outcome'].bool()
    
    return has_diabetes",bool,-,True
Is there anyone who has zero pregnancies and is diabetic?,Are there any individuals with zero pregnancies and a diabetic outcome?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    zero_pregnancy_diabetic = dataset.loc[(dataset[""Pregnancies""] == 0) & (dataset[""Outcome""] == 1)]
    
    if zero_pregnancy_diabetic.empty:
        return False
    else:
        return True",bool,True,True
What is the maximum number of pregnancies recorded in the dataset?,What is the highest value in the 'Pregnancies' column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	max_pregnancies = db['Pregnancies'].max()
	return max_pregnancies",uint8,17,17
What is the minimum blood pressure level recorded in the dataset?,What is the lowest value in the 'BloodPressure' column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	min_blood_pressure = db['BloodPressure'].min()
	return min_blood_pressure",uint8,0,0
What is the average BMI recorded in the dataset?,What is the mean of the BMI column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    bmi_mean = db['BMI'].mean()
    return bmi_mean",float64,31.992578124999998,31.992578124999998
How many individuals have an insulin level above 150?,What is the count of individuals with an insulin level greater than 150?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	filtered_data = db[db['Insulin'] > 150]
	count = len(filtered_data)

	return count",uint8,153,187
What is the diabetes outcome for the person with the highest BMI?,What is the value of the 'Outcome' column for the person with the highest 'BMI'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_bmi_person = dataset.loc[dataset['BMI'] == dataset['BMI'].max()]
    outcome_value = max_bmi_person['Outcome'].values[0]

    return outcome_value",uint8,1,1
What is the diabetes outcome for the person with the lowest blood pressure?,What is the outcome for the person with the minimum blood pressure?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    min_bp_person = dataset.loc[dataset['BloodPressure'] == dataset['BloodPressure'].min()]
    outcome = min_bp_person['Outcome'].values[0]

    return outcome",uint8,0,0
What is the diabetes outcome for the person with the highest insulin level?,What is the outcome for the person with the highest insulin level?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the person with the highest insulin level
    max_insulin_person = db[db['Insulin'] == db['Insulin'].max()]
    # Get the outcome for that person
    outcome = max_insulin_person['Outcome'].values[0]
    
    return outcome",uint8,1,1
What is the diabetes outcome for the person with the lowest glucose level?,What is the value of the 'Outcome' column for the person with the lowest 'Glucose' level?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the person with the lowest 'Glucose' level
    lowest_glucose_person = db['Glucose'].idxmin()

    # Get the 'Outcome' value for that person
    outcome_value = db.loc[lowest_glucose_person, 'Outcome']

    return outcome_value",uint8,0,0
List the diabetes outcomes of the top 3 individuals with the highest number of pregnancies.,What are the diabetes outcomes of the three people with the highest number of pregnancies?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the top 3 individuals with the highest number of pregnancies
    top_pregnancies = db[['Pregnancies', 'Outcome']].nlargest(3, 'Pregnancies')

    # Get the diabetes outcomes for these individuals
    outcomes = top_pregnancies['Outcome'].tolist()

    return outcomes",list,"[1, 1, 1]","[1, 1, 1]"
List the diabetes outcomes of the bottom 2 individuals with the lowest BMI.,What are the diabetes outcomes of the two individuals with the lowest BMI?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the two individuals with the lowest BMI
    lowest_bmi_individuals = db[['BMI', 'Outcome']].nsmallest(2, 'BMI')

    # Get the diabetes outcomes of these individuals
    diabetes_outcomes = lowest_bmi_individuals['Outcome'].tolist()

    # Convert the outcomes to a list of strings
    diabetes_outcomes_str = [str(outcome) for outcome in diabetes_outcomes]

    return diabetes_outcomes_str",string,"['1', '0']","[0, 0]"
List the diabetes outcomes of the top 5 individuals with the highest insulin levels.,What are the diabetes outcomes of the 5 individuals with the highest insulin levels?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the top 5 individuals with the highest insulin levels
    top_5_insulin = db.nlargest(5, 'Insulin')
    
    # Get the diabetes outcomes for these individuals
    outcomes = top_5_insulin['Outcome'].tolist()
    
    # Convert the outcomes to a list of strings
    outcomes_str = [str(outcome) for outcome in outcomes]
    
    return outcomes_str",string,"['1', '0', '0', '1', '1']","[1, 1, 1, 1, 1]"
List the diabetes outcomes of the bottom 4 individuals with the lowest blood pressure.,What are the diabetes outcomes of the 4 individuals with the lowest blood pressure?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the 4 individuals with the lowest blood pressure
    lowest_bp_individuals = db.nsmallest(4, 'BloodPressure')
    
    # Get the diabetes outcomes for these individuals
    outcomes = lowest_bp_individuals['Outcome'].tolist()
    
    # Convert the outcomes to a list of strings
    outcomes_list = [str(outcome) for outcome in outcomes]
    
    return outcomes_list",string,"['0', '1', '0', '0']","[0, 0, 0, 0]"
What are the ages of the top 4 individuals with the highest number of pregnancies?,What are the ages of the 4 individuals with the highest number of pregnancies?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the top 4 individuals with the highest number of pregnancies
    top_pregnancies = db.nlargest(4, 'Pregnancies')
    
    # Extract the ages of these individuals
    ages = top_pregnancies['Age'].tolist()
    
    return ages",list of integers,"[47, 43, 46, 38]","[51, 67, 67, 67]"
List the BMI of the bottom 3 individuals with the lowest glucose levels.,What are the BMIs of the three individuals with the lowest glucose levels?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the three individuals with the lowest glucose levels
    lowest_glucose_individuals = db.nsmallest(3, 'Glucose')
    
    # Extract the BMIs of these individuals
    bmis = lowest_glucose_individuals['BMI'].tolist()
    
    return bmis",list of float64,"[24.7, 27.7, 32.0]","[32.0, 32.0, 32.0]"
Enumerate the blood pressure levels of the top 5 individuals with the highest Diabetes Pedigree Function scores.,List the blood pressure values of the 5 people with the highest Diabetes Pedigree Function scores.,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the top 5 individuals with the highest Diabetes Pedigree Function scores
    top_5_df = db.nlargest(5, 'DiabetesPedigreeFunction')
    
    # Extract the blood pressure values from the filtered dataset
    blood_pressure_values = top_5_df['BloodPressure'].tolist()
    
    return blood_pressure_values",list of integers,"[78, 70, 40, 82, 66]","[0, 0, 0, 0, 0]"
Provide the glucose levels of the 2 individuals with the highest insulin levels.,What are the glucose levels of the 2 individuals with the highest insulin levels?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the 2 individuals with the highest insulin levels
    top_2_insulin = db['Insulin'].nlargest(2)
    # Get the corresponding glucose levels for these individuals
    glucose_levels = db.loc[db['Insulin'].isin(top_2_insulin), 'Glucose']
    return glucose_levels.tolist()",uint8,"[189, 197]","[189, 197]"
Are there any articles that have the material type 'Op-Ed'?,Are there any articles with the material type 'Op-Ed'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	material_type_op_ed = dataset['material_type'] == 'Op-Ed'
	return material_type_op_ed.any()",bool,True,True
Does the article with the longest headline contain the keyword 'United States Politics and Government'?,Does the article with the longest headline contain the keyword 'United States Politics and Government' in the keywords column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Find the article with the longest headline
    longest_headline = dataset['headline'].str.len().idxmax()
    longest_headline_row = dataset.loc[longest_headline]
    
    # Check if the keywords contain the required phrase
    keywords = longest_headline_row['keywords']
    required_phrase = 'United States Politics and Government'
    phrase_found = required_phrase in keywords
    
    return phrase_found",bool,False,False
Is there any article published on '2021-01-05'?,Were there any articles published on the date '2021-01-05'?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    date_to_check = '2021-01-05'
    articles_published = db[db['date'] == date_to_check]
    
    if articles_published.empty:
        return False
    else:
        return True",bool,True,True
Does any article contain more than 10 keywords?,Are there any articles with more than 10 keywords?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter articles with more than 10 keywords
    articles_with_keywords = dataset[dataset['keywords'].str.count(',') > 9]
    
    # Check if there are any articles in the filtered list
    answer = not articles_with_keywords.empty
    
    return answer",bool,False,True
How many unique material types are there in the dataset?,What is the number of distinct material types in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	distinct_material_types = db['material_type'].nunique()
	return distinct_material_types",int64,16,16
What is the longest length of a headline in the dataset?,What is the maximum length of the headline string in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_headline_length = dataset['headline'].str.len().max()
    return max_headline_length",int64,145.0,147
How many articles were published on '2021-01-02'?,What is the count of articles published on '2021-01-02'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	count = dataset[dataset['date'] == '2021-01-02'].shape[0]
	return count",int64,56,52
What is the highest number of keywords associated with a single article?,What is the maximum number of keywords in the 'keywords' column of the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	max_keywords = dataset['keywords'].str.split(',').str.len().max()
	return max_keywords",int64,-,45
What is the material type of the article with the longest headline?,What is the material type of the article with the maximum length headline?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to find the row with the maximum length headline
    max_headline_row = db[db['headline'].str.len() == db['headline'].str.len().max()]
    
    # Get the material type from the filtered row
    material_type = max_headline_row['material_type'].values[0]
    
    return material_type",category,Interactive Feature,News
What is the material type of the article with the shortest headline that is not news or video?,What is the material type of the article with the shortest headline that is not categorized as news or video?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter out news and video articles
    filtered_dataset = dataset[~dataset['material_type'].isin(['news', 'video'])]
    
    # Find the article with the shortest headline
    shortest_headline = filtered_dataset['headline'].str.len().idxmin()
    material_type = filtered_dataset.loc[shortest_headline, 'material_type']
    
    return material_type",category,News,Slideshow
What is the material type of the non-editorial article with the most number of keywords?,What is the material type of the article with the highest number of keywords that is not editorial?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter out editorial articles
    non_editorial = dataset[dataset['material_type'] != 'editorial']
    
    # Find the article with the highest number of keywords
    max_keywords_article = non_editorial.loc[non_editorial['keywords'].str.count(',').idxmax()]
    
    # Get the material type of that article
    material_type = max_keywords_article['material_type']
    
    return material_type",category,-,News
What is the most common material amongst articles with the least number of keywords?,What is the most frequent material type for articles with the minimum number of keywords?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter articles with the minimum number of keywords
    min_keywords_articles = dataset[dataset['keywords'].str.count(',') == 0]
    
    # Get the most frequent material type
    most_frequent_material = min_keywords_articles['material_type'].mode()
    
    return most_frequent_material.values[0]",category,-,News
List the material types of the top 3 articles with the longest headlines.,What are the material types of the three articles with the longest headlines?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the three articles with the longest headlines
    filtered_data = db.nlargest(3, 'headline')

    # Extract the material types from the filtered data
    material_types = filtered_data['material_type'].tolist()

    return material_types",category,-,"['News', 'News', 'News']"
List the material types of the bottom 2 articles with the shortest headlines that are not videos or slides.,What are the material types of the bottom 2 articles with the shortest headlines that are not videos or slides?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter out videos and slides
    filtered_data = dataset[~dataset['material_type'].isin(['video', 'slides'])]
    
    # Sort by headline length and select bottom 2
    sorted_data = filtered_data.sort_values(by='headline', key=len)[:2]
    
    # Get the material types
    material_types = sorted_data['material_type'].tolist()
    
    return material_types",category,-,"['News', 'News']"
List the material types of the top 5 articles with the most number of keywords.,What are the material types of the top 5 articles with the most keywords?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the top 5 articles with the most keywords
    top_articles = dataset.nlargest(5, 'keywords')
    
    # Extract the material types of these top articles
    material_types = top_articles['material_type'].tolist()
    
    return material_types",list of strings,-,"['News', 'News', 'News', 'News', 'News']"
List the material types of the bottom 4 articles with the least number of keywords.,What are the material types of the four articles with the fewest keywords?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Assuming the dataset is a pandas dataframe
    articles_with_fewest_keywords = dataset.nsmallest(4, 'keywords')
    material_types = articles_with_fewest_keywords['material_type'].tolist()

    return material_types",category,-,"['News', 'News', 'News', 'News']"
What are the lengths of the headlines of the top 4 articles with the most number of keywords?,What is the length of the headline of the article with the fourth most number of keywords?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Sort the dataset by the number of keywords in descending order
    sorted_by_keywords = dataset.sort_values(by='keywords', ascending=False)
    
    # Get the headline of the fourth entry
    fourth_headline = sorted_by_keywords.iloc[3]['headline']
    
    # Calculate the length of the headline
    headline_length = len(fourth_headline)
    
    return headline_length",int64,-,"[86, 85, 84, 84]"
List the number of keywords in the bottom 3 articles with the shortest headlines.,What is the total number of keywords in the three articles with the shortest headlines?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the three articles with the shortest headlines
    filtered_data = db[db['headline'].str.len().isin(db['headline'].str.len().nsmallest(3))]

    # Extract the keywords from these articles and split them into individual words
    keywords_list = filtered_data['keywords'].str.split(', ')

    # Flatten the list of lists to get a single list of all keywords
    all_keywords = [word for sublist in keywords_list for word in sublist]

    # Return the total number of keywords
    return len(all_keywords)",int64,-,"[1, 1, 1]"
Enumerate the lengths of the headlines of the top 5 articles with the longest headlines.,What are the lengths of the top 5 headlines in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the 'headline' column
    headlines = db['headline']
    
    # Get the lengths of the top 5 headlines
    top_5_lengths = headlines.str.len().nlargest(5)
    
    # Return the list of lengths
    return top_5_lengths.tolist()",list,"[145.0, 143.0, 143.0, 138.0, 137.0]","[96, 96, 95, 95, 95]"
Provide the number of keywords in the bottom 2 articles with the least number of keywords.,What is the total number of keywords in the two articles with the fewest keywords?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the two articles with the fewest keywords
    fewest_keywords_articles = dataset.nsmallest(2, 'keywords')
    
    # Calculate the total number of keywords in these articles
    total_keywords = fewest_keywords_articles['keywords'].str.split().str.len().sum()
    
    return total_keywords",int64,-,"[1, 1]"
Is the 'USA' the most common entry in the 'Geographies' column?,Is the most frequent value in the 'Geographies' column 'USA'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	geography_counts = dataset['Geographies'].value_counts()
	most_frequent_geography = geography_counts.index[0]
	return most_frequent_geography == 'USA'",bool,[False],False
Are there any participants who are unemployed with a bachelor's degree from Africa?,"Are there any professionals who are unemployed, have a bachelor's degree, and reside in Africa?","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for the given conditions
    filtered_data = dataset[(dataset[""Geographies""] == 'Africa') & (dataset[""General Segments""] == 'Unemployed') & (dataset[""What is the highest level of formal education that you have attained or plan to attain within the next 2 years?""] == 'Bachelor')]

    # Check if there are any rows in the filtered data
    if filtered_data.empty:
        return False
    else:
        return True",bool,False,False
Do all participants recommend Python as the first programming language?,Do all participants recommend Python as the primary programming language to learn?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    recommended_language = dataset['What programming language would you recommend an aspiring data scientist to learn first? (category)'].unique()
    all_recommend_python = all(lang == 'Python' for lang in recommended_language)
    
    return all_recommend_python",bool,-,False
Are there more than 1000 participants who hope to become familiar with AWS in the next 2 years?,Are there more than 1000 entries in the dataset where the participants want to learn AWS in the next 2 years?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the relevant column
    learn_aws_column = dataset['In the next 2 years', 'do you hope to become more familiar with any of these specific cloud computing products? (string)']
    
    # Count the number of entries where the value is 'AWS'
    count = learn_aws_column[learn_aws_column == 'AWS'].count()
    
    # Return the result as a boolean
    return count > 1000",bool,-,False
How many unique job titles are represented in the dataset?,What is the count of distinct job titles in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    title_column = 'Select the title most similar to your current role (or most recent title if retired)'
    unique_titles = dataset[title_column].nunique()
    return unique_titles",int64,14,14
What's the median of the average number of years participants have used machine learning methods?,What is the median of the column '(Average) For how many years have you used machine learning methods?',"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    df = db
    median_value = df['(Average) For how many years have you used machine learning methods? (float64)'].median()
    return median_value",float64,-,1.5
How many participants are from the United Kingdom?,How many participants reside in the United Kingdom?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get participants from the United Kingdom
    uk_participants = dataset[dataset['In which country do you currently reside? (category)'] == 'United Kingdom']

    # Return the count of participants
    return len(uk_participants)",int64,-,450.0
What is the most common number of programming languages used by participants on a regular basis?,What is the most frequently occurring value in the column 'What programming languages do you use on a regular basis?'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    column_name = 'What programming languages do you use on a regular basis?'
    most_common_language = dataset[column_name].mode()
    
    return most_common_language.values[0]",string,['Python'],2.0
What's the most common computing platform used for data science projects?,-,-,-,-,A laptop
What's the most common programming language used on a regular basis?,What is the most frequently used programming language by professionals?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    language_use_count = dataset['Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis? (string)'].value_counts()
    most_used_language = language_use_count.index[0]

    return most_used_language",string,-,Python
Which country has the second highest number of participants?,What is the country with the second highest number of participants?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    country_counts = dataset['In which country do you currently reside? (category)'].value_counts()
    second_highest_country = country_counts.index[1]
    
    return second_highest_country",string,-,United States of America
Which title is the most common among participants?,What is the most frequent title in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    title_column = 'Select the title most similar to your current role (or most recent title if retired)'
    title_counts = dataset[title_column].value_counts()
    most_frequent_title = title_counts.index[0]
    
    return most_frequent_title",string,Data Scientist,Data Scientist
What are the top 4 geographies represented in the dataset?,What are the top 4 unique values in the 'Geographies' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    unique_geographies = dataset['Geographies'].unique()
    top_4_geographies = list(unique_geographies[:4])
    return top_4_geographies",string,-,"['India', 'USA', 'Western Europe', 'China - Japan - Korea']"
Name the top 3 general segments of participants.,-,-,-,-,"['Analysts', 'Data Scientists', 'Academics']"
list the top 4 most common job titles.,What are the top 4 most frequently occurring job titles in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Extract the column name for job titles
    job_title_column = 'Select the title most similar to your current role (or most recent title if retired)'
    # Get the top 4 most frequent job titles
    top_job_titles = dataset[job_title_column].value_counts().head(4).index.tolist()
    # Return the list of top job titles
    return top_job_titles",category,"['Data Scientist', 'Software Engineer', 'Other', 'Data Analyst']","['Data Scientist', 'Software Engineer', 'Other', 'Data Analyst']"
Identify the top 6 programming languages used regularly.,,,,-,"['Python', 'SQL', 'R', 'Javascript', 'C++', 'Java']"
Report the top 4 age ranges of participants by frequency,,,,-,"['25-29', '30-34', '22-24', '35-39']"
list the highest average 3 years of machine learning experience.,,,,-,"[19.83, 19.74, 19.68]"
Identify the 5 highest yearly compensations.,,,,-,"[1000000, 1000000, 1000000, 1000000, 1000000]"
Report the 5 most common sizes of the company where participants work.,,,,-,"['0-49 employees', '10,000 or more employees', '1000-9,999 employees', '50-249 employees', '250-999 employees']"
Are there more reviews with rating 5 from 'GB' than 'US'?,Are there more reviews with a rating of 5 from the country code 'GB' than 'US'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for ratings of 5 from GB and US
    gb_rating_5 = dataset[(dataset['country_code'] == 'GB') & (dataset['rating'] == 5)]
    us_rating_5 = dataset[(dataset['country_code'] == 'US') & (dataset['rating'] == 5)]
    
    # Compare the number of reviews
    more_gb_than_us = len(gb_rating_5) > len(us_rating_5)
    
    return more_gb_than_us",bool,True,True
Is the average rating for 'Wise' in 'GB' above 4?,Is the average rating for the company 'Wise' in the country 'GB' greater than 4?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    wise_gb_data = dataset[(dataset['Company'] == 'Wise') & (dataset['country_code'] == 'GB')]
    avg_rating = wise_gb_data['rating'].mean()

    return avg_rating > 4",bool,True,True
Do any reviews originate from 'AO'?,Are there any reviews from the country code 'AO'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for reviews from country code 'AO'
    ao_reviews = dataset[dataset['country_code'] == 'AO']
    
    # Check if there are any reviews from 'AO'
    answer = not ao_reviews.empty
    
    return answer",bool,True,True
Did any reviews receive a rating of 1?,Are there any reviews with a rating of 1?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	reviews_with_rating_1 = dataset['rating'] == 1
	return reviews_with_rating_1.any()",bool,True,True
What's the total number of reviews for 'Wise'?,How many reviews are there for the company 'Wise'?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	wise_reviews = db[db['Company'] == 'Wise']
	review_count = len(wise_reviews)

	return review_count",int64,3840,3840
How many unique countries gave 'Wise' a rating of 5?,What is the number of distinct countries that have given the company 'Wise' a rating of 5?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for the company 'Wise' and rating 5
    filtered_data = db[(db['Company'] == 'Wise') & (db['rating'] == 5)]
    
    # Get the distinct country codes
    distinct_countries = filtered_data['country_code'].unique()
    
    # Return the number of distinct countries
    return len(distinct_countries)",int64,121,120
What is the highest rating received?,What is the maximum rating?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	max_rating = dataset['rating'].max()
	return max_rating",uint8,5,5
What's the average rating across all reviews?,What is the mean rating of all the reviews?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	mean_rating = dataset['rating'].mean()
	return mean_rating",float64,4.097755610972569,4.097755610972569
Which company received the most 5-star reviews?,What is the company with the highest number of 5-star ratings?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	# Filter rows with rating 5
	five_star_ratings = db[db['rating'] == 5]
	# Group by company and count the number of ratings
	company_rating_count = five_star_ratings.groupby('Company')['rating'].count()
	# Find the company with the highest count
	max_rated_company = company_rating_count.idxmax()

	return max_rated_company",category,Wise,Wise
From which country did 'Wise' receive the most reviews?,What is the country code for the company 'Wise' with the highest number of reviews?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for the company 'Wise'
    wise_reviews = db[db['Company'] == 'Wise']
    
    # Group by country code and count the number of reviews
    country_review_count = wise_reviews.groupby('country_code').size()
    
    # Find the country code with the highest number of reviews
    max_reviews_country = country_review_count.idxmax()
    
    return max_reviews_country",category,GB,GB
Which country had the lowest representation in the reviews?,Which country code has the least number of reviews?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    country_code_counts = dataset['country_code'].value_counts()
    least_reviewed_country_code = country_code_counts.idxmin()

    return least_reviewed_country_code",category,CW,CW
Which company received the lowest rating?,What is the name of the company with the lowest rating?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    min_rating_company = dataset.loc[dataset[""rating""] == dataset[""rating""].min()]
    company_name = min_rating_company[""Company""].values[0]

    return company_name",category,Wise,N26
Which are the top 3 countries with the most 5-star reviews for 'Wise'?,List the top 3 countries with the highest number of 5-star reviews for the company 'Wise'.,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for the company 'Wise' and 5-star reviews
    wise_reviews = db[db['Company'] == 'Wise']
    wise_reviews = wise_reviews[wise_reviews['rating'] == 5]

    # Group by country and count the number of reviews
    country_counts = wise_reviews.groupby('country_code').size()

    # Sort the countries by review count and get the top 3
    top_3_countries = country_counts.sort_values(ascending=False).head(3).index.tolist()

    return top_3_countries",list,"['GB', 'US', 'ES']","['GB', 'US', 'ES']"
Which are the 2 companies represented in the dataset?,What are the two unique company names in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	unique_companies = db['Company'].unique()
	unique_companies = unique_companies[:2]

	return unique_companies",category,"['Wise', 'N26']
Categories (2, object): ['Wise', 'N26']","['Wise', 'N26']"
Which are the bottom 4 countries in terms of review count? If two or more have the same number order them alphabetically.,"What are the bottom 4 countries in terms of review count, ordered alphabetically if there is a tie?","def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	# Group by country and count reviews
	country_review_counts = db.groupby('country_code').size()

	# Find the bottom 4 countries by review count
	bottom_countries = country_review_counts.nsmallest(4).index.tolist()

	# Sort the list alphabetically
	bottom_countries.sort()

	return bottom_countries",list,"['AI', 'FO', 'KR', 'PY']","['CW', 'FO', 'KZ', 'NE']"
What are the 3 most common countries? If two or more have the same number order them alphabetically.,"What are the top 3 countries with the highest number of reviews, ordered alphabetically in case of a tie?","def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Group by country and count the number of reviews
    country_review_count = db.groupby('country_code').size()
    
    # Sort the countries by review count and then alphabetically
    sorted_countries = country_review_count.sort_values(ascending=False).index.tolist()
    
    # Get the top 3 countries
    top_3_countries = sorted_countries[:3]
    
    return top_3_countries",category,"['GB', 'DE', 'FR']","['GB', 'DE', 'FR']"
What are the 3 most common ratings?,What are the top 3 ratings in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the 'rating' column
    ratings = db['rating']
    
    # Get the top 3 ratings
    top_3_ratings = ratings.nlargest(3).tolist()
    
    return top_3_ratings",list,"[5, 5, 5]","[5, 1, 4]"
What are the 2 least common ratings?,What are the two lowest ratings in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the two lowest ratings
    lowest_ratings = db['rating'].nsmallest(2)

    # Convert the ratings to a list of strings
    answer = [str(rating) for rating in lowest_ratings]

    return answer",category,"['1', '1']","[3, 2]"
What are the best 4 unique ratings given to 'Wise'?,What are the top 4 unique ratings given to the company 'Wise'?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for the company 'Wise'
    wise_data = db[db['Company'] == 'Wise']
    
    # Get the unique ratings and sort them in descending order
    unique_ratings = wise_data['rating'].unique()
    unique_ratings.sort(reverse=True)
    
    # Get the top 4 unique ratings
    top_4_ratings = unique_ratings[:4]
    
    return top_4_ratings",uint8,-,"[5, 4, 2, 1]"
What are the bottom 5 unique ratings given to 'N26'?,What are the bottom 5 unique ratings given to the company 'N26'?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for the company 'N26'
    n26_data = db[db['Company'] == 'N26']
    
    # Get the unique ratings for N26
    unique_ratings = n26_data['rating'].unique()
    
    # Sort the unique ratings in ascending order and get the bottom 5
    bottom_5_ratings = sorted(unique_ratings)[:5]
    
    return bottom_5_ratings",uint8,"[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]"
Is there any customer with a PhD education level?,Are there any customers with an education level of PhD?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	phd_customers = dataset[dataset[""Education""] == ""PhD""]

	return not phd_customers.empty
",bool,True,True
Do we have any customers who are married?,Are there any customers with a marital status of 'Married'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    married_customers = dataset[dataset['Marital_Status'] == 'Married']
    
    if married_customers.empty:
        return False
    else:
        return True",bool,True,True
Is there any customer with income higher than 100000?,Are there any customers with an income greater than 100000?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    customers_high_income = dataset[dataset['Income'] > 100000]
    
    if customers_high_income.empty:
        return False
    else:
        return True",bool,True,True
Has any customer made more than 10 web purchases?,Are there any customers with more than 10 web purchases?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	num_web_purchases = dataset[""NumWebPurchases""]
	web_purchases_gt_10 = num_web_purchases[num_web_purchases > 10]

	return not web_purchases_gt_10.empty
",bool,True,True
How many customers do we have in the dataset?,What is the count of unique IDs in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	unique_ids = dataset['ID'].nunique()
	return unique_ids",uint16,2240,2240
What's the average income of our customers?,What is the mean of the Income column in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    mean_income = dataset['Income'].mean()
    return mean_income",float64,52247.25135379061,52247.25135379061
What's the maximum number of web purchases made by a customer?,What is the maximum value in the 'NumWebPurchases' column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	max_num_web_purchases = db['NumWebPurchases'].max()
	return max_num_web_purchases",uint8,27,27
What's the minimum recency of purchase among the customers?,What is the minimum value of the 'Recency' column in the '032_Delicatessen' dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    min_recency = dataset['Recency'].min()
    return min_recency",uint8,0,0
What's the most common education level among our customers?,What is the most frequent education level in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    education_counts = dataset[""Education""].value_counts()
    most_frequent_education = education_counts.index[0]

    return most_frequent_education
",category,Graduation,Graduation
What's the most common marital status among our customers?,What is the most frequent marital status in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	marital_status_counts = dataset['Marital_Status'].value_counts()
	most_frequent_status = marital_status_counts.idxmax()

	return most_frequent_status",category,Married,Married
Who is the customer with the highest income?,What is the ID of the customer with the highest income?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	max_income_customer = dataset.loc[dataset[""Income""] == dataset[""Income""].max()]
	customer_id = max_income_customer[""ID""].astype(str)

	return customer_id.values[0]",string,9432,9432
Who is the customer with the most recent purchase?,What is the ID of the customer with the most recent purchase date?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_recency_customer = dataset.loc[dataset[""Recency""] == dataset[""Recency""].max()]
    customer_id = max_recency_customer[""ID""].values[0]

    return str(customer_id)",string,8595,4047
Who are the 3 customers with the highest income?,What are the names of the top 3 customers with the highest income?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    top_3_customers = dataset.nlargest(3, 'Income')['ID'].tolist()
    top_3_names = [str(i) for i in top_3_customers]

    return top_3_names",string,"['9432', '1503', '1501']","[9432, 1503, 1501]"
What are the 2 most common education levels among our customers?,What are the top two most frequent education levels in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    education_counts = dataset['Education'].value_counts()
    top_two_education = list(education_counts.index[:2])
    
    return top_two_education",category,"['Graduation', 'PhD']","['Graduation', 'PhD']"
What are the 3 most common marital statuses among our customers?,What are the top 3 most frequent marital statuses in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    marital_status_counts = db['Marital_Status'].value_counts()
    top_3_statuses = marital_status_counts[:3].index.tolist()

    return top_3_statuses",category,"['Married', 'Together', 'Single']","['Married', 'Together', 'Single']"
Who are the 3 customers with the most web purchases?,What are the IDs of the top 3 customers with the highest number of web purchases?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the relevant columns
    dataset = db[['ID', 'NumWebPurchases']]
    
    # Sort the dataset by NumWebPurchases in descending order
    sorted_dataset = dataset.sort_values(by='NumWebPurchases', ascending=False)
    
    # Get the top 3 rows
    top_3_customers = sorted_dataset.head(3)
    
    # Extract the IDs
    top_3_ids = top_3_customers['ID'].tolist()
    
    # Convert to string format
    top_3_ids_str = [str(i) for i in top_3_ids]
    
    return top_3_ids_str",string,"['5255', '4619', '10311']","[5255, 4619, 10311]"
What are the top 3 income values among our customers?,What are the three highest income values in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    top_3_incomes = dataset['Income'].nlargest(3)
    return top_3_incomes.tolist()",float64,"[666666.0, 162397.0, 160803.0]","[666666.0, 162397.0, 160803.0]"
What are the top 2 recency values among our customers?,What are the two highest values in the 'Recency' column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    recency_values = db['Recency']
    top_2_recency = list(recency_values.nlargest(2).values)
    return top_2_recency",uint8,"[99, 99]","[99, 99]"
What are the bottom 3 income values among our customers?,List the three lowest income values in the dataset.,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the Income column
    income_data = db[""Income""]

    # Sort the income values in ascending order and get the 3 lowest values
    three_lowest_incomes = sorted(income_data.unique())[:3]

    return three_lowest_incomes
",list of float64,"[1730.0, 2447.0, 5648.0]","[1730.0, 2447.0, 3502.0]"
What are the bottom 2 recency values among our customers?,What are the 2nd and 3rd lowest values in the 'Recency' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    recency_values = dataset['Recency'].sort_values()
    second_third_lowest = recency_values.iloc[1:3].tolist()
    
    return second_third_lowest",uint8,"[0, 0]","[0, 0]"
Is there any customer with a high salary?,Are there any employees with a salary category of 'high'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	high_salary_employees = dataset[dataset['salary'] == 'high']

	return not high_salary_employees.empty",bool,True,True
Do we have any employees who suffered a work accident?,Are there any employees with a work accident category value of 'Yes'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	work_accident_yes = dataset['Work Accident'] == 'Yes'
	return work_accident_yes.any()",bool,True,True
Is there any employee with more than 100 hours per month on average?,Are there any employees with an average monthly hours value greater than 100?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	high_hours_employees = dataset[dataset['Average Monthly Hours'] > 100]

	return not high_hours_employees.empty",bool,True,True
Does any employee have a satisfaction level above 0.9?,Are there any employees with a satisfaction level greater than 0.9?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	high_satisfaction_employees = dataset[dataset['Satisfaction Level (float64)'] > 0.9]

	return not high_satisfaction_employees.empty",bool,-,True
How many employees do we have in the dataset?,What is the total number of employees in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	total_employees = db.shape[0]
	return total_employees",uint16,14999,14999
What's the median satisfaction level of our employees?,What is the median value of the column 'Satisfaction Level' in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	median_satisfaction = dataset['Satisfaction Level'].median()
	return median_satisfaction",float64,0.64,0.64
What's the highest number of projects for a given employee?,What is the maximum number of projects for any employee?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	max_projects = dataset['Number of Projects'].max()

	return max_projects",uint8,7,7
What's the most common marital status among the employees?,What is the most frequent marital status in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	marital_status_counts = dataset['Marital_Status'].value_counts()
	most_frequent_status = marital_status_counts.idxmax()

	return most_frequent_status",category,Together,Together
What's the most common education level among our employees?,What is the most frequent value in the 'Education Level' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    education_level_counts = dataset['Education Level'].value_counts()
    most_frequent_education = education_level_counts.index[0]

    return most_frequent_education",string,-,Graduation
What's the most common marital status in the database?,What is the most frequent marital status in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    marital_status_counts = dataset[""Marital_Status""].value_counts()
    most_frequent_status = marital_status_counts.index[0]

    return most_frequent_status
",category,Together,Married
"Among the employees who have left the company in sales, what's the most common salary level?",What is the most frequent salary level among employees who have left the company in the sales department?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter employees who have left the company and are in the sales department
    left_sales_employees = db[(db['Left'] == 'Yes') & (db['Department'] == 'sales')]
    
    # Get the most frequent salary level
    most_frequent_salary = left_sales_employees['salary'].mode()[0]
    
    return most_frequent_salary",category,low,low
"Among the employees who have had a work accident in sales, what's the most common salary level?",What is the most frequent salary level for employees in the sales department who have experienced a work accident?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter employees in the sales department who had a work accident
    sales_accident_employees = dataset[(dataset['Department'] == 'sales') & (dataset['Work Accident'] == 'Yes')]
    
    # Get the most frequent salary level for these employees
    most_frequent_salary = sales_accident_employees['salary'].mode().values[0]
    
    return most_frequent_salary",category,medium,low
What are the top 3 satisfaction levels?,What are the top 3 categories of satisfaction levels?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the relevant column
    satisfaction_levels = db['Satisfaction Level (float64)']
    
    # Convert to a pandas series and find the top 3 unique values
    top_3_satisfaction_levels = pd.Series(satisfaction_levels).unique()[:3]
    
    # Convert to list and format the output as required
    top_3_categories = [str(level) for level in top_3_satisfaction_levels]
    
    return top_3_categories",category,-,"[1, 1, 1]"
What are the top 2 most common Work Accident statuses among our employees?,Which two work accident statuses are the most frequent in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	work_accident_counts = db['Work Accident'].value_counts()
	top_two_accidents = list(work_accident_counts.index[:2])

	return top_two_accidents",category,"['No', 'Yes']","['No', 'Yes']"
What are the top 3 most common marital statuses among our employees?,What are the top 3 marital statuses in the 'Marital_Status' column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    marital_status_counts = db['Marital_Status'].value_counts()
    top_3_marital_statuses = list(marital_status_counts.index[:3])
    
    return top_3_marital_statuses",category,"['Together', 'Single', 'Married']","['Together', 'Single', 'Married']"
What are the highest 3 years spent in the company? ,What are the top 3 years spent in the company?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the 'Years in the Company' column
    years_in_company = db['Years in the Company']
    
    # Get the top 3 values
    top_3_years = years_in_company.nlargest(3)
    
    return top_3_years.tolist()",uint8,"[10, 10, 10]","[10, 10, 10]"
What are the 3 departments with more 'medium' salary levels?,Which are the three departments with the highest number of employees on a 'medium' salary?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only 'medium' salary employees
    medium_salary_employees = db[db['salary'] == 'medium']
    
    # Group by department and count the number of employees in each department
    department_counts = medium_salary_employees['Department'].value_counts()
    
    # Get the top 3 departments
    top_3_departments = department_counts.nlargest(3).index.tolist()
    
    return top_3_departments",category,"['sales', 'technical', 'support']","['sales', 'technical', 'support']"
"For the 2 employees with the top satisfaction levels who belong to the sales department, what are their salary levels?",What are the salary levels of the 2 employees with the highest satisfaction levels in the sales department?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for the sales department
    sales_dept = dataset[dataset['Department'] == 'sales']
    
    # Sort the sales department data by satisfaction level in descending order
    sorted_sales_dept = sales_dept.sort_values(by='Satisfaction Level', ascending=False)
    
    # Get the salary levels of the top 2 employees
    top_2_salaries = sorted_sales_dept['salary'][:2].tolist()
    
    return top_2_salaries",category,"['medium', 'medium']","['low', 'low']"
What are the top 3 average monthly hours worked among the employees in the top 3 departments with the most employees?,What are the top 3 average monthly hours worked in the top 3 departments with the most employees?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the top 3 departments with the most employees
    top_departments = dataset['Department'].value_counts().head(3).index.tolist()
    
    # Filter the dataset to include only the top departments
    filtered_data = dataset[dataset['Department'].isin(top_departments)]
    
    # Calculate the top 3 average monthly hours for the filtered dataset
    top_avg_hours = filtered_data['Average Monthly Hours'].head(3).tolist()
    
    return top_avg_hours",float64,"[160, 158, 300]","[200.91135265700484, 202.49742647058824, 200.75818752803949]"
What are the lowest 2 satisfaction levels among the employees who have not had a work accident?,What are the two lowest satisfaction levels of employees who have not had a work accident?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter employees who have not had a work accident
    no_accident_employees = dataset[dataset['Work Accident (category)'] == 'No']
    
    # Sort by satisfaction level and get the two lowest values
    two_lowest_satisfaction = no_accident_employees.nsmallest(2, 'Satisfaction Level (float64)')['Satisfaction Level (float64)'].tolist()
    
    return two_lowest_satisfaction",float64,-,"[0.09, 0.09]"
"Is there any country with a Ladder score above 7.5, a Generosity score above 0.2, and a Social support score above 0.7?","Are there any countries with a 'Ladder score' greater than 7.5, a 'Generosity' score greater than 0.2, and a 'Social support' score greater than 0.7?","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset based on the conditions
    filtered_data = dataset[
        (dataset[""Ladder score""] > 7.5)
        & (dataset[""Generosity""] > 0.2)
        & (dataset[""Social support""] > 0.7)
    ]

    # Check if any rows satisfy the conditions
    answer = not filtered_data.empty

    return answer
",bool,True,True
"Are there any countries in Western Europe with a Perceptions of corruption score above 0.5, a Ladder score above 7, and a Social support score above 0.7?","Are there any countries in the 'Western Europe' category with a 'Perceptions of corruption' score greater than 0.5, a 'Ladder score' greater than 7, and a 'Social support' score greater than 0.7?","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for the 'Western Europe' category
    western_europe = dataset[dataset[""Regional indicator""] == ""Western Europe""]

    # Further filter the dataset for the given conditions
    filtered_data = western_europe[
        (western_europe[""Perceptions of corruption""] > 0.5)
        & (western_europe[""Ladder score""] > 7)
        & (western_europe[""Social support""] > 0.7)
    ]

    # Check if any rows satisfy the conditions
    result = not filtered_data.empty

    return result
",bool,True,True
Are there any countries in Western Europe with a Perceptions of corruption score above 0.5?,Are there any countries in the 'Country name' column with a 'Perceptions of corruption' score greater than 0.5?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get countries with 'Perceptions of corruption' score greater than 0.5
    high_corruption_countries = dataset[dataset['Perceptions of corruption'] > 0.5]

    # Check if there are any countries in the filtered dataset
    if high_corruption_countries.empty:
        return False
    else:
        return True
",bool,True,True
Is there any country with a Social support score below 0.5?,Are there any countries with a Social support score less than 0.5?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	social_support_lt_05 = dataset['Social support'] < 0.5
	return social_support_lt_05.any()",bool,True,True
What's the average Ladder score among the countries in Western Europe with a Generosity score above 0.2 and a Social support score above 0.7?,What is the mean of the Ladder score for countries in Western Europe with a Generosity score greater than 0.2 and a Social support score greater than 0.7?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter countries in Western Europe with Generosity and Social support scores above the given thresholds
    filtered_data = db[
        (db[""Regional indicator""] == ""Western Europe"")
        & (db[""Generosity""] > 0.2)
        & (db[""Social support""] > 0.7)
    ]

    # Calculate the mean of the Ladder score for the filtered data
    mean_ladder_score = filtered_data[""Ladder score""].mean()

    return mean_ladder_score
",float64,7.222675085250001,7.222675085250001
What's the average Perceptions of corruption score among the countries in Sub-Saharan Africa with a Ladder score below 5 and a Social support score below 0.5?,What is the mean of the 'Perceptions of corruption' column for the countries in the 'Sub-Saharan Africa' region with a 'Ladder score' less than 5 and a 'Social support' score less than 0.5?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    filtered_data = dataset[(dataset['Regional indicator'] == 'Sub-Saharan Africa') & (dataset['Ladder score'] < 5) & (dataset['Social support'] < 0.5)]
    mean_perception_corruption = filtered_data['Perceptions of corruption'].mean()

    return mean_perception_corruption
",float64,0.7493706045,0.7493706045
What's the maximum Generosity score among the countries?,What is the highest Generosity score across all countries?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_generosity = dataset['Generosity'].max()
    return max_generosity",float64,0.560663998,0.560663998
What's the minimum Social support score among the countries?,What is the lowest Social support score across all countries?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	min_social_support = dataset['Social support (float64)'].min()
	return min_social_support",float64,-,0.319459856
Which region has the highest number of countries with a Ladder score above 7 and a Generosity score above 0.2?,What is the name of the region with the highest count of countries having a Ladder score greater than 7 and a Generosity score greater than 0.2?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter countries with Ladder score greater than 7 and Generosity score greater than 0.2
    filtered_countries = dataset[(dataset['Ladder score'] > 7) & (dataset['Generosity'] > 0.2)]
    
    # Group by 'Regional indicator' and count the number of countries in each region
    region_counts = filtered_countries.groupby('Regional indicator').size()
    
    # Find the region with the highest count
    max_region = region_counts.idxmax()
    
    return max_region",category,Western Europe,Western Europe
Which region accounts for the most countries with a Generosity score above 0.2?,What is the name of the region with the highest count of countries having a Generosity score greater than 0.2?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter countries with Generosity score greater than 0.2
    filtered_countries = dataset[dataset['Generosity'] > 0.2]
    
    # Group by 'Regional indicator' and count the number of countries in each region
    region_counts = filtered_countries.groupby('Regional indicator').size()
    
    # Find the region with the highest count
    max_region = region_counts.idxmax()
    
    return max_region",string,Western Europe,Western Europe
In which region are the majority of countries with a Perceptions of corruption score below 0.5 located?,What is the name of the region where most countries with a Perceptions of corruption score less than 0.5 are located?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter countries with Perceptions of corruption score less than 0.5
    filtered_countries = db[db['Perceptions of corruption'] < 0.5]

    # Get the Regional indicator for these countries
    region = filtered_countries['Regional indicator'].mode().values[0]

    return region
",string,Western Europe,Western Europe
In which region can you find the majority of countries with a Social support score above 0.7?,What is the most common region for countries with a Social support score greater than 0.7?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter countries with Social support score greater than 0.7
    filtered_countries = dataset[dataset['Social support'] > 0.7]
    
    # Get the most common region from the filtered countries
    most_common_region = filtered_countries['Regional indicator'].mode().values[0]
    
    return most_common_region",category,Western Europe,Western Europe
Can you name the three regions that have the most countries with a Ladder score above 7 and a Generosity score above 0.2?,What are the three regions with the highest number of countries having a Ladder score greater than 7 and a Generosity score greater than 0.2?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset based on the conditions
    filtered_data = db[(db['Ladder score'] > 7) & (db['Generosity'] > 0.2)]
    
    # Group by 'Regional indicator' and count the number of countries in each region
    region_counts = filtered_data['Regional indicator'].value_counts()
    
    # Get the top 3 regions
    top_3_regions = region_counts.head(3).index.tolist()
    
    return top_3_regions",category,"['Western Europe', 'North America and ANZ', 'Middle East and North Africa']",['Western Europe']
What are the top 3 regions with the most countries with a Generosity score above 0.2?,What are the top 3 regions with the most countries with a Generosity score greater than 0.2?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter countries with Generosity score greater than 0.2
    filtered_countries = dataset[dataset['Generosity'] > 0.2]
    
    # Group by region and count the number of countries
    region_counts = filtered_countries.groupby('Regional indicator').size()
    
    # Sort the regions by count in descending order and get the top 3
    top_3_regions = region_counts.sort_values(ascending=False)[:3].index.tolist()
    
    return top_3_regions",category,"['Western Europe', 'Southeast Asia', 'Sub-Saharan Africa']","['Western Europe', 'Southeast Asia', 'Sub-Saharan Africa']"
Identify the three highest Ladder scores from countries in Western Europe that have a Generosity score above 0.2 and a Social support score above 0.7.,What are the top three 'Ladder scores' for countries in Western Europe with a 'Generosity' score greater than 0.2 and a 'Social support' score greater than 0.7?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter countries in Western Europe with the given conditions
    filtered_data = dataset[(dataset['Regional indicator'] == 'Western Europe') & (dataset['Generosity'] > 0.2) & (dataset['Social support'] > 0.7)]
    
    # Sort the filtered data by 'Ladder score' in descending order and get the top 3 values
    top_3_scores = filtered_data.nlargest(3, 'Ladder score')['Ladder score'].tolist()
    
    return top_3_scores",float64,"[7.504499912, 7.448900223, 7.164500237]","[7.504499912, 7.448900223, 7.164500237]"
What are the top 3 Perceptions of corruption scores among the countries in Sub-Saharan Africa?,What are the top 3 values of the 'Perceptions of corruption' column for the countries in the 'Sub-Saharan Africa' region?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for the 'Sub-Saharan Africa' region
    sub_saharan_africa = db[db['Regional indicator'] == 'Sub-Saharan Africa']

    # Get the top 3 values of the 'Perceptions of corruption' column
    top_3_perceptions = sub_saharan_africa['Perceptions of corruption'].nlargest(3)

    return top_3_perceptions.tolist()
",float64,"[0.891806662, 0.861874342, 0.861330688]","[0.891806662, 0.861874342, 0.861330688]"
What are the top 3 Generosity scores among the countries in Western Europe?,What are the top 3 Generosity scores for countries in Western Europe?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for Western European countries
    western_europe = dataset[dataset['Regional indicator'] == 'Western Europe']
    
    # Sort the countries by Generosity in descending order
    sorted_countries = western_europe.sort_values(by='Generosity', ascending=False)
    
    # Get the top 3 countries and their Generosity scores
    top_3_generosity = sorted_countries['Generosity'].head(3)
    
    return top_3_generosity.tolist()",float64,"[0.263732493, 0.246944219, 0.214965805]","[0.263732493, 0.246944219, 0.214965805]"
What are the top 3 Social support scores among the countries in Sub-Saharan Africa?,What are the top 3 Social support scores for countries in the Sub-Saharan Africa region?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for the Sub-Saharan Africa region
    sub_saharan_africa = dataset[dataset['Regional indicator'] == 'Sub-Saharan Africa']
    
    # Sort the filtered dataset by Social support in descending order
    sorted_by_social_support = sub_saharan_africa.sort_values(by='Social support', ascending=False)
    
    # Get the top 3 Social support scores
    top_3_social_support = sorted_by_social_support['Social support'].head(3).tolist()
    
    return top_3_social_support",float64,"[0.910357833, 0.852532268, 0.846880972]","[0.910357833, 0.852532268, 0.846880972]"
Which are the three lowest Ladder scores in Western Europe?,What are the three lowest values of the 'Ladder score' column for the 'Country name' values in the 'Western Europe' category?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for 'Western Europe' countries
    western_europe = dataset[dataset['Country name'] == 'Western Europe']
    
    # Sort the 'Ladder score' column in ascending order and get the bottom 3 values
    bottom_3_scores = western_europe['Ladder score'].nsmallest(3)
    
    # Convert the values to a list
    answer = bottom_3_scores.tolist()
    
    return answer",list,[],"[5.514999866, 5.53550005, 5.910900116]"
Which are the three lowest Perceptions of corruption scores in Sub-Saharan Africa?,What are the names of the three countries in Sub-Saharan Africa with the lowest 'Perceptions of corruption' scores?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    sub_saharan_africa = dataset[dataset['Regional indicator'] == 'Sub-Saharan Africa']
    sub_saharan_africa_sorted = sub_saharan_africa.sort_values(by='Perceptions of corruption')
    lowest_three_countries = sub_saharan_africa_sorted.head(3)['Country name'].tolist()

    return lowest_three_countries",string,"['Rwanda', 'Burundi', 'Tanzania']","[0.183541179, 0.606934547, 0.619799435]"
Is the song with the highest rank from 1965?,Does the song with the highest rank belong to the year 1965?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_rank_song = dataset.loc[dataset[""Rank""] == dataset[""Rank""].max()]
    song_year = max_rank_song[""Year""].values[0]
    
    return song_year == 1965",bool,True,True
Does the song with the lowest rank contain the word 'love' in its lyrics?,Does the song with the highest rank contain the word 'love' in its lyrics?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    highest_rank_song = dataset.loc[dataset[""Rank""] == dataset[""Rank""].min()]
    lyrics = highest_rank_song[""Lyrics""].values[0]
    contains_love = 'love' in lyrics.lower()
    
    return contains_love",bool,False,True
Is the artist of the song with the highest rank the same as the artist of the song with the lowest rank?,Do the songs with the highest and lowest ranks have the same artist?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Get the songs with the highest and lowest ranks
    highest_rank_song = dataset.loc[dataset[""Rank""] == dataset[""Rank""].min()]
    lowest_rank_song = dataset.loc[dataset[""Rank""] == dataset[""Rank""].max()]
    
    # Get the artists of the songs
    highest_artist = highest_rank_song[""Artist""].values[0]
    lowest_artist = lowest_rank_song[""Artist""].values[0]
    
    # Check if the artists are the same
    if highest_artist == lowest_artist:
        return True
    else:
        return False",bool,False,False
Are there songs without lyrics?,Are there any songs with a null value in the Lyrics column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    null_lyrics = dataset['Lyrics'].isnull()
    return null_lyrics.any()",bool,True,True
How many songs were produced in 1965?,What is the count of songs produced in the year 1965?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset for the year 1965
	year_filter = db['Year'] == 1965

	# Count the number of songs for the filtered year
	song_count = db[year_filter]['Song'].count()

	return song_count",uint16,100,100
In which year was the song with the highest rank produced?,What is the year of the song with the highest rank?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    max_rank_song = dataset.loc[dataset[""Rank""] == dataset[""Rank""].max()]
    year = max_rank_song[""Year""].values[0]

    return year",uint16,1965,1965
What's the rank of the song with the longest lyrics?,What is the rank of the song with the highest number of characters in the lyrics?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to find the song with the highest number of characters in the lyrics
    max_lyrics_song = dataset.loc[dataset['Lyrics'].str.len() == dataset['Lyrics'].str.len().max()]
    
    # Get the rank of the song
    song_rank = max_lyrics_song['Rank'].values[0]
    
    return song_rank",uint8,19,19
How many unique artists are there in the dataset?,What is the count of distinct artists in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	distinct_artists = dataset['Artist'].nunique()
	return distinct_artists",uint64,2473,2473
Who is the artist of the song with the highest rank?,What is the artist of the song with the highest rank?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	max_rank_song = dataset.loc[dataset[""Rank""] == dataset[""Rank""].min()]
	artist = max_rank_song[""Artist""].values[0]

	return artist",string,sam the sham and the pharaohs,sam the sham and the pharaohs
What is the title of the song with the lowest rank?,What is the song title of the song with the minimum rank?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    min_rank_song = dataset.loc[dataset[""Rank""] == dataset[""Rank""].min()]
    song_title = min_rank_song[""Song""].values[0]

    return song_title",string,wooly bully,how sweet it is to be loved by you
Which song's lyrics contain the word 'love' the most times?,What is the name of the song that has the highest frequency of the word 'love' in its lyrics?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to only include rows with the word 'love' in the lyrics
    filtered_data = dataset[dataset['Lyrics'].str.contains('love', case=False)]
    
    # Count the frequency of each song
    song_freq = filtered_data['Song'].value_counts()
    
    # Get the song with the highest frequency
    highest_freq_song = song_freq.idxmax()
    
    return highest_freq_song",string,-,the way you love me
What is the title of the top song produced in the earliest year?,What is the title of the song with the lowest year value?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    min_year_song = dataset.loc[dataset[""Year""] == dataset[""Year""].min()]
    song_title = min_year_song[""Song""].values[0]

    return song_title",string,wooly bully,wooly bully
Who are the artists of the top 5 ranked songs?,What are the artists of the top 5 songs based on rank?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    top_5_songs = dataset.head(5)
    artists = top_5_songs['Artist'].tolist()

    return artists",list of strings,"['sam the sham and the pharaohs', 'four tops', 'the rolling stones', 'we five', 'the righteous brothers']","['sam the sham and the pharaohs', 'ssgt barry sadler', 'the beach boys', 'the beatles', 'the beatles']"
What are the titles of the 3 songs with the shortest lyrics?,List the titles of the top 3 songs with the least number of lyrics.,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the top 3 songs with the least number of lyrics
    top_3_songs = dataset.nsmallest(3, 'Lyrics')
    
    # Extract the song titles from the filtered dataset
    song_titles = top_3_songs['Song'].tolist()
    
    # Return the list of song titles
    return song_titles",list of strings,-,"['girl youll be a woman soon', 'papa dont preach', 'breathe']"
What are the top 4 songs by rank produced in the most recent year?,What are the top 4 songs by rank from the most recent year?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the most recent year
    recent_year = dataset['Year'].max()
    recent_year_data = dataset[dataset['Year'] == recent_year]
    
    # Sort the data by rank and get the top 4 songs
    top_songs = recent_year_data.sort_values(by='Rank').head(4)['Song'].tolist()
    
    return top_songs",string,"['uptown funk', 'thinking out loud', 'see you again', 'trap queen']","['uptown funk', 'thinking out loud', 'see you again', 'trap queen']"
Who are the artists of the bottom 5 ranked songs?,What are the artists of the songs ranked 5th to 1st from the bottom?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    bottom_songs = dataset.nsmallest(5, 'Rank')
    artists = bottom_songs['Artist'].tolist()

    return artists",list of strings,"['sam the sham and the pharaohs', 'ssgt barry sadler', 'lulu', 'the beatles', 'the archies']","['marvin gaye', 'wilson pickett', 'neil diamond', 'jerry butler', 'the beatles']"
What are the ranks of the top 3 songs with the most occurrences of the word 'love' in their lyrics?,What are the ranks of the top 3 songs with the highest number of 'love' occurrences in their lyrics?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter songs with 'love' in their lyrics
    love_songs = dataset[dataset['Lyrics'].str.contains('love', case=False)]
    
    # Sort songs by rank and get the top 3
    top_3_songs = love_songs.sort_values(by='Rank').head(3)
    
    # Get the ranks of the top 3 songs
    top_3_ranks = top_3_songs['Rank'].tolist()
    
    return top_3_ranks",uint8,-,"[64, 41, 28]"
What are the years of production of the bottom 4 ranked songs?,List the years of the bottom 4 ranked songs.,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    bottom_songs = dataset.nsmallest(4, 'Rank')
    years = bottom_songs['Year'].tolist()

    return years",list of uint16,"[1965, 1966, 1967, 1968]","[1965, 1966, 1967, 1968]"
What are the ranks of the 2 songs produced in the earliest year?,What are the ranks of the top 2 songs produced in the earliest year?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the earliest year
    earliest_year_data = dataset[dataset['Year'] == dataset['Year'].min()]
    
    # Get the top 2 songs from the earliest year
    top_2_songs = earliest_year_data.nsmallest(2, 'Rank')
    
    # Get the ranks of the top 2 songs
    ranks = top_2_songs['Rank'].tolist()
    
    return ranks",list of uint8,"[1, 2]","[1, 2]"
What are the years of production of the top 5 songs with the longest lyrics?,What are the years of the top 5 songs with the longest lyrics?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the top 5 songs with the longest lyrics
    top_songs = dataset.nlargest(5, 'Source')
    
    # Extract the years of these top songs
    years = top_songs['Year'].tolist()
    
    return years",uint16,"[1965, 1965, 1965, 1965, 1965]","[1998, 2009, 2010, 2007, 2002]"
Is the song with the highest rank from 1965 by the Beatles?,Is the song with the highest rank from 1965 by the artist 'The Beatles'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for the year 1965 and artist 'The Beatles'
    filtered_data = dataset[(dataset['Year'] == 1965) & (dataset['Artist'] == 'The Beatles')]
    
    # Check if the highest rank in the filtered data is the same as the highest rank overall
    max_rank_in_filtered = filtered_data['Rank'].max()
    max_rank_overall = dataset['Rank'].max()
    
    if max_rank_in_filtered == max_rank_overall:
        return True
    else:
        return False",bool,False,False
Which artist has the song with the highest rank in 1965?,What is the name of the artist who has the highest-ranked song in the year 1965?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    highest_ranked_1965 = dataset[(dataset[""Year""] == 1965) & (dataset[""Rank""] == dataset[""Rank""].min())]
    artist_name = highest_ranked_1965[""Artist""].values[0]
    
    return artist_name",string,sam the sham and the pharaohs,sam the sham and the pharaohs
Who are the artists of the top 3 songs in 1965?,"What are the artists of the songs that have a rank of 1, 2 or 3 in the year 1965?","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset for the specified year and ranks
    filtered_data = dataset[(dataset['Year'] == 1965) & (dataset['Rank'].isin([1, 2, 3]))]
    
    # Extract the artists from the filtered data
    artists = filtered_data['Artist'].tolist()
    
    return artists",list of strings,"['sam the sham and the pharaohs', 'four tops', 'the rolling stones']","['sam the sham and the pharaohs', 'four tops', 'the beach boys']"
What are the years of production of the top 3 songs with the word 'love' in their lyrics by the Beatles?,List the years of production of the top 3 songs with the word 'love' in their lyrics by the Beatles.,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter songs by Beatles and 'love' in lyrics
    beatles_love_songs = dataset[(dataset['Artist'] == 'Beatles') & (dataset['Lyrics'].str.contains('love', case=False))]
    
    # Sort by rank and get top 3
    top_3_songs = beatles_love_songs.sort_values(by='Rank').head(3)
    
    # Extract years and convert to list
    years = top_3_songs['Year'].tolist()
    
    return years",list of uint16,[],"[1967, 1965, 1966]"
"Are there records where the 'count' exceeds 20,000?",Are there any records where the 'count' value is greater than 20000?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    count_greater_than_20000 = dataset['count'] > 20000
    return count_greater_than_20000.any()",bool,True,True
Do we have any records originating from 'Jefferson'?,Are there any records where the 'name_origin' is 'Jefferson'?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	df = db
	name_origin_records = df['name_origin'].str.contains('Jefferson', case=False)
	return name_origin_records.any()",bool,True,True
Are there destinations with the name 'Baldwin'?,Are there any destinations with the name 'Baldwin' in the 'name_dest' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Check if there are any rows with 'Baldwin' in the 'name_dest' column
	is_baldwin_present = dataset['name_dest'].str.contains('Baldwin', case=False).any()

	return is_baldwin_present",bool,True,True
Are there records where the latitude of the destination is greater than 60?,Are there any records where the 'lat_dest' value is greater than 60?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Filter records where 'lat_dest' is greater than 60
	filtered_records = dataset[dataset['lat_dest'] > 60]
	
	# Check if any records are present
	answer = not filtered_records.empty

	return answer",bool,True,True
How many unique destinations are there in the dataset?,What is the count of distinct values in the 'dest' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	unique_dest_count = dataset['dest'].nunique()
	return unique_dest_count",uint32,3219,3219
"On average, how many times is each origin-destination pair reported?",What is the average count of each origin-destination pair?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    avg_count = dataset['count'].mean()
    return avg_count",float64,67.7453798126951,67.7453798126951
What's the highest count value in the dataset?,What is the maximum value in the 'count' column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	max_count = db['count'].max()
	return max_count",uint16,40580,40580
How many unique origin names are there in the dataset?,What is the number of distinct origin names in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	distinct_origins = db['name_origin'].nunique()
	return distinct_origins",uint32,1904,1904
From which origin do we have the highest 'count' recorded?,What is the maximum value of the 'count' column in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	max_count = dataset['count'].max()
	return max_count",uint16,40580,
To which destination do we find the highest 'count' reported?,What is the destination with the highest count?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	max_count_dest = dataset.loc[dataset[""count""] == dataset[""count""].max()]
	max_count_dest_name = max_count_dest[""dest""].astype(str).values[0]

	return max_count_dest_name
",uint32,6037,Los Angeles
Which origin has the lowest latitude?,What is the minimum latitude of the origin?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    min_lat_origin = db['lat_origin'].min()
    return min_lat_origin",float64,17.98805744,Guáanica
Which destination has the highest longitude?,What is the destination with the highest longitude?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the maximum longitude value and its corresponding destination
    max_lon_dest = db[['dest', 'lon_dest']].loc[db['lon_dest'] == db['lon_dest'].max()]
    
    # Return the destination value as expected
    return max_lon_dest['dest'].values[0]",uint32,72053,Fajardo
What are the 3 origins with the highest average count?,What are the top 3 origins with the highest average count?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Group by origin and calculate average count
    origin_avg_count = db.groupby('origin')['count'].mean()
    
    # Sort the values in descending order and get the top 3 origins
    top_3_origins = origin_avg_count.sort_values(ascending=False)[:3].index.tolist()
    
    # Return the top 3 origins as a list of strings
    return [str(origin) for origin in top_3_origins]",category,-,"['Los Angeles', 'New York', 'San Francisco']"
Which are the 4 destinations with the lowest average count?,What are the 4 destinations with the lowest average count?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Group by destination and calculate the average count
    avg_count = db.groupby('dest')['count'].mean()

    # Sort the average count in ascending order and get the top 4 destinations
    top_4_dest = avg_count.sort_values().index[:4]

    return top_4_dest.tolist()",uint32,"[15005, 30011, 48301, 31117]","['Kalawao', 'Loving', 'Kenedy', 'Wheatland']"
List the 5 origins with the highest average latitude values.,What are the top 5 origins with the highest average latitude values?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the required columns
    dataset = db[['origin', 'lat_origin']]
    
    # Group by origin and calculate the average latitude
    avg_lat_origin = dataset.groupby('origin')['lat_origin'].mean()
    
    # Sort the values in descending order and get the top 5 origins
    top_5_origins = avg_lat_origin.sort_values(ascending=False)[:5].index.tolist()
    
    return top_5_origins",list,-,"['North Slope', 'Northwest Arctic', 'Yukon-Koyukuk', 'Nome', 'Fairbanks North Star']"
Which 2 origins have the lowest non-null average longitude values?,What are the two origins with the lowest non-null average longitude values?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter non-null values
    filtered_df = db[db['lon_origin'].notnull()]
    
    # Calculate average longitude for each origin
    avg_lon_origin = filtered_df.groupby('name_origin')['lon_origin'].mean()
    
    # Find the two origins with the lowest average longitude
    two_lowest_origins = avg_lon_origin.nsmallest(2).index.tolist()
    
    return two_lowest_origins",string,"['Aleutians West', 'Nome']","['Aleutians West', 'Nome']"
List the highest 5 count values.,What are the top 5 values in the 'count' column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    top_5_counts = db['count'].nlargest(5)
    return top_5_counts.tolist()",uint16,"[40580, 39899, 38430, 28524, 24452]","[40580, 39899, 38430, 28524, 24452]"
What are the 3 highest latitude values for destinations?,What are the top 3 highest latitude values in the 'lat_dest' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    top_3_latitudes = dataset[""lat_dest""].nlargest(3)
    return top_3_latitudes.tolist()
",float64,"[69.42718361, 69.42718361, 69.42718361]","[69.42718361, 69.42718361, 69.42718361]"
Rank the lowest 4 longitude values for origins.,What are the four lowest longitude values for origins?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the four lowest longitude values for origins
    lowest_lon_origins = dataset['lon_origin'].nsmallest(4)
    
    # Return the list of four lowest longitude values
    return lowest_lon_origins.tolist()",float64,"[-167.08526, -167.08526, -167.08526, -167.08526]","[-167.08526, -167.08526, -167.08526, -167.08526]"
Which 6 destination IDs have the highest average counts?,What are the top 6 destination IDs with the highest average counts?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Group by destination ID and calculate the average count
    avg_count_by_dest = db.groupby('dest')['count'].mean()
    
    # Sort the values in descending order and get the top 6
    top_6_dest_ids = avg_count_by_dest.sort_values(ascending=False)[:6].index.tolist()
    
    return top_6_dest_ids",list,"[6037, 36061, 48201, 6059, 6071, 6085]","[6037, 36061, 48201, 6059, 6071, 6085]"
Are there talks with more than a million views?,"Are there any talks with views greater than 1,000,000?","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset to check if there are any talks with views greater than 1,000,000
	high_view_talks = dataset[dataset['views'] > 1000000]
	
	# Check if the filtered dataset is empty
	if high_view_talks.empty:
		return False
	else:
		return True",bool,True,True
Is there a talk by 'Elon Musk'?,Does the dataset contain a talk by the speaker 'Elon Musk'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	speaker_exists = dataset['speaker_1'].str.contains('Elon Musk', case=False).any()

	return speaker_exists",bool,True,True
Are there any TEDx events included?,Are there any events in the dataset with the category 'TEDx'?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    tedx_events = dataset['event'].str.contains('TEDx')
    return tedx_events.any()",bool,True,True
Are there talks available in more than 10 languages?,Are there talks with more than 10 languages listed in the 'available_lang' column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the talks with more than 10 languages in the 'available_lang' column
    talks_with_many_langs = db[db[""available_lang""].str.count("","") > 9]

    # Check if there are any such talks
    answer = not talks_with_many_langs.empty

    return answer
",bool,False,True
How many unique speakers are there in the dataset?,What is the number of distinct speakers in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Extracting the speaker columns
	speaker_cols = [col for col in dataset.columns if 'speaker' in col]

	# Extracting all speakers and flattening the list
	all_speakers = [speaker for speakers in dataset[speaker_cols].values for speaker in speakers if speaker is not None]

	# Counting the number of distinct speakers
	num_distinct_speakers = len(set(all_speakers))

	return num_distinct_speakers",uint16,9557,3274
What's the average number of views for the talks?,What is the mean of the views column?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	mean_views = db['views'].mean()
	return mean_views",float64,2148005.5737827714,2148005.5737827714
What's the maximum duration of a talk (in seconds)?,What is the maximum value of the 'duration' column in the dataset?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	max_duration = db['duration'].max()
	return max_duration",uint16,3922,3922
How many talks have more than 500 comments?,What is the count of talks with comments greater than 500?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	# Filter the dataset to include only talks with comments greater than 500
	filtered_talks = dataset[dataset['comments'] > 500]

	# Count the number of talks
	talk_count = filtered_talks['talk_id'].nunique()

	return talk_count",uint16,186,186
Which event has the highest average views?,What is the event with the maximum average views?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Group by event and calculate the average views
    avg_views_by_event = db.groupby('event')['views'].mean()
    
    # Find the event with the maximum average views
    max_avg_view_event = avg_views_by_event.idxmax()
    
    return max_avg_view_event",uint32,TEDxPuget Sound,TEDxPuget Sound
Which speaker's talk has the most comments?,What is the talk ID of the speaker with the highest number of comments?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
	max_comments_speaker = db.loc[db['comments'] == db['comments'].max()]
	talk_id = max_comments_speaker['talk_id'].values[0]

	return talk_id",uint16,113,Richard Dawkins
Which talk's title has the least views?,What is the title of the talk with the lowest number of views?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	min_views_talk = dataset.loc[dataset[""views""] == dataset[""views""].min()]
	talk_title = min_views_talk[""title""].values[0]

	return talk_title",string,Por qué necesitamos proteger el alta mar,Por qué necesitamos proteger el alta mar
In which event was the longest talk held?,Which event had the talk with the maximum duration?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	max_duration_talk = dataset.loc[dataset[""duration""] == dataset[""duration""].max()]
	event_with_max_duration = max_duration_talk[""event""].values[0]

	return event_with_max_duration",category,Countdown,Countdown
Which are the top 4 events with the highest average number of comments?,What are the top 4 events with the highest average number of comments?,"def answer_question(db, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to include only the required columns
    dataset = db[['event', 'comments']]
    
    # Calculate the average number of comments for each event
    avg_comments = dataset.groupby('event')['comments'].mean().reset_index()
    
    # Sort the events by average number of comments in descending order
    sorted_events = avg_comments.sort_values('comments', ascending=False)
    
    # Get the top 4 events
    top_events = sorted_events.head(4)['event'].tolist()
    
    return top_events",category,"['TEDxPuget Sound', 'TEDxHouston', 'TEDxFiDiWomen', 'TEDxUW']","['TEDxPuget Sound', 'TEDxHouston', 'TEDxFiDiWomen', 'TEDxUW']"
List the top 3 most frequent speakers in the dataset. If two have the same count go by alphabetical order. ,"What are the top 3 most frequent speakers in the dataset, ordered by frequency and then alphabetically?","def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    speaker_frequency = dataset['speaker_1'].value_counts()
    top_3_speakers = list(speaker_frequency.index[:3])
    top_3_speakers.sort()

    return top_3_speakers",string,"['Alex Gendler', 'Emma Bryce', 'Iseult Gillespie']","['Alex Gendler', 'Iseult Gillespie', 'Emma Bryce']"
Which 5 events have the shortest average talk durations?,What are the names of the top 5 events with the least average duration?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by event and calculate the average duration
    event_avg_duration = dataset.groupby('event')['duration'].mean()
    
    # Sort the events by average duration and get the top 5
    top_5_events = event_avg_duration.nsmallest(5).index.tolist()
    
    # Return the top 5 events as a list of strings
    return [str(event) for event in top_5_events]",category,"['TEDxConcorde', 'Small Thing Big Idea', 'The TED Interview', 'TEDxConcordiaUPortland', 'The Way We Work']","['TEDxConcorde', 'Small Thing Big Idea', 'The TED Interview', 'TEDxConcordiaUPortland', 'The Way We Work']"
List 2 events with the most number of talks.,What are the names of the two events with the highest number of talks?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Group by event and count the number of talks
    event_counts = dataset['event'].value_counts()
    
    # Get the two events with the highest counts
    top_two_events = event_counts.index[:2]
    
    # Return the names of the two events
    return list(top_two_events)",string,"['TED-Ed', 'TED2018']","['TED-Ed', 'TED2018']"
What are the top 4 most viewed talks' view counts?,What are the view counts of the top 4 most viewed talks?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    top_views = dataset.nlargest(4, 'views')['views'].tolist()
    return top_views",uint32,"[65051954, 57074270, 56932551, 49730580]","[65051954, 57074270, 56932551, 49730580]"
List the 3 shortest talk durations in the dataset.,What are the three shortest talk durations in the dataset?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    # Filter the dataset to get the 'duration' column
    talk_durations = dataset['duration']
    
    # Get the three shortest durations
    three_shortest_durations = talk_durations.nsmallest(3)
    
    return three_shortest_durations.tolist()",list of uint16,"[60, 78, 78]","[60, 78, 78]"
What are the 5 highest number of comments?,What are the top 5 highest values in the 'comments' column?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	top_5_comments = dataset['comments'].nlargest(5)
	return top_5_comments.tolist()",float64,"[6449.0, 4931.0, 3424.0, 3006.0, 2984.0]","[6449.0, 4931.0, 3424.0, 3006.0, 2984.0]"
List the view counts of the 6 least viewed talks.,What are the view counts of the six least viewed talks?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
	least_viewed_talks = dataset.nsmallest(6, 'views')
	view_counts = least_viewed_talks['views'].tolist()

	return view_counts",uint32,"[0, 0, 0, 0, 0, 0]","[0, 0, 0, 0, 0, 0]"
Is it true that the oldest person in the dataset has a stroke?,Does the oldest person in the dataset have a stroke?,"def answer_question(dataset, datasetTableSchema, question, expectedAnswerType):
    oldest_person = dataset.loc[dataset['age'] == dataset['age'].max()]
    stroke_status = oldest_person['stroke'].bool()
    
    return stroke_status.any()",bool,-,True
